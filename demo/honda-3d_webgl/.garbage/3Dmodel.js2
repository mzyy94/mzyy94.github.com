
if(!Detector.webgl) Detector.addGetWebGLMessage();

function modelView(objName){
	var renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true, premultipliedAlpha: true });
	var s_x = window.innerWidth;
	var s_y = window.innerHeight;
	renderer.setSize(s_x, s_y);
	renderer.setClearColor(0x000000, 1.0);
	document.body.appendChild(renderer.domElement);

	var scene = new THREE.Scene();


	var light = new THREE.DirectionalLight(0xcccccc);
	light.position = new THREE.Vector3(0.577, 0.577, 0.577);
	scene.add(light);

	var ambient = new THREE.AmbientLight(0x333333);
	scene.add(ambient);

	var camera = new THREE.PerspectiveCamera(15, s_x / s_y);
	var controls;

	var loader = new THREE.JSONLoader();
	loader.load(objName + '_LOW.js', function(geometry) {
		var geometr = new THREE.SphereGeometry(1, 32, 16);
		var material = new THREE.MeshPhongMaterial({
			color: 0xffffff, specular: 0xcccccc, shininess:50, ambient: 0xffffff,
			map: THREE.ImageUtils.loadTexture('earth.jpg') });

		//var material = new THREE.MeshPhongMaterial();
		mesh = new THREE.Mesh(geometr, material);
		mesh.scale = new THREE.Vector3(0.008, 0.008, 0.008);
		scene.add(mesh);
		//mesh.rotation.y = 1000;
		//mesh.position.x = -10;
		//mesh.position.z = 20;
		//camera.position = new THREE.Vector3(-30, 60, 60);
		camera.position = new THREE.Vector3(0, 0, 8);
		//camera.lookAt(new THREE.Vector3(0, 0, 0));
		camera.lookAt(mesh);
		scene.add(camera);

		controls = new THREE.OrbitControls(camera);
		controls.rotateSpeed = 0.01; //回転させるときの速さ
		controls.zoomSpeed = 1.2; //ズームするときの速さ
		controls.panSpeed = 0.03; //パンするときの速さ
		controls.center = new THREE.Vector3(0, 0, 0);

		render();
	});

	function render() {
		requestAnimationFrame(render);
		console.log(camera.position)
		controls.update();
		renderer.render(scene, camera);
	};

	window.addEventListener('resize', function() {
		renderer.setSize(window.innerWidth, window.innerHeight);
		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();
	}, false );
}
