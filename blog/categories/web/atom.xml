<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | 犬アイコンのみっきー]]></title>
  <link href="http://mzyy94.com/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://mzyy94.com/"/>
  <updated>2015-08-08T21:10:22+09:00</updated>
  <id>http://mzyy94.com/</id>
  <author>
    <name><![CDATA[mzyy94]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Honda 3DのサイトがFlashだったときの症例]]></title>
    <link href="http://mzyy94.com/blog/2014/02/13/honda-3d-webgl/"/>
    <updated>2014-02-13T19:03:54+09:00</updated>
    <id>http://mzyy94.com/blog/2014/02/13/honda-3d-webgl</id>
    <content type="html"><![CDATA[<p>RSSを消化してたときのこと。
<a href="http://japanese.engadget.com/2014/01/28/3d-nsx-concept-5/">ホンダが歴代コンセプトカーの3DデータをCCライセンスで公開、NSX Concept など全5種 (動画) - Engadget Japanese</a>
なる記事を見つけて、「クリエイティブコモンズで3Dモデル公開とはなかなかやるな。流行に乗っててよろしい。」と感心していました。</p>

<p>しかし、そんな関心も次のクリックで吹っ飛びました。</p>

<!-- more -->


<pre>
＿人人人人人人人＿
＞　衝撃のFlash　＜
￣Y^Y^Y^Y^Y^Y￣
</pre>


<p>流行に乗ってると微塵でも思ってしまったことを後悔。
3Dプリンタという流行を意識した3Dモデルの公開に使われたものが流行遅れのFlashであるという、なんとも言い難い悲しい状況を目の当たりにしてしまったのです。</p>

<p>この惨状を目にした60分後、手元にはこんなものが出来上がっていました。</p>

<h3><a href="http://mzyy94.com/HONDA-3D-WebGL-demo/">Honda 3D - WebGL Demo (Beta)</a></h3>

<p>
<span>※Chrome 33向けです。</span><br>
<span>※※RAMとCPU使用率と通信量を膨大に使うので開く際はご注意ください</span>
</p>

<p><a href="https://github.com/mzyy94/HONDA-3D-WebGL-demo">GitHub Repository</a></p>

<p>悲しみからか、手が勝手に動き<strong>Flashなし</strong>で模倣していました。</p>

<p>このれらのサイトを構成している技術に関して比較してみました。</p>

<p><img src="/blog/resources/images/2014/2/13/comparison.png" alt="comparison" /></p>

<p>せっかくつくったので解説させてください。</p>

<h1>トップページ</h1>

<p>上：拙作デモサイト　下：本家サイト</p>

<p><img src="/blog/resources/images/2014/2/13/demo-top.png" alt="demo" />
<img src="/blog/resources/images/2014/2/13/original-top.png" alt="original" /></p>

<p>メインページの全体像はほとんど違和感を感じさせない作りとなっています。
左右のパネルを選択すると本家と変わらないスライドアニメーションで次のパネルへ移り変わります。</p>

<p>このカルーセルはjQueryによるclass操作とCSS3のkey frame アニメーションを使っています。クリック時に左端のパネルのmarginを以下のように動かすことで滑らかなスライドアニメーションを疑似的に見せています。</p>

<p>CSS3の技術が詰まったパネルをもう少し詳しく見てみましょう。
テキストの上でもカーソル形状は本家のものと同じくデフォルトになるようにしてあります。
背景透過はbackground-colorをCSS3からのrgba値を用いており、サムネイルを円形にしてあるのもCSS3のborder-radiusを指定して実現しています。さらに、パネル上の美しいfontもCSS3によるWeb fontを利用しています。</p>

<p>背景動画はYouTubeのHTML5 videoでの埋め込みにしてあるというAnti-Flashの徹底ぶり。オプションを以下の通り指定してNo Flashにしました。</p>

<p>&#8220;`</p>

<iframe id="bgmovie" width="1920" height="1080" src="http://www.youtube.com/embed/MJWzLm91Hmg?html5=1&playlist=kdOVr4Tqdoc&autoplay=1&disablekb=1&controls=0&showinfo=0&vq=hd1080&modestbranding=1&rel=0&loop=1" style="top: -374px;"></iframe>


<p>&#8220;`</p>

<h1>3D ビュー</h1>

<p>ここのシーンを見せるためにHondaはFlashを試用したというのは安易に想定できますが、せっかくなのでHTML5の技術を使って欲しかったです。
ということで、HTML5の新技術であるWebGLを利用してモデルを表示するようにしました。</p>

<p>WebGLの複雑なコードを書かずとも、数十行のコードで手軽にWebGLをつかえるライブラリはいくつか存在します。
今回は<a href="http://threejs.org/">three.js</a>とよばれるWebGLラッパーを利用しました。</p>

<p>WebGLで3Dモデルを表示するには、表示するための3Dデータが必要です。
現在、Honda-3d.comからダウンロードできるファイルは3Dプリンタ向けのSTL形式で、WebGL、加えてthree.jsでもそのままでは利用できるものではありません。
そこで、three.jsで扱える形式に変換する必要があります。
今回は3Dモデリング界では名高い<a href="http://www.blender.org/">Blender</a>を利用しました。</p>

<h2>3Dモデルデータを変換する</h2>

<p>BlenderでSTL形式をthree.jsで扱える形式に変換する方法はそこまで難しいことではありません。
Blenderは標準でSTL形式を扱えるので、three.jsで使えるよう、
three.jsに含まれるBlender用のAdd-onを導入すれば、three.jsで表示できる形式に変換する環境は整います。
このAdd-onはthree.jsをgitリポジトリからCloneした際に、一緒にダウンロードされています。</p>

<p>Add-onを導入するのは簡単で、必要なファイル群をBlenderのアプリケーションフォルダに入れてあげるだけです。
OS X上で、Blender@2.69とthree.js@r65を利用する場合は、</p>

<pre><code>[three.jsのClone先ディレクトリ]/utils/exporters/blender/2.65/scripts/addons
</code></pre>

<p>にある<code>io_mesh_threejs</code>ディレクトリを</p>

<pre><code>[アプリケーションフォルダ]/Blender.app/Contents/MacOS/2.69/scripts/addons
</code></pre>

<p>の中にコピーします。</p>

<p><img src="/blog/resources/images/2014/2/13/blender-1.png" alt="blender" /></p>

<p>コピーし終わったらBlenderを起動し、File->User Preferences&#8230;で設定画面を開き、
Addonsタブにある検索ボックスでthreejsとして検索して出てくる項目をチェックし有効化します。
チェックし終わったら次回以降も反映されるよう、Save User Settingsをしておきます。
<img src="/blog/resources/images/2014/2/13/blender-2.png" alt="blender" />
<img src="/blog/resources/images/2014/2/13/blender-3.png" alt="blender" /></p>

<p>設定画面を閉じたらFile->Import->Stlでダウンロードしたファイルを開き、
起動時に作られていた不要なオブジェクトを削除し、File->Export->Three.jsでthree.js用の形式にして出力します。
<img src="/blog/resources/images/2014/2/13/blender-4.png" alt="blender" />
<img src="/blog/resources/images/2014/2/13/blender-5.png" alt="blender" />
<img src="/blog/resources/images/2014/2/13/blender-6.png" alt="blender" /></p>

<h2>3Dモデルデータを表示する</h2>

<p>上：拙作デモサイト　下：本家サイト</p>

<p><img src="/blog/resources/images/2014/2/13/demo-3dview.png" alt="demo" />
<img src="/blog/resources/images/2014/2/13/original-3dview.png" alt="original" /></p>

<p>表示はthree.jsの基本的な機能を使うだけで行っています。
基本的な方法は、
<a href="http://www.atmarkit.co.jp/ait/articles/1210/04/news142.html">Webグラフィックをハックする（5）：多彩な表現力のWebGLを扱いやすくする「Three.js」 (1/5) - ＠IT</a>
にて説明されています。
この説明を参考に、three.jsのファイルを読み込ませて表示させています。
ちゃんとマウスでぐりぐりできるようになっています。</p>

<p>各コードに関して説明したかったのですが、すでに結構な分量になっているので、気になる人は以下のGistにてご参照ください。</p>

<p><a href="https://gist.github.com/mzyy94/8974444">https://gist.github.com/mzyy94/8974444</a></p>

<p>以上、Anti-Flashをこじらせた人の症例でした。</p>
]]></content>
  </entry>
  
</feed>
