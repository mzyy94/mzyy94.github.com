<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bash | 犬アイコンのみっきー]]></title>
  <link href="http://mzyy94.com/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://mzyy94.com/"/>
  <updated>2015-01-31T19:38:46+09:00</updated>
  <id>http://mzyy94.com/</id>
  <author>
    <name><![CDATA[mzyy94]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unicode形式に変換するPopClipのExtensionを作りたかっただけだったのに]]></title>
    <link href="http://mzyy94.com/blog/2014/02/21/unicode-popclip-extension/"/>
    <updated>2014-02-21T17:46:27+09:00</updated>
    <id>http://mzyy94.com/blog/2014/02/21/unicode-popclip-extension</id>
    <content type="html"><![CDATA[<p>いろいろな趣味がよく合う<a href="http://hitoriblog.com/">ひとりぶろぐ</a>さんの記事を読んでいたときのこと。どうやら<a href="https://itunes.apple.com/jp/app/popclip/id445189367?mt=12&amp;uo=4&amp;at=1l3v4mQ">PopClip</a>が便利らしいことを<a href="http://hitoriblog.com/?p=22987">発見</a>したので、だいぶ昔に買ったっきりで使っていなかったPopClipを活用してみることにしました。</p>

<h1>PopClipとは</h1>

<p>PopClipに関しては、<a href="http://hitoriblog.com/?p=22987">ひとりぶろぐさんの記事</a>にて紹介されているので省略します。知っているという前提で以下、話を進めます。</p>

<h1>Unicodeエンコード</h1>

<p>最近なにかとマイブームなUnicode。CSSのcontentプロパティで記号を表示したり、JavaScriptで難読化したりなど、よく使う割には毎回ブラウザ上でコンソールを拡げていました。この手間を解決する手段として、せっかくなのでPopClipの拡張機能を利用しようと思います。</p>

<!-- more -->


<h1>PopClip拡張機能</h1>

<p>PopClipが人気なのは、iOSライクなコピー＆ペーストができるからではなく、PopClip拡張機能で選択テキストなどに対する便利な機能が実現できるかららしい[<em>要出典</em>]。
PopClip拡張機能を作るための手順に関しては、さっきからよく登場する<a href="http://hitoriblog.com/?p=22987">ひとりぶろぐさんの記事</a>にて説明があるので、読んで作っていきます。</p>

<h2>UnicodeEncode.popclipext</h2>

<p><img src="/blog/resources/images/2014/2/21/UnicodeEncode_popclipext.gif" alt="UnicodeEncode_popclipext" /></p>

<p>そこまで難しく考えることなく、サンプルのURLエンコードの拡張機能をちょちょっと編集して、\uXXXXの形のUnicode形式を出力するプログラムをかきました。UTF-8→Unicodeの変換は、<a href="http://gihyo.jp/admin/serial/01/charcode/0004">第4回 UTF-8の冗長なエンコード：本当は怖い文字コードの話｜gihyo.jp … 技術評論社</a>を参考にしました（はせがわさんの警告無視）。</p>

<p>こちらになります。<a href="https://github.com/mzyy94/UnicodeEncode.popclipext">mzyy94/UnicodeEncode.popclipext</a></p>

<p><strong>作るの意外と大変だった</strong></p>

<p>さらっとサンプルのソースコードを読んだ限り、簡単にできるものだとおもったのですが、いろいろと問題がありました。</p>

<h3>LANG環境変数問題</h3>

<p>一つ目の問題は、LANG環境変数。
おなじみシステムのローケルを設定する環境変数ですが、日本語を扱うときのこのロケールがいろいろと厄介なものでした。
OS X Mavericksで日本語環境でターミナルを起動する際は、標準でLANG=ja_JP.UTF-8に設定されています。この状態で、日本語を扱うときには特に問題ないのですが、LANG=Cのときだと厄介なことになることがあるのです。
その例が以下の画像。</p>

<p><img src="/blog/resources/images/2014/2/21/problem1.gif" alt="Problem1" /></p>

<p>&#8220;あ&#8221;をUnicode表記にすると\u0342になるはずですが、この例では出力がUTF-8バイトコードの&#8221;あ&#8221;であるe3 81 82がそれぞれ個々の文字としてUnicodeにエンコードされています。
PopClip拡張機能は、起動時にLANG環境変数を引き継ぐことなく、未指定の状態でスクリプトが実行されているようで、デフォルトであるLANG=Cでの処理となってしまっているためです。bashで実装したのが大きな原因であるようですが、どうも文字列を文字ごとに分割するときにLANG=Cではマルチバイト文字をASCII文字として扱ってしまっているのが原因らしいです。</p>

<p>解決策として、<code>export LANG=en_US.UTF-8</code>と、UTF-8ロケールに設定しました。</p>

<h3>濁点文字分離問題</h3>

<p>まず、以下の例をみてください。</p>

<p><img src="/blog/resources/images/2014/2/21/problem2.gif" alt="Problem2" /></p>

<p>三人ともおなじ５文字の名前なのに、鹿目さんだけがUnicode化した際に６文字になってしまっています。
これは、鹿目さんが悪いのではなく、OS Xの挙動が悪いのです。</p>

<p>この問題は、OS X特有のもので、OS X上でのUTF-8の文字コードの取り扱いに起因しています。
OS XではUTF-8を扱う文字コードが２種存在します。<code>iconv -l | grep UTF-8</code>とすれば確認できますが、一つは純粋なUTF-8で、もう一つはUTF-8-MACなるものです。このUTF-8-MACは、OS XのファイルシステムによってUTF-8を扱うためのものであるらしく<a href="http://macwiki.sourceforge.jp/wiki/index.php/UTF-8-MAC">1</a>、濁点のある仮名文字などで正規分解が行われ、今回の例では「鹿」「目」「ま」「と」「 ゙」「か」といった具合にUTF-8の文字列がPopClip拡張機能にわたされてしまったようです。この問題は、PopClip拡張機能にせずにシェルスクリプトをそのままのかたちで実行し、テストしたときには再現されなかったので、発見が遅れ、解決に時間がかかってしまいました。</p>

<p>この問題は<code>iconv -f UTF-8-MAC -t UTF-8</code>とすることで解決しました。</p>

<h1>PopClip拡張機能を作りたかっただけだったのに</h1>

<p>PopClipがロケール環境変数を引き継いでいなかったおかげでLANG=CでのUTF-8の文字の扱いがわかり、PopClipがUTF-8-MACとしてテキストを渡してくれていたおかげでOS XでのUTF-8の取り扱いに関して知識を得ることができて、結果的にいい経験になりました。ありがとう、PopClip。</p>
]]></content>
  </entry>
  
</feed>
