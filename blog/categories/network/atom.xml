<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: network | 犬アイコンのみっきー]]></title>
  <link href="http://mzyy94.com/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://mzyy94.com/"/>
  <updated>2016-10-09T15:57:07+09:00</updated>
  <id>http://mzyy94.com/</id>
  <author>
    <name><![CDATA[mzyy94]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一般のご家庭向けEAP-SIM認証Wi-Fi]]></title>
    <link href="http://mzyy94.com/blog/2016/10/09/household-eap-sim-wifi/"/>
    <updated>2016-10-09T16:00:00+09:00</updated>
    <id>http://mzyy94.com/blog/2016/10/09/household-eap-sim-wifi</id>
    <content type="html"><![CDATA[<p>ご家庭のWi-Fi、まだパスワード認証ですか？</p>

<p>こんにちは。陽炎型航洋直接教育艦 晴風の艦長、岬明乃です。
昨日開催された<a href="http://www.kernelvm.org/">カーネル／VM探検隊</a>で、晴風の艦内無線LANの構築をした話をしてきました。</p>

<p><a href="http://www.slideshare.net/mzyy94/subscriber-identity-module-66892458">http://www.slideshare.net/mzyy94/subscriber-identity-module-66892458</a>&#8220;>http://www.slideshare.net/mzyy94/subscriber-identity-module-66892458&#8221;>http://www.slideshare.net/mzyy94/subscriber-identity-module-66892458</a></a></p>

<p>発表枠は手軽な20分だったこともあり、聞いていて飽きてしまうであろう詳細な構成方法などを省いたため、構築についての手順を書き記しておきます。</p>

<!-- more -->


<h1>実習期間中の艦内無線LAN事情</h1>

<p>晴風クラスに限らず、横須賀女子海洋学校の1年次の実習では30人前後の船員を乗せて航海に出ます。
艦の仲間のネットワークアクセスを管理するため、艦内無線LANでは802.1XによるWPA2エンタープライズ認証を設けるのがルールとなっています。
802.1X認証の方法は特に学校からの指定はなく、みんな好きなRADIUSサーバを建てて認証基盤を構築しています。
これも実習の一環というわけです。</p>

<p>晴風では、FreeRADIUSを採用し、EAP-TLSでみんなのユーザ名とパスワードをセットして使ってもらうつもりでした。
しかしです。このご時世、パスワードなる脆弱なものを利用するのは少数派なのです。
そこで主計科の子たちと一緒に考えた末、EAP-SIMによるパスワードレス認証を導入することとなりました。</p>

<h1>晴風艦内EAP-SIM認証Wi-Fi構築</h1>

<p>さて、実際に構築した手順を説明していきます。</p>

<h2>SIMカードの読み込み下準備</h2>

<p>ここで必要になるハードウェアは、PC/SCカードリーダとICカードアダプタ、SIMカード変換アダプタです。</p>

<p><a href="https://www.amazon.co.jp/Gemalto-%E3%82%B8%E3%82%A7%E3%83%A0%E3%82%A2%E3%83%AB%E3%83%88-IC%E3%82%AB%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BB%E3%83%A9%E3%82%A4%E3%82%BF-%E5%AF%BE%E5%BF%9C%E4%BD%8F%E5%9F%BA%E3%82%AB%E3%83%BC%E3%83%89%E7%94%A8PC-HWP119316/dp/B003XF2JJY/ref=as_li_ss_il?s=computers&ie=UTF8&qid=1475987930&sr=1-2&keywords=gemalto+%E3%82%AB%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%80&linkCode=li3&tag=mzyy-22&linkId=9d64adcf0113625ebf4f506686687dc6" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B003XF2JJY&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=mzyy-22" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=mzyy-22&l=li3&o=9&a=B003XF2JJY" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="https://www.amazon.co.jp/gp/product/B00G1BJ5TY//ref=as_li_ss_il?&linkCode=li3&tag=mzyy-22&linkId=513e6f72dde319e4cdba6dc2aa22683a" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00G1BJ5TY&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=mzyy-22" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=mzyy-22&l=li3&o=9&a=B00G1BJ5TY" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="https://www.amazon.co.jp/Nano-MicroSIM-%E5%A4%89%E6%8F%9B%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF-4%E7%82%B9%E3%82%BB%E3%83%83%E3%83%88-%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88/dp/B00PESJ072/ref=as_li_ss_il?s=electronics&ie=UTF8&qid=1475988345&sr=1-8&keywords=nanoSIM%E5%A4%89%E6%8F%9B%E3%82%A2%E3%83%80%E3%83%97%E3%82%BF%E3%83%BC&linkCode=li3&tag=mzyy-22&linkId=ffdb8e98f3f5b5db08bb78437cd00fc2" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00PESJ072&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=mzyy-22" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=mzyy-22&l=li3&o=9&a=B00PESJ072" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>必要なソフトウェアは、</p>

<ul>
<li><a href="https://pcsclite.alioth.debian.org/pcsclite.html">PCSC Lite</a></li>
<li><a href="https://github.com/LudovicRousseau/pyscard">pyscard</a></li>
<li><a href="https://github.com/mzyy94/pysim">pySIM</a></li>
</ul>


<p>です。よしなにインストールしてくれればいいのですが、依存関係がごにょっとしてるのでDebianでのセットアップ例を挙げておきます。</p>

<pre><code>$ sudo apt-get install pcscd pcsc-tools libccid libpcsclite-dev
$ sudo apt-get install python python-setuptools python-serial python-dev swig git
$ mkdir -p ~/.cache/
$ cd ~/.cache/
$ curl -O http://ludovic.rousseau.free.fr/softwares/pcsc-tools/smartcard_list.txt
$ git clone https://github.com/LudovicRousseau/pyscard /tmp/pyscard
$ cd /tmp/pyscard
$ sudo python setup.py build_ext install
$ git clone https://github.com/mzyy94/pysim ~/pysim &amp;&amp; cd ~/pysim
</code></pre>

<h2>SIMへのアクセスの確認</h2>

<p>スライドで発表した通り、SIMにはいろいろな情報が詰まっています。
ICCIDやIMSIを確認してみたい場合は、pySIMの<code>pySim-read.py</code>を実行してみてください。情報がだばぁっとでてこれば成功です。
このとき、上記のGemaltoのICカードリーダを使っている場合は、<code>-p 0</code>オプションをつけることでリーダから読み込むことができます。</p>

<h2>FreeRADIUSのEAP-SIM設定</h2>

<p>発表スライドでは、simtriplets.datに認証情報を書き込む方法を記しました。
この方法は、Debianで<code>apt-get install freeradius</code>で入るバージョンやFreeRADIUSの標準ビルド設定では無効化されています。
晴風では多くの艦員のSIM認証情報を書き込むため、FreeRADIUSをソースからビルドしてsimtripletsの読み込みを有効化していました。</p>

<p>しかし、ご家庭では30を超える認証情報を追加することはほとんどないだろうということで、一般的なFreeRADIUSのユーザ設定と同じ方法を紹介します。</p>

<h3>EAP-SIM有効化</h3>

<p>EAP-SIMは標準では無効化されているので、これを有効化します。
有効化といっても大層なことはせず、設定ファイル<code>/etc/freeradius/eap.conf</code>に2行追加するだけですけどね。</p>

<pre><code class="diff">diff --git a/eap.conf b/eap.conf
index 797130d..435f7e6 100644
--- a/eap.conf
+++ b/eap.conf
@@ -15,6 +15,8 @@
 #  See experimental.conf for documentation.
 #
        eap {
+               sim {
+               }
                #  Invoke the default supported EAP type when
                #  EAP-Identity response is received.
                #
</code></pre>

<p>有効化ついでにsecretも変えておくとわかりやすくていいですね。</p>

<pre><code class="diff">diff --git a/clients.conf b/clients.conf
index d5b1f74..036e053 100644
--- a/clients.conf
+++ b/clients.conf
@@ -98,7 +98,7 @@ client localhost {
        #  The default secret below is only for testing, and should
        #  not be used in any real environment.
        #
-       secret          = testing123
+       secret          = eap-sim

        #
        #  Old-style clients do not send a Message-Authenticator
</code></pre>

<h3>EAP-SIM認証情報の設定</h3>

<p>発表でも述べた通り、SIMの仕様書にあるコマンドを送ってチャレンジする認証情報を生成しなければいけません。
加えて、得た情報をFreeRADIUSのusersファイルの書式にしたがって編集する必要があります。
EAP-SIMのリクエストの仕様上、IMSIからHNIを推定してMCCとMNCを特定してユーザ名を作り上げるのは正直言って面倒です。</p>

<p>なのでコマンド一発でusersファイルが作成できるツールを<a href="https://github.com/mzyy94/pysim/">https://github.com/mzyy94/pysim/</a>に同梱してあります。
<code>./pySim-gen-eapsim-user.py</code>をバシっと叩いて一瞬でusersファイルを作れます。</p>

<pre><code>~/pysim$ ./pySim-gen-eapsim-user.py -p 0 | sudo tee -a /etc/freeradius/users
# IMSI: 440103152044102
# NTT DoCoMo Kansai Inc.
1440103152044102@wlan.mnc010.mcc440.3gppnetwork.org  Auth-Type := EAP, EAP-Type := SIM
        EAP-Sim-Rand1 = 0x6d58e5afebffe3f480738f104a74afb8,
        EAP-Sim-SRES1 = 0xbd952f43,
        EAP-Sim-KC1 = 0x610f35c9208e1448,
        EAP-Sim-Rand2 = 0xc22413df2efea1e70197ea58519a72f0,
        EAP-Sim-SRES2 = 0x90f003a1,
        EAP-Sim-KC2 = 0x095001424f8fb62a,
        EAP-Sim-Rand3 = 0x60a5dc16de844884dea914cd41113477,
        EAP-Sim-SRES3 = 0xff0444b3,
        EAP-Sim-KC3 = 0xcff6d25c04ab4474,
</code></pre>

<h2>無線LAN APの設定</h2>

<p>ここはみんな自前の無線LAN環境があると思うので、一例としてEAP-SIM認証が最低限動作するhostapdの構成を記しておきます。
詳しい設定項目などは、<a href="https://wiki.gentoo.org/wiki/Hostapd">Hostapd - Gentoo Wiki</a> をご参照ください。
また、<a href="https://www.amazon.co.jp/%E3%83%A4%E3%83%9E%E3%83%8F-Yamaha-WLX202-%EF%BC%BB%E7%84%A1%E7%B7%9ALAN%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%EF%BC%BD/dp/B01D2QBF02/ref=as_li_ss_tl?ie=UTF8&amp;qid=1475994913&amp;sr=8-1&amp;keywords=wlx202&amp;linkCode=ll1&amp;tag=mzyy-22&amp;linkId=367f85f6bf22e56c6ab5521d89450c6d">WLX 202</a>など、
お手持ちの無線LAN APで外部RADIUSサーバに対応しているものをお持ちであれば、FreeRADIUSのアドレスの指定とsecretの設定をすることで利用できるでしょう。</p>

<h3>hostapdの設定</h3>

<p>必要なツールのインストール<code>apt-get install hostapd bridge-utils</code>。
そして、<strong>/etc/network/interfaces</strong>をこんな感じに。</p>

<pre><code>source /etc/network/interfaces.d/*

auto lo
iface lo inet loopback

allow-hotplug eth0
iface eth0 inet manual

allow-hotplug wlan0
iface wlan0 inet manual

auto br0
iface br0 inet dhcp
bridge_ports eth0
</code></pre>

<p>で、<strong>/etc/hostapd/hostapd.conf</strong>をこう。</p>

<pre><code>interface=wlan0
bridge=br0
driver=nl80211

ctrl_interface=/var/run/hostapd
ctrl_interface_group=0

ssid=EAP-SIM_AP

hw_mode=g
channel=8

eap_server=0 # Disable embedded eap server

# WPA2 Enterprise
wpa=2
ieee8021x=1
wpa_key_mgmt=WPA-EAP
rsn_pairwise=CCMP

# RADIUS authentication
auth_algs=1
auth_server_addr=127.0.0.1
auth_server_port=1812
auth_server_shared_secret=eap-sim
</code></pre>

<h2>自宅EAP-SIM無線LANアクセスポイントへの接続</h2>

<p>あとは<code>hostapd</code>を立ち上げて接続するだけ！とお思いでしょうが、残念ならがクライアント側にAPの登録が必要となることがあります。
iOSでは、WPA2 EnterpriseのアクセスポイントをデフォルトでEAP-TLSとして認識し、加えてiPhone/iPad側でEAP-SIMとして接続させる方法がありません。
立ち上げたAPがEAP-SIM認証であることを教え込むために、構成プロファイルを作成する必要があります。</p>

<p><img src="/blog/resources/images/2016/10/09/apple-configurator2.png" alt="apple configurator2" /></p>

<p>macOSが動く環境をお持ちの方は、<a href="https://itunes.apple.com/jp/app/apple-configurator-2/id1037126344?mt=12">Apple Configurator 2</a>で上図のように作成するか、
もしくは<em>EAP-SIM_AP</em>向けに作った以下の構成プロファイル（XMLファイル）のAP名を変更したものをiOSデバイスにインストールして準備完了です。</p>

<p><a href="/blog/resources/data/2016/10/09/EAP-SIM_AP.mobileconfig">EAP-SIM_AP.mobileconfig</a></p>

<p>最後にお待ちかね、<code>hostapd /etc/hostapd/hostapd.conf</code>で起動させて接続してみましょう！</p>

<pre><code>$ sudo hostapd /etc/hostapd/hostapd.conf
Configuration file: /etc/hostapd/hostapd.conf
Using interface wlan0 with hwaddr dc:fb:02:9b:11:ef and ssid "EAP-SIM_AP"
wlan0: RADIUS Authentication server 127.0.0.1:1812
wlan0: interface state UNINITIALIZED-&gt;ENABLED
wlan0: AP-ENABLED
wlan0: STA f4:0f:24:ea:95:13 IEEE 802.11: authenticated
wlan0: STA f4:0f:24:ea:95:13 IEEE 802.11: associated (aid 1)
wlan0: CTRL-EVENT-EAP-STARTED f4:0f:24:ea:95:13
wlan0: CTRL-EVENT-EAP-PROPOSED-METHOD vendor=0 method=1
wlan0: STA f4:0f:24:ea:95:13 WPA: pairwise key handshake completed (RSN)
wlan0: AP-STA-CONNECTED f4:0f:24:ea:95:13
wlan0: STA f4:0f:24:ea:95:13 RADIUS: starting accounting session 57F9E33F-00000000
wlan0: STA f4:0f:24:ea:95:13 IEEE 802.1X: authenticated - EAP type: 18 (SIM)
</code></pre>

<h1>まとめ</h1>

<p>海の仲間は家族だから！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1万円台の格安Intel X540-T2 10GbEを買ってみた]]></title>
    <link href="http://mzyy94.com/blog/2016/07/06/hello-10gbe-nic/"/>
    <updated>2016-07-06T03:24:50+09:00</updated>
    <id>http://mzyy94.com/blog/2016/07/06/hello-10gbe-nic</id>
    <content type="html"><![CDATA[<p>事の発端はこちらのツイート</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">Amazonに出品されてる激安X540-T2（19000円）って本物なの、大丈夫なの</p>&mdash; ゆずはら (@yuzuhara) <a href="https://twitter.com/yuzuhara/status/749804710530392065">2016年7月4日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">同じこと思っててまだ買えずにいる <a href="https://t.co/424csKrtVR">https://t.co/424csKrtVR</a></p>&mdash; ハイスクール・フリートが生きがい (@mzyy94) <a href="https://twitter.com/mzyy94/status/749821436919885824">2016年7月4日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>この低価格NICはずっと気になっていて、ほしいものリストにもずっと突っ込んでありました。
<img src="/blog/resources/images/2016/07/06/wishlist.png" alt="Wishlistの画像" /></p>

<p>突っ込んだ当時の価格からずいぶんと安くなり、2016/07/04時点で2万円を切っていたので、以下のような煽りも受けたついでに2枚買ってみました。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">買って確かめてくれよ（懇願 <a href="https://t.co/bWfXoO153O">https://t.co/bWfXoO153O</a></p>&mdash; ゆずはら (@yuzuhara) <a href="https://twitter.com/yuzuhara/status/749824378876022784">2016年7月4日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>買って挙動を確かめてみたレポートです。</p>

<p><a href="https://www.amazon.co.jp/intel-X540T2-X540-T2/dp/B0077CS9UM/ref=sr_1_1?ie=UTF8&amp;qid=1467713812&amp;sr=8-1&amp;tag=mzyy-22">Amazon.co.jp： intel X540-T2: パソコン・周辺機器</a></p>

<!-- more -->


<h1>Intel X540-T2</h1>

<p><img src="/blog/resources/images/2016/07/06/x540-t2.jpg" alt="NICの画像 form Intel" /></p>

<p><a href="http://ark.intel.com/ja/products/58954/Intel-Ethernet-Converged-Network-Adapter-X540-T2">Intel® Ethernet Converged Network Adapter X540-T2 仕様</a></p>

<p>一般のご家庭向けのデュアルポート10GbE NICです。
ark intelの希望カスタマー価格を見ると<em>$508.00 - $513.00</em>とあるように、執筆時の為替レートで考えても5万円は下らない代物です。
2012年発売から時が立っており、今年のQ1に後継となるX550-T2が発売されていることを考えると、価格が下がるのは納得ですが、
コンシューマー向けではない機器であるためそこまで値下がりは期待できないと思われていました。</p>

<p>それがついに1万円台で買えるとあって、これから一般のご家庭に急速に広まっていくNICの一つになることは間違いなしです。</p>

<p><a href="https://www.amazon.co.jp/intel-X540T2-X540-T2/dp/B0077CS9UM/ref=sr_1_1?ie=UTF8&amp;qid=1467713812&amp;sr=8-1&amp;tag=mzyy-22">Amazon.co.jp： intel X540-T2: パソコン・周辺機器</a></p>

<h1>購入＆到着</h1>

<p>購入を煽られてクレジットカードの締日を確認し、ポイント還元率の計算と締日が遠いカードの認証情報の登録を行って1時間ほど立ったあとにアマゾンポチｗ！</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">買いました <a href="https://t.co/QauGkl8eQw">https://t.co/QauGkl8eQw</a></p>&mdash; ハイスクール・フリートが生きがい (@mzyy94) <a href="https://twitter.com/mzyy94/status/749832787960602624">2016年7月4日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>14時頃に発注して翌日12時頃に到着しました。さすがAmazonプライムお急ぎ便ですね。
<a href="https://www.amazon.co.jp/tryprimefree?tag=mzyy-22">Amazonプライムの入会はこちら</a></p>

<p><img src="/blog/resources/images/2016/07/06/amazon-prime.jpg" alt="箱の画像" /></p>

<p>Twitterでは「この安さ、偽物じゃないか？」と噂されていましたが、Intelロゴはちゃんとしたものでした。</p>

<p><img src="/blog/resources/images/2016/07/06/intel-haitteru.jpg" alt="Intelロゴの画像" /></p>

<p><a href="https://www.amazon.co.jp/intel-X540T2-X540-T2/dp/B0077CS9UM/ref=sr_1_1?ie=UTF8&amp;qid=1467713812&amp;sr=8-1&amp;tag=mzyy-22">Amazon.co.jp： intel X540-T2: パソコン・周辺機器</a></p>

<h1>セットアップ</h1>

<h2>環境</h2>

<p>以下の、A及びBの2台のマシンに導入しました。</p>

<p>A: 仮想マシン動かしてるやつ</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> パーツ </th>
<th style="text-align:left;"> 種類</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> CPU     </td>
<td style="text-align:left;"> Intel Xeon E3-1245v3 3.4GHz</td>
</tr>
<tr>
<td style="text-align:left;"> Memory  </td>
<td style="text-align:left;"> ECC DDR3-1600 16GB (8GB x 2)</td>
</tr>
<tr>
<td style="text-align:left;"> PCIe </td>
<td style="text-align:left;"> PCI Express 3.0</td>
</tr>
<tr>
<td style="text-align:left;"> OS </td>
<td style="text-align:left;"> ProxMox 4.2 (Debian Jessie 8.2)</td>
</tr>
<tr>
<td style="text-align:left;"> バージョン </td>
<td style="text-align:left;"> 4.4.6-1-pve</td>
</tr>
</tbody>
</table>


<p>B: NAS</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> パーツ </th>
<th style="text-align:left;"> 種類</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> CPU     </td>
<td style="text-align:left;"> Intel Core i5-2405S 2.5GHz</td>
</tr>
<tr>
<td style="text-align:left;"> Memory  </td>
<td style="text-align:left;"> DDR3-1600 16GB (8GB x 2)</td>
</tr>
<tr>
<td style="text-align:left;"> PCIe </td>
<td style="text-align:left;"> PCI Express 2.0</td>
</tr>
<tr>
<td style="text-align:left;"> OS </td>
<td style="text-align:left;"> Rockstor 3.8-14 (CentOS 7.2)</td>
</tr>
<tr>
<td style="text-align:left;"> バージョン </td>
<td style="text-align:left;"> 4.6.0-1.el7.elrepo.x86_64</td>
</tr>
</tbody>
</table>


<h3>NOTE: PCI Express 2.0とPCI Express 2.1の違いについて</h3>

<p>X540-T2はPCI Express 2.1以上の拡張カードスロットに対応しているため、Bの構成は非対応となっています。
マイナーバージョンアップ程度の変更ですが、3.0に盛り込む予定であった多くの機能をIntelが打診して無理やり2.1として出させたこともあって<em>[要出典]</em>、
数少ないPCI Express 2.1インターフェースを要求するこのNICもその追加機能を多く使っていると考えられます。</p>

<p>出典？：<a href="http://pc.watch.impress.co.jp/docs/news/event/380216.html">【イベントレポート】【PCI-SIG Developers Conference 2010レポート】 PCIe Specificationの詳細 - PC Watch</a></p>

<p>ただ、PCI Expressには下位互換性がサポートされているため、最高のパフォーマンスは出せないにしろ、動作すると予想されるため、Bの構成でも利用してみます。</p>

<h2>接続</h2>

<p>X540-T2と同時購入した<em><a href="https://www.amazon.co.jp/gp/product/B00ID1S8ZW/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;tag=mzyy-22">こたつみたいなCAT7 LANケーブル</a></em>をそれぞれのポートに接続してこんな感じでつなげてみました。</p>

<p><img src="/blog/resources/images/2016/07/06/connected.jpg" alt="つなげた図" /></p>

<p><a href="https://www.amazon.co.jp/intel-X540T2-X540-T2/dp/B0077CS9UM/ref=sr_1_1?ie=UTF8&amp;qid=1467713812&amp;sr=8-1&amp;tag=mzyy-22">Amazon.co.jp： intel X540-T2: パソコン・周辺機器</a></p>

<h2>認識</h2>

<p>とりあえずカーネルで標準で読み込まれてたドライバで認識しました。</p>

<pre><code>[root@rockstor ~]# lspci -d 8086: | grep Ethernet
01:00.0 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01)
01:00.1 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01)
[root@rockstor ~]#
</code></pre>

<pre><code>[root@rockstor ~]# lspci -k -s 01:00
01:00.0 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01)
        Subsystem: Intel Corporation Ethernet Converged Network Adapter X540-T2
        Kernel driver in use: ixgbe
01:00.1 Ethernet controller: Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 (rev 01)
        Subsystem: Intel Corporation Ethernet Converged Network Adapter X540-T2
        Kernel driver in use: ixgbe
[root@rockstor ~]#
</code></pre>

<pre><code>[root@rockstor ~]# modinfo ixgbe | head -6
filename:       /lib/modules/4.6.0-1.el7.elrepo.x86_64/kernel/drivers/net/ethernet/intel/ixgbe/ixgbe.ko
version:        4.2.1-k
license:        GPL
description:    Intel(R) 10 Gigabit PCI Express Network Driver
author:         Intel Corporation, &lt;linux.nics@intel.com&gt;
srcversion:     E252348AB8BA33BA57DD40B
[root@rockstor ~]#
</code></pre>

<pre><code>root@pve:~# modinfo ixgbe | head -6
filename:       /lib/modules/4.4.6-1-pve/kernel/drivers/net/ethernet/intel/ixgbe/ixgbe.ko
version:        4.3.15
license:        GPL
description:    Intel(R) 10 Gigabit PCI Express Network Driver
author:         Intel Corporation, &lt;linux.nics@intel.com&gt;
srcversion:     7AED484083B2C5B86424A3A
root@pve:~#
</code></pre>

<p>Rockstor(CentOS 7.2)ではバージョン4.2.1、ProxMox(Debian 8.2)ではバージョン4.3.15のようですね</p>

<h3>ドライバ導入</h3>

<p>そのままで認識してくれましたが、せっかくなので最新のドライバを導入します。
執筆時点の最新のドライバは4.3.15なので、ProxMoxは最新版が搭載されているようです。
Rockstorのドライバをアップデートするため、
Intelから最新のドライバを拾ってきて、<code>tar xf &amp;&amp; make &amp;&amp; make install</code>するだけの簡単なお仕事でした。</p>

<p><a href="https://downloadcenter.intel.com/download/14687/PCI-E-10-Linux-">Download Network Adapter Driver for PCI-E<em> Intel® 10 Gigabit Ethernet Network Connections under Linux</em></a></p>

<h1>検証</h1>

<p>こんなに安くてはたしてしっかり動くのか、そこが問題です。</p>

<h2>検証環境</h2>

<p>構成は前章のセットアップの節に同じ。
Aの仮想マシン動かしてるやつをクライアント、BのNASをサーバとします。
IPアドレスは、Aを172.28.0.2/24、Bを172.28.0.3/24として設定します。</p>

<h2>検証内容</h2>

<h3>単線通信速度測定</h3>

<p>iperf3を使って片方のポートに接続したLANケーブルで通信してTCPによる転送速度を測定します。
5回測定して偏りがなければ、3回目の結果を例としてあげます。</p>

<h3>リンクアグリゲーション通信速度測定</h3>

<p>デュアルポートを束ねてリンクアグリゲーションし、論理20Gbpsを構成してiperf3で通信速度を測定します。
リンクアグリゲーションの構成方法はクライアント・サーバともに同じとし、クライアント側での設定例を以下に示します。</p>

<pre><code>root@pve:~# modprobe bonding
root@pve:~# ip addr add 172.28.0.3/24 brd + dev bond0
root@pve:~# ip link set dev bond0 up
root@pve:~# ifenslave bond0 eth2 eth3
</code></pre>

<p>5回測定して偏りがなければ、3回目の結果を例としてあげます。</p>

<h3>消費電力</h3>

<p>AのXeonマシンにおいて、以下の4状態を10秒間ワットチェッカーで測定した結果の平均値を求めます。</p>

<ul>
<li>X540-T2未搭載でのアイドル時消費電力</li>
<li>X540-T2搭載した状態でのアイドル時消費電力</li>
<li>X540-T2搭載した状態でiperf3単線通信速度測定時の消費電力</li>
<li>X540-T2搭載した状態でiperf3リンクアグリゲーション通信速度測定時の消費電力</li>
</ul>


<h2>結果</h2>

<h3>単線通信速度測定</h3>

<p>iperf3で5回計測した結果、偏りは生じませんでした。
平均的な数値としては、単線では帯域幅が<strong>9.38Gbps</strong>出るといった結果となりました。
以下に、3回目の結果を示します。</p>

<h4>クライアント側</h4>

<pre><code>root@pve:~# iperf3 -c 172.28.0.2 0B 172.28.0.3
Connecting to host 172.28.0.2, port 5201
[  4] local 172.28.0.3 port 59914 connected to 172.28.0.2 port 5201
[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd
[  4]   0.00-1.00   sec  1.10 GBytes  9.41 Gbits/sec   10    624 KBytes
[  4]   1.00-2.00   sec  1.09 GBytes  9.40 Gbits/sec    0    672 KBytes
[  4]   2.00-3.00   sec  1.09 GBytes  9.40 Gbits/sec    0    676 KBytes
[  4]   3.00-4.00   sec  1.09 GBytes  9.36 Gbits/sec    0    687 KBytes
[  4]   4.00-5.00   sec  1.09 GBytes  9.41 Gbits/sec    0    694 KBytes
[  4]   5.00-6.00   sec  1.09 GBytes  9.41 Gbits/sec    7    615 KBytes
[  4]   6.00-7.00   sec  1.08 GBytes  9.31 Gbits/sec   11    609 KBytes
[  4]   7.00-8.00   sec  1.06 GBytes  9.11 Gbits/sec    0    755 KBytes
[  4]   8.00-9.00   sec  1.04 GBytes  8.95 Gbits/sec    0    860 KBytes
[  4]   9.00-10.00  sec  1.05 GBytes  9.01 Gbits/sec    0    887 KBytes
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth       Retr
[  4]   0.00-10.00  sec  10.8 GBytes  9.28 Gbits/sec   28             sender
[  4]   0.00-10.00  sec  10.8 GBytes  9.27 Gbits/sec                  receiver

iperf Done.
</code></pre>

<h4>サーバ側</h4>

<pre><code>[root@rockstor ~]# iperf3 -s -B 172.28.0.2
-----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------
Accepted connection from 172.28.0.3, port 59912
[  5] local 172.28.0.2 port 5201 connected to 172.28.0.3 port 59914
[ ID] Interval           Transfer     Bandwidth
[  5]   0.00-1.00   sec  1.05 GBytes  9.03 Gbits/sec
[  5]   1.00-2.00   sec  1.09 GBytes  9.39 Gbits/sec
[  5]   2.00-3.00   sec  1.09 GBytes  9.40 Gbits/sec
[  5]   3.00-4.00   sec  1.09 GBytes  9.36 Gbits/sec
[  5]   4.00-5.00   sec  1.10 GBytes  9.41 Gbits/sec
[  5]   5.00-6.00   sec  1.09 GBytes  9.40 Gbits/sec
[  5]   6.00-7.00   sec  1.09 GBytes  9.34 Gbits/sec
[  5]   7.00-8.00   sec  1.06 GBytes  9.11 Gbits/sec
[  5]   8.00-9.00   sec  1.04 GBytes  8.93 Gbits/sec
[  5]   9.00-10.00  sec  1.05 GBytes  9.00 Gbits/sec
[  5]  10.00-10.04  sec  43.1 MBytes  9.41 Gbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  5]   0.00-10.04  sec  0.00 Bytes  0.00 bits/sec                  sender
[  5]   0.00-10.04  sec  10.8 GBytes  9.24 Gbits/sec                  receiver
</code></pre>

<h3>リンクアグリゲーション通信速度測定</h3>

<p>iperf3で5回計測した結果、偏りは生じませんでした。
平均的な数値としては、リンクアグリゲーションでは帯域幅が<strong>14.4Gbps</strong>出るといった結果となりました。
以下に、3回目の結果を示します。</p>

<h4>クライアント側</h4>

<pre><code>root@pve:~# iperf3 -c 172.28.0.2 -B 172.28.0.3
Connecting to host 172.28.0.2, port 5201
[  4] local 172.28.0.3 port 54549 connected to 172.28.0.2 port 5201
[ ID] Interval           Transfer     Bandwidth       Retr  Cwnd
[  4]   0.00-1.00   sec  1.67 GBytes  14.3 Gbits/sec    9    677 KBytes
[  4]   1.00-2.00   sec  1.68 GBytes  14.5 Gbits/sec    0    682 KBytes
[  4]   2.00-3.00   sec  1.69 GBytes  14.5 Gbits/sec  165    684 KBytes
[  4]   3.00-4.00   sec  1.72 GBytes  14.8 Gbits/sec    2    773 KBytes
[  4]   4.00-5.00   sec  1.66 GBytes  14.2 Gbits/sec  106    557 KBytes
[  4]   5.00-6.00   sec  1.62 GBytes  13.9 Gbits/sec   29    472 KBytes
[  4]   6.00-7.00   sec  1.68 GBytes  14.5 Gbits/sec   15    840 KBytes
[  4]   7.00-8.00   sec  1.63 GBytes  14.0 Gbits/sec   42    587 KBytes
[  4]   8.00-9.00   sec  1.66 GBytes  14.2 Gbits/sec   94    710 KBytes
[  4]   9.00-10.00  sec  1.62 GBytes  13.9 Gbits/sec   15    710 KBytes
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth       Retr
[  4]   0.00-10.00  sec  16.6 GBytes  14.3 Gbits/sec  477             sender
[  4]   0.00-10.00  sec  16.6 GBytes  14.3 Gbits/sec                  receiver

iperf Done.
</code></pre>

<h4>サーバ側</h4>

<pre><code>[root@rockstor ~]# iperf3 -s -B 172.28.0.2
-----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------
Accepted connection from 172.28.0.3, port 54615
[  5] local 172.28.0.2 port 5201 connected to 172.28.0.3 port 54549
[ ID] Interval           Transfer     Bandwidth
[  5]   0.00-1.00   sec  1.60 GBytes  13.8 Gbits/sec
[  5]   1.00-2.00   sec  1.68 GBytes  14.4 Gbits/sec
[  5]   2.00-3.00   sec  1.69 GBytes  14.5 Gbits/sec
[  5]   3.00-4.00   sec  1.72 GBytes  14.8 Gbits/sec
[  5]   4.00-5.00   sec  1.66 GBytes  14.2 Gbits/sec
[  5]   5.00-6.00   sec  1.62 GBytes  13.9 Gbits/sec
[  5]   6.00-7.00   sec  1.67 GBytes  14.3 Gbits/sec
[  5]   7.00-8.00   sec  1.64 GBytes  14.1 Gbits/sec
[  5]   8.00-9.00   sec  1.66 GBytes  14.2 Gbits/sec
[  5]   9.00-10.00  sec  1.62 GBytes  13.9 Gbits/sec
[  5]  10.00-10.04  sec  62.2 MBytes  14.1 Gbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  5]   0.00-10.04  sec  0.00 Bytes  0.00 bits/sec                  sender
[  5]   0.00-10.04  sec  16.6 GBytes  14.2 Gbits/sec                  receiver
</code></pre>

<h3>消費電力</h3>

<p>4状態における消費電力は以下の通りとなりました。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">状態</th>
<th style="text-align:right;">消費電力</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 未搭載アイドル時</td>
<td style="text-align:right;"> 38 W</td>
</tr>
<tr>
<td style="text-align:left;"> 搭載済みアイドル時 </td>
<td style="text-align:right;"> 51 W</td>
</tr>
<tr>
<td style="text-align:left;"> 単線通信時 </td>
<td style="text-align:right;"> 63 W</td>
</tr>
<tr>
<td style="text-align:left;"> リンクアグリゲーション通信時 </td>
<td style="text-align:right;"> 68 W</td>
</tr>
</tbody>
</table>


<h1>まとめ</h1>

<p>X540-T2は買いである。</p>

<p><a href="https://www.amazon.co.jp/intel-X540T2-X540-T2/dp/B0077CS9UM/ref=sr_1_1?ie=UTF8&amp;qid=1467713812&amp;sr=8-1&amp;tag=mzyy-22">Amazon.co.jp： intel X540-T2: パソコン・周辺機器</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debianでiscsi target/initiator動作させるメモ]]></title>
    <link href="http://mzyy94.com/blog/2014/01/09/iscsi-debian/"/>
    <updated>2014-01-09T13:45:08+09:00</updated>
    <id>http://mzyy94.com/blog/2014/01/09/iscsi-debian</id>
    <content type="html"><![CDATA[<p>Linux上でのiSCSIパケット収集のためにVirtual Boxで作成した、Debian 7.0.0にiSCSI initiatorとtargetを入れたときのメモを起こしておきます。</p>

<!-- more -->


<p>今回iSCSIパケットの収集をする必要があったので、Linux上で動くように導入しました。
iSCSIの説明はまた今度にするとして、簡単に用語を定義しておくと、
iSCSIターゲット
- iSCSIサーバー
iSCSIイニシエータ
- iSCSIクライアント</p>

<p>対象とするシステムは以下のとおりです。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">Initiator </th>
<th style="text-align:center;">     Target</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">Debian 7.0.0</td>
<td style="text-align:center;"> Debian 7.0.0</td>
</tr>
<tr>
<td style="text-align:center;">仮想1コアCPU</td>
<td style="text-align:center;">仮想1コアCPU</td>
</tr>
<tr>
<td style="text-align:center;">512MB RAM  </td>
<td style="text-align:center;"> 512MB RAM</td>
</tr>
<tr>
<td style="text-align:center;">10GB SSD   </td>
<td style="text-align:center;"> 10GB SSD</td>
</tr>
</tbody>
</table>


<p>全く同じシステムで、初期インストール時の設定はminimalです。（gccなどはおろか、sshdも入っていない状態）</p>

<p>iSCSIに関するパッケージは以下のとおり。targetはiscsitargetとiscsitarget-dkms、イニシエータはopen-iscsiとなっています。</p>

<p><code class="code">root@debian:~# aptitude search iscsi
p   iscsitarget                                            - iSCSI Enterprise Target userland tools
p   iscsitarget-dkms                                       - iSCSI Enterprise Target kernel module source - dkms version
p   libiscsi-bin                                           - iSCSI client shared library - utilities
p   libiscsi-dev                                           - iSCSI client shared library
p   libiscsi1                                              - iSCSI client shared library
p   open-iscsi                                             - High performance, transport independent iSCSI implementation</code></p>

<p>まずサーバーとなるターゲットのインストールから。
rootで<code>aptitude install iscsitarget iscsitarget-dkms</code>としてパッケージインストールして下記のとおりに設定し、iSCSIターゲットを有効にします。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">ファイルパス </th>
<th style="text-align:center;">   変更内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">/etc/default/iscsitarget </td>
<td style="text-align:center;"> ISCSITARGET_ENABLE=falseをtrueに</td>
</tr>
</tbody>
</table>


<p>そして、iSCSIとして提供するデバイスを設定します。
この設定ファイルは/etc/iet/ietd.confに追記して設定します。</p>

<p>iSCSIターゲットの設定書式は設定ファイルにもサンプルがありますが、最小限の記述は以下の様な形式になります。
ここではfileioタイプを用い、単一ファイルをあたかもSCSIデバイスとして利用する方法を取ります。</p>

<p><code class="code">Target iqn.yyyy-mm.&lt;reversed domain name&gt;[:identifier]
   Lun 0 Path=&lt;image file path&gt;,Type=fileio,ScsiId=&lt;id&gt;,ScsiSN=&lt;sn&gt;</code></p>

<p>各所で紹介されている記事にはScsiIDやScsiSNを指定していないものもありましたが、open-iscsi 2.0.873@Debian 7.0.0ではSCSIデバイスとして認識されないのでちゃんとつけておきましょう（これがわからず1時間くらい考えこんでた）。</p>

<p>Pathで指定するファイルは<code>dd if=/dev/zero of=/disk.img bs=1 count=0 seek=10G</code>などで適当につくってしまいましょう。
今回はこのように設定しました。</p>

<p><code class="code">Target iqn.2014-01.localhost:fileio.test
   Lun 0 Path=/root/disk.img,Type=fileio,ScsiId=test,ScsiSN=test</code></p>

<p>ここまででターゲットの設定は終わりなので、サービスを再起動します。</p>

<p><code class="code">root@debian:~# service iscsitarget restart
Removing iSCSI enterprise target devices: :.
Starting iSCSI enterprise target service:.
.</code></p>

<p>エラーに関しては多くは出力されないので、<code>dmesg | tail</code>で確認するなりした方がいいと思います。
正常に動作しているかどうかは<code>neststat -a | grep iscsi</code>や<code>lsof -i:3260</code>で状態をみて判断します。</p>

<p>繋げてみないことには動作確認は取れませんので、クライアントとしてのopen-iscsiをインストールします。
<code>aptitude install open-iscsi</code>として、iscsiイニシエータを導入します。</p>

<p>最低限の動作には設定は必要ないのでこのままコマンドを入力して接続していきます。
<code>dpkg -L open-iscsi</code>すると、いくつかiscsiで始まるコマンドがインストールされていますが、すべてを統合的に実行できるiscsiadmを利用します。</p>

<p>iscsiadmに関して詳しいことはmanを見るとして、今回繋げるためには以下のようにして簡単ログインしてしまいましょう。</p>

<p><code class="code">root@debian:~# iscsiadm -m discovery -t sendtargets -p 127.0.0.1 -l</code></p>

<p>オプションに関して詳しいことはmanをみてもらうとして、今回使ったオプションは次のような意味を持っています。</p>

<table>
<thead>
<tr>
<th>Option </th>
<th> Sense</th>
</tr>
</thead>
<tbody>
<tr>
<td>-m     </td>
<td> モード指定</td>
</tr>
<tr>
<td>discovery</td>
<td>iSCSIターゲット探索</td>
</tr>
<tr>
<td>-t     </td>
<td>タイプ指定</td>
</tr>
<tr>
<td>sendtargets</td>
<td>準iSCSIプロトコルを用いているターゲット探索</td>
</tr>
<tr>
<td>-p</td>
<td>ネットワークポータル指定</td>
</tr>
<tr>
<td>127.0.0.1</td>
<td>指定ネットワークアドレス</td>
</tr>
<tr>
<td>-l</td>
<td>ログイン</td>
</tr>
</tbody>
</table>


<p>これで接続し、ちゃんとSCSIデバイスとして認識できていればdmesgに以下のように出ます。</p>

<p><code class="code">[ 6484.501041] scsi3 : iSCSI Initiator over TCP/IP
[ 6484.764505] scsi 3:0:0:0: Direct-Access     IET      VIRTUAL-DISK     0    PQ: 0 ANSI: 4
[ 6484.765289] sd 3:0:0:0: [sdb] 2097152 512-byte logical blocks: (1.07 GB/1.00 GiB)
[ 6484.765325] sd 3:0:0:0: [sdb] Write Protect is off
[ 6484.765328] sd 3:0:0:0: [sdb] Mode Sense: 77 00 00 08
[ 6484.765389] sd 3:0:0:0: [sdb] Write cache: disabled, read cache: enabled, doesn't support DPO or FUA
[ 6484.766030]  sdb: unknown partition table
[ 6484.766303] sd 3:0:0:0: [sdb] Attached SCSI disk
[ 6484.766417] sd 3:0:0:0: Attached scsi generic sg2 type 0</code></p>

<p>こんなかんじの出力があれば、大体検討はつくと思いますが、/dev/sdbにiSCSIターゲットがSCSIデバイスとして認識されています。
このブロックデバイスをパーティショニングし、フォーマットし、マウントすることで実際にディスクとして利用することが出来ます。
こんなかんじです。</p>

<pre class="code">root@debian:~# fdisk /dev/sdb
Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel
Building a new DOS disklabel with disk identifier 0x86017ce7.
Changes will remain in memory only, until you decide to write them.
After that, of course, the previous content won't be recoverable.

Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)

Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p):
Using default response p
Partition number (1-4, default 1):
Using default value 1
First sector (2048-2097151, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):
Using default value 2097151

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
root@debian:~# mkfs -t ext4 /dev/sdb1
mke2fs 1.42.5 (29-Jul-2012)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 261888 blocks
13094 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376
 
Allocating group tables: done
Writing inode tables: done
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done
 
root@debian:~# mkdir mount
root@debian:~# mount /dev/sdb1 mount/
root@debian:~# df -h
Filesystem                                              Size  Used Avail Use% Mounted on
rootfs                                                   19G 1022M   17G   6% /
udev                                                     10M     0   10M   0% /dev
tmpfs                                                    50M  240K   50M   1% /run
/dev/disk/by-uuid/f5aa3b2c-46ae-4b43-8191-1173de38f1d8   19G 1022M   17G   6% /
tmpfs                                                   5.0M     0  5.0M   0% /run/lock
tmpfs                                                   276M     0  276M   0% /run/shm
/dev/sdb1                                              1007M   18M  939M   2% /root/mount</pre>


<p>あとはマウントしたディレクトリに対して好き放題アクセスしたら、切り離しておきます。
<code class="code">root@debian:~# iscsiadm -m session -u</code>
オプションは、</p>

<table>
<thead>
<tr>
<th>Option </th>
<th> Sense</th>
</tr>
</thead>
<tbody>
<tr>
<td>-m     </td>
<td> モード指定</td>
</tr>
<tr>
<td>session</td>
<td>現在はられているセッションを指定</td>
</tr>
<tr>
<td>-u</td>
<td>ログアウト</td>
</tr>
</tbody>
</table>


<p>以上がまっさらな状態からiSCSIイニシエータ／ターゲットを導入して繋げるまで、です。
これらをインストールして動作するまでにしたログに関してはgistにあげてありますので、より詳しく見たい方などよければご参照ください。</p>

<p><a href="https://gist.github.com/mzyy94/8329470">https://gist.github.com/mzyy94/8329470</a></p>
]]></content>
  </entry>
  
</feed>
