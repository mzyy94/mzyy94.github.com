<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: imss | 犬アイコンのみっきー]]></title>
  <link href="http://mzyy94.com/blog/tags/imss/atom.xml" rel="self"/>
  <link href="http://mzyy94.com/"/>
  <updated>2016-07-06T03:29:42+09:00</updated>
  <id>http://mzyy94.com/</id>
  <author>
    <name><![CDATA[mzyy94]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[クリスマスなのでLinuxでQSVエンコードする]]></title>
    <link href="http://mzyy94.com/blog/2015/12/21/linux-qsv-encode/"/>
    <updated>2015-12-21T23:58:29+09:00</updated>
    <id>http://mzyy94.com/blog/2015/12/21/linux-qsv-encode</id>
    <content type="html"><![CDATA[<p>こちらは<a href="http://www.adventar.org/calendars/835">DTV Advent Calendar</a> 21日目の記事です。</p>

<p>みなさん録画データの管理はどうしていますか？
視聴したら消す人もいれば、視聴しても残しておく人、視聴してない詰みTSがたくさんある人、いろいろあると思います。
残しておけば不慮の事故がない限り、いつでも見返すことができますが、どんどんとHDDの空き容量が少なくなっていくのが現実です。
私は録画データは変換せずに取って置く人間なので、Disk fullで録画失敗した回数は数知れず、これまで2年間で10TB超の録画が溜まっています。
年末の大掃除も兼ねて、いくつか録画データを削除したくもなかなか踏み切れず、結局空き容量は一つも増えていません。</p>

<p>これでは年始の相棒スペシャルが録画できないので、録画データを消さずに空き容量を増やさなければなりません。
そこで考えられるのが動画のエンコード。DTV Advent Calendar経由でこの記事に他取り付いた人にとっては当たり前のことかもしれませんが、録画データをH.264エンコードして保管することにしました。</p>

<p>そこで検討する必要があるのがエンコード方法。
地デジにおいてはx264を用いたソフトウェアエンコードが一般的なようですが、他にもNVidia製GPUを用いたnvencやIntel CPUに搭載のグラフィックプロセッサによるQuick Sync Video(QSV)などがあります。
Linuxにおいてはffmpeg/x264のソフトウェアエンコードの方法ばかりがWebに蔓延する中、他の方法はほとんど取り上げられていません。寂しいです。</p>

<p>前置きが長くなりましたが、LinuxでQSVエンコードする方法をご紹介します。</p>

<!-- more -->


<h1>FFmpegによるLinuxでのQSVエンコード</h1>

<p>今年の頭に書いた記事でもLinuxでのQSVを取り上げました(参照: <a href="https://mzyy94.com/blog/2015/01/30/intel-qsv-on-linux/">Intel QSVのH.264エンコードをLinuxで！ - 犬アイコンのみっきー</a>)。しかしあれから約１年が経ち、いろいろと変わってきたので
環境の再構築とパッケージの修正などを行いました。
QSVエンコード環境の導入に関して必要なエンコーダーは、自分で用意する必要もなくなり、QSVを利用できる環境も大きく変わりました。</p>

<p>今回紹介するバージョンでは以下の環境でのみ動作します。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">  項目名</th>
<th style="text-align:center;"> 対応環境 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">  CPU   </td>
<td style="text-align:center;"> Haswell/Broadwell Core iシリーズ, Xeon E3 v3/v4 with GPU </td>
</tr>
<tr>
<td style="text-align:center;">  OS    </td>
<td style="text-align:center;"> CentOS 7.1 </td>
</tr>
</tbody>
</table>


<h2>環境構築</h2>

<p>今回構成するシステムは下図のようになっています。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/12/21/recording-server.png" width="640" height="480"></p>

<p>PT3とUSB ICカードリーダーをパススルーした<a href="https://github.com/kanreisa/Chinachu">Chinachu</a>環境に加えて、Intel HD GraphicsをパススルーしたQSVエンコード用のCentOSを<a href="https://pve.proxmox.com/">ProxMox VE</a>の上で動作させています。
今回はQSVのお話なのでChinachuの環境構築の紹介はしません。</p>

<h3>Intel HD Graphics Pass-through</h3>

<p>昨年のLinux Advent CalendarにてIntel HD Graphics Pass-throughを取り上げましたが(参照：<a href="https://mzyy94.com/blog/2014/12/12/kvm-intel-hd-graphics-passthrough/">KVMでQSVするためIntel HD Graphicsパススルーするー</a>)、あれから1年が経ち色々と変わってきている部分があります。
1年前は<a href="https://www.proxmox.com/">ProxMox</a> 3.2で構築していた仮想マシンも今では4.1となり、自前でカーネルをビルドする必要がなくなったことが大きな違いです。
そのため、ProxMoxのカーネルはそのままに、Pass-through機能を有効にする設定をいじるだけでIntel HD Graphicsのパススルーができます。</p>

<p>前回の方法では自前ビルドのカーネルで有効にしていたIOMMUの機能が、ProxMox 4.1の標準カーネルではデフォルト無効になっているので、有効にしてあげるように起動時パラメータを指定します。
root権限で以下のように実行し、IOMMUを有効化します。</p>

<pre><code># sed -i -e 's/\(GRUB_CMDLINE_LINUX="\)\(.*"\)/\1intel_iommu=on \2/' /etc/default/grub
# grub-mkconfig -o /boot/grub/grub.cfg
# reboot
</code></pre>

<p>IOMMUが有効になれば、あとは仮想マシンの設定ファイルにIntel HD Graphicsをパススルーする記述を加えるのみです。
全体的には以下のようなPorxMox仮想マシン設定ファイルが出来上がりました。</p>

<pre><code>bios: ovmf
boot: cdn
bootdisk: sata0
cores: 4
cpu: host
hostpci0: 00:02.0,pcie=1,rombar=on,x-vga=on
ide2: iso-image:iso/CentOS-7-x86_64-Minimal.iso,media=cdrom
machine: q35
memory: 4096
name: QSV
net0: e1000=66:63:63:25:51:27,bridge=vmbr0
numa: 0
ostype: l26
sata0: local:115/vm-115-disk-1.qcow2,size=32G
serial0: socket
smbios1: uuid=4b9f905b-66a5-4858-b1db-914bfd369aeb
sockets: 1
</code></pre>

<p>CentOSにてQSV対応カーネルをビルドする都合上、4コア割り当てていますが環境構築後は1コアに変更しても十分なパフォーマンスが発揮できます。
あとはこのパススルーした仮想マシンにCentOS 7.1をインストールし、QSVエンコード環境を作っていきます。
仮想マシンであろうがなかろうが続くQSV環境の導入に関する話で行うことは全く一緒なので、素のCentOS 7.1で行っているものとして読んでください。</p>

<h2>Intel Media Server Studio</h2>

<p>今年の頭に書いた記事でもIntel Media Server Studio(以下、MSS)を紹介しましたが、当時は数千ドルする有償SDKのみの公開だったため、試用期間しか利用できず、導入方法とエンコードの実験を行うだけでした。
しかし、今年9月にMSSのアップデートがあり、バージョンR6の登場とともに無償のCommunity Editionが公開され、私的利用の範囲で無期限で利用することができるようになりました。
今回はそれを導入し、QSVによる動画のH.264エンコードを行います。</p>

<p><a href="https://software.intel.com/en-us/intel-media-server-studio">Intel® Media Server Studio | Intel® Developer Zone</a></p>

<p><img src="/blog/resources/images/2015/12/21/get-mss.png" alt="Get Intel Media Server Studio" /></p>

<p>手順は前に紹介した時のものとあまり大きくは変わらないのですが、今回もMSSのインストールスクリプトに少々バグがあります。
文字でつらつらと説明するのも読者側からすればめんどくさいの一言で嫌われてしまう記事になってしまうので、MSSのインストールスクリプトを用意しました。</p>

<p><a href="https://github.com/mzyy94/QSV-on-Linux"><strong>mzyy94/QSV-on-Linux on GitHub</strong></a></p>

<p>README.mdを読み、スクリプトの内容を確認し、MSSを用意したら以下のようにコマンドを叩くとインストールされます。</p>

<pre><code>$ ./install-MSS.sh
</code></pre>

<h2>FFmpegによるQSVエンコード</h2>

<p>FFmpegもバージョンアップがあり、昨日2015/12/20にバージョン2.8.4が公開されました。
この1年のバージョンアップの間に標準でQSVエンコーダーが搭載され手動で追加する必要がなくなりました。
しかし今回導入したMSS 2015 R6では必要なファイルが不足しているため、いくつか手を加えなければいけません。
これもまた何をするかを事細かに説明するよりかはスクリプト実行で導入できた方が楽なので、よしなにしてくれるものを用意してあります。</p>

<p>先ほどのリポジトリに移動し、以下のようにすることでQSVに対応したFFmpegができあがります。</p>

<pre><code>$ ./build-ffmpeg.sh
</code></pre>

<p>他のエンコーダー/デコーダーが必要な場合は適宜修正して導入してください。</p>

<h2>地デジをエンコード</h2>

<p>DTV(Digital TeleVision = デジタルテレビ放送) Advent Calendarのネタなので、地上デジタル放送の録画TSファイルをエンコードしてやっと完結です。
ということで、2015/12/19放映のご注文はうさぎですか??第11羽をエンコードしてみます。</p>

<pre><code>$ ffmpeg -y -i gr23608-18yd.m2ts -f mp4 -vcodec h264_qsv -vprofile main -level 4.1 -s 1280x720 -r 24 -q 20 -acodec copy gochiusa11.mp4
</code></pre>

<p>と、エンコードしてみたものの、ProxMox 4.xのバグらしいものを踏んでしまい、ホストOSがｶｰﾈﾙﾊﾟﾆｯｸになってしまったために、エンコードが終了しませんでした。
なので投稿日の夕方になってベアメタルマシンに導入して試しています（故にAdvent Calendarに間に合わなカッタ）。</p>

<h3>結果</h3>

<p>約9分でQSVによるH.264エンコードが終わりました。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 項目 </th>
<th style="text-align:center;"> 元ファイル </th>
<th style="text-align:center;"> 変換後ファイル </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 長さ </td>
<td style="text-align:center;"> 29:56 </td>
<td style="text-align:center;"> 29:56(カットなし) </td>
</tr>
<tr>
<td style="text-align:center;"> ファイルサイズ </td>
<td style="text-align:center;"> 1963490988 bytes (1.87GB) </td>
<td style="text-align:center;"> 62257131 bytes (594MB)  </td>
</tr>
<tr>
<td style="text-align:center;"> 解像度 </td>
<td style="text-align:center;"> 1440x1088 </td>
<td style="text-align:center;"> 1280x738 </td>
</tr>
<tr>
<td style="text-align:center;"> フレームレート </td>
<td style="text-align:center;"> 29.97 </td>
<td style="text-align:center;"> 24.00 </td>
</tr>
<tr>
<td style="text-align:center;"> 動画コーデック </td>
<td style="text-align:center;"> MPEG-2 </td>
<td style="text-align:center;"> H.264 </td>
</tr>
<tr>
<td style="text-align:center;"> 音声コーデック </td>
<td style="text-align:center;"> AAC </td>
<td style="text-align:center;"> AAC(無変換) </td>
</tr>
</tbody>
</table>


<h4>元ファイル(MPEG-2)</h4>

<p><a href="/blog/resources/images/2015/12/21/syaro-original.png"><img src="/blog/resources/images/2015/12/21/syaro-original.png" alt="シャロシコ Original" /></a></p>

<h4>変換後ファイル(H.264)</h4>

<p><a href="/blog/resources/images/2015/12/21/syaro-qsv.png"><img src="/blog/resources/images/2015/12/21/syaro-qsv.png" alt="シャロシコ QSV" /></a></p>

<hr />

<p>以上、DTV Advent Calendar 21日目の記事でした。
明日は<a href="https://twitter.com/rndomhack">rndomhack</a>さんです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel QSVのH.264エンコードをLinuxで！]]></title>
    <link href="http://mzyy94.com/blog/2015/01/30/intel-qsv-on-linux/"/>
    <updated>2015-01-30T22:22:03+09:00</updated>
    <id>http://mzyy94.com/blog/2015/01/30/intel-qsv-on-linux</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/12/12/kvm-intel-hd-graphics-passthrough/">前回の記事</a>から1ヶ月以上空いてしまいました。遅ればせながらで申し訳ありません。続編です。
Intel QSVは高速にある程度の画質のエンコードできてよいです。とても。</p>

<p>今回はKVMでIntel HD Graphicsをパススルーした仮装マシン上に、SDKのインストールとカーネルモジュールのインストール、そしてffmpegでのQSVによるH.264エンコードができる環境づくりまでの手順をご紹介します。
<del>これが意外と骨が折れる作業だったので同じような思いをせぬよう、ご熟読ください。</del>（書き直す前の文章です。書き直した理由は後述。）</p>

<!-- more -->


<h1>Intel Media Server Studio (Intel Media SDK)</h1>

<p>前回の記事で紹介したIntel Media Server Studio(以下、IMSS。旧Intel Media SDK)のインストールをします。
IMSSはIntel Developer Zoneのメンバーになってから、<a href="https://software.intel.com/en-us/intel-media-server-studio">こちら</a>へアクセスすることでダウンロードできます。
メンバー登録時と同じメールアドレスを指定するとダウンロードリンクが送られてくるので、アクセスしてfor Linuxの方をダウンロードします。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-download.png" alt="IMSS donwload page" /></p>

<p>執筆時点での最新版は2015 R3です。この2015 R3を対象にインストールを進めていきます。(12月中旬に2015 R2を対象にした記事を書き終わっていたのだけれど、公開し損ねてる間にバージョンアップがあったため最初から書き直してるなんて言えない。。)</p>

<p>IMSS 2015 R3から対応OSはCentOSとSLESの2種類のみとなったので、どちらか好きな方を選んでインストールしてください。以下にはCentOS 7での様子を載せます。</p>

<h2>Intel Media SDK Install</h2>

<p>IMSSをダウンロードし回答すると、下図のように幾つかアーカイブの入ったディレクトリが展開されます。そこにあるSDKをインストールすることでQSVを利用することができるようになります。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-1.png" alt="IMSS step 1" /></p>

<p>このSDKのアーカイブを展開すると下図のように、インストール手順の書かれたPDFファイルとOSごとにディレクトリで分けられたドライバがでてきます。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-2.png" alt="IMSS step 2" /></p>

<p>今回はCentOS 7なので、CentOSディレクトリに移動し、PDFに記載のインストール手順を踏むだけでいいはずなんですが、幾つか依存関係にあるパッケージが必要になります。これがなくてインストールコケまくったので下表にまとめておきます。<code>yum install</code>などでインストールしてください。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">パッケージ名 </th>
<th style="text-align:left;"> 簡易説明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">mesa-dri-drivers </td>
<td style="text-align:left;"> グラフィックデバイスドライバ</td>
</tr>
<tr>
<td style="text-align:center;">redhat-lsb </td>
<td style="text-align:left;"> lsb_releaseでOS情報取得したいらしい</td>
</tr>
<tr>
<td style="text-align:center;">wget </td>
<td style="text-align:left;"> あのダウンロードするやつ</td>
</tr>
<tr>
<td style="text-align:center;">net-tools </td>
<td style="text-align:left;"> ネットワーク設定するアレ</td>
</tr>
</tbody>
</table>


<p>そしてあとは手順通りにインストールすればいいだけ。だと思ってたんですが、そのままインストールすると、ファイルやディレクトリが足りない（？）というエラーで怒られてしまいます。
見た感じインストールスクリプトのバグのようですが、一般環境向けのGeneric SDKが用意されているので、これを先にインストールしてからOS SpecificなSDKで上書きすることで、正常にインストールすることができるようです。</p>

<p>なので、SDKのディレクトリにあるGenericディレクトリに移動し、ぽつりと存在するアーカイブを展開します。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-3.png" alt="IMSS step 3" /></p>

<p>展開されたファイルの中にあるシェルスクリプトを管理者権限で実行し、Generic SDKをインストールします。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-4.png" alt="IMSS step 4" /></p>

<p>この作業で必要なディレクトリとファイルが作成されるので、次にOS固有のドライバとSDKをインストールします。</p>

<p>SDKのディレクトリに戻り、さらにCentOSのディレクトリに移動しファイルを確認すると、以下のようになっているはずです。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-5.png" alt="IMSS step 5" /></p>

<p>　
ここではファイルの展開等は行わず、PDF記載の通りにユーザーをvideoグループに追加して、<code>/MSS</code>ディレクトリを作成してそこにファイルをコピーしてカレントディレクトリも移動し、インストール関連ファイルの入ったアーカイブを展開してでてくるSDKのインストールスクリプトを実行します。下図のninnikuはカレントユーザー名なので適当に<code>$(whoami)</code>に置換してください。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-6.png" alt="IMSS step 6" /></p>

<p>SDKのインストールが成功すると、下図のようになり、再起動を促されるのでひとまず再起動します。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-7.png" alt="IMSS step 7" /></p>

<p>再起動後、再度<code>/MSS</code>へ移動して、下図のようにドライバの組み込まれたカーネルをビルドします。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-8.png" alt="IMSS step 8" /></p>

<p>正常に終了すると以下のようになります。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-9.png" alt="IMSS step 9" /></p>

<p>指定された場所<code>./rpmbuild/RPMS/</code>に移動すると<code>x86_64</code>ディレクトリがさらにあるのでそこに移動し、ここにあるQSVドライバが組み込まれたカーネルカーネルをインストールします。しかし今回使用しているCentOS 7では、QSVドライバが組み込まれたカーネルより新しいカーネルがインストールされていたため、QSVドライバ付きカーネルのインストールを拒否されてしまいました。
古いバージョンであることを重々承知した上でインストールするため、<code>--oldpackage</code>オプションを追加してインストールし、再起動してドライバのインストールは終了です。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-10.png" alt="IMSS step 10" /></p>

<p>再起動後、<code>lsmod | grep i915</code>として、以下のように幾つか該当があれば、ドライバが動作していることを確認できます。</p>

<p><img src="/blog/resources/images/2015/01/30/IMSS-step-11.png" alt="IMSS step 11" /></p>

<p>これで終わりかと思いきや、インストールスクリプトのバグなのか、ライブラリのリンク先が間違っており、実際にSDKを利用するときにリンクできずにプログラムが起動しない、などが発生してしまいます。</p>

<p>なので、下記スクリプトを実行してライブラリのパスを再設定してください。</p>

<p><code>sudo bash -c '(ldconfig -p -N | grep intel.mediasdk) || echo "/opt/intel/mediasdk/lib64" &gt;&gt; /etc/ld.so.conf.d/intel-mediasdk.conf &amp;&amp; ldconfig'</code></p>

<h1>H264_QSV codec for FFmpeg</h1>

<p>さて、IMSSのインストールができたのでSDKを利用する代表的なプログラムとして、QSVによるH.264エンコードをしましょう。</p>

<p>前回の記事で紹介した<a href="https://github.com/shenhailuanma/qsv-ffmpeg-codec">qsv_ffmpeg_codec</a>はIntel Media SDKの対応バージョンが古く、導入に手間がかかるのでIMSS 2014 R3対応版としてフォークしました。下記リポジトリに置いてあります。</p>

<p><em><a href="https://github.com/mzyy94/qsv_h264-ffmpeg">mzyy94/h264_qsv-ffmpeg</a></em></p>

<p>ここからクローンし、ディレクトリ下にある<code>./setup.sh</code>を実行して、FFmpeg-2.2ディレクトリに移動して<code>make</code>して、インストールください。</p>

<p>このコーデック、QSVによるH.264へのエンコードはしっかりとできるのですが、<strong>MPEG-TSファイルのエンコードはエラーになります</strong>。原因は、TSの仕組みゆえの、ライブラリの関数<code>MFXVideoENCODE_EncodeFrameAsync</code>に渡される引数によるものというところまではわかったのですが、修正にはほぼ全ての処理を書き換えないといけない手間がかかるので、MPEG-TSから一度RAWファイルを抽出し、パイプ等を使ってQSVコーデックに渡してエンコードしてください。</p>

<p>実行方法の例としては、
<code>ffmpeg -i in.avi -acodec copy -vcodec h264_qsv -b:v 2000k -y -sar 16:9 -s 1280x720 -r 30000/1001 -bufsize 20000k -maxrate 25000k out.mp4</code>
のようにHDサイズにリサイズして変換することができます。</p>

<p>せっかくなのでベンチマークとして、<a href="http://www.bigbuckbunny.org">Big Buck Bunny</a>をエンコードしようと思ったのですが、残念ながら執筆中にダウンロードが終わらなかったのでまたの機会に追記する形で公開しようと思います。</p>

<h1>まとめ</h1>

<p>LinuxでもQSVできる。</p>
]]></content>
  </entry>
  
</feed>
