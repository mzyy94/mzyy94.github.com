<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: xeon | 犬アイコンのみっきー]]></title>
  <link href="http://mzyy94.com/blog/tags/xeon/atom.xml" rel="self"/>
  <link href="http://mzyy94.com/"/>
  <updated>2016-01-10T08:54:57+09:00</updated>
  <id>http://mzyy94.com/</id>
  <author>
    <name><![CDATA[mzyy94]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[クリスマスなのでLinuxでQSVエンコードする]]></title>
    <link href="http://mzyy94.com/blog/2015/12/21/linux-qsv-encode/"/>
    <updated>2015-12-21T23:58:29+09:00</updated>
    <id>http://mzyy94.com/blog/2015/12/21/linux-qsv-encode</id>
    <content type="html"><![CDATA[<p>こちらは<a href="http://www.adventar.org/calendars/835">DTV Advent Calendar</a> 21日目の記事です。</p>

<p>みなさん録画データの管理はどうしていますか？
視聴したら消す人もいれば、視聴しても残しておく人、視聴してない詰みTSがたくさんある人、いろいろあると思います。
残しておけば不慮の事故がない限り、いつでも見返すことができますが、どんどんとHDDの空き容量が少なくなっていくのが現実です。
私は録画データは変換せずに取って置く人間なので、Disk fullで録画失敗した回数は数知れず、これまで2年間で10TB超の録画が溜まっています。
年末の大掃除も兼ねて、いくつか録画データを削除したくもなかなか踏み切れず、結局空き容量は一つも増えていません。</p>

<p>これでは年始の相棒スペシャルが録画できないので、録画データを消さずに空き容量を増やさなければなりません。
そこで考えられるのが動画のエンコード。DTV Advent Calendar経由でこの記事に他取り付いた人にとっては当たり前のことかもしれませんが、録画データをH.264エンコードして保管することにしました。</p>

<p>そこで検討する必要があるのがエンコード方法。
地デジにおいてはx264を用いたソフトウェアエンコードが一般的なようですが、他にもNVidia製GPUを用いたnvencやIntel CPUに搭載のグラフィックプロセッサによるQuick Sync Video(QSV)などがあります。
Linuxにおいてはffmpeg/x264のソフトウェアエンコードの方法ばかりがWebに蔓延する中、他の方法はほとんど取り上げられていません。寂しいです。</p>

<p>前置きが長くなりましたが、LinuxでQSVエンコードする方法をご紹介します。</p>

<!-- more -->


<h1>FFmpegによるLinuxでのQSVエンコード</h1>

<p>今年の頭に書いた記事でもLinuxでのQSVを取り上げました(参照: <a href="https://mzyy94.com/blog/2015/01/30/intel-qsv-on-linux/">Intel QSVのH.264エンコードをLinuxで！ - 犬アイコンのみっきー</a>)。しかしあれから約１年が経ち、いろいろと変わってきたので
環境の再構築とパッケージの修正などを行いました。
QSVエンコード環境の導入に関して必要なエンコーダーは、自分で用意する必要もなくなり、QSVを利用できる環境も大きく変わりました。</p>

<p>今回紹介するバージョンでは以下の環境でのみ動作します。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">  項目名</th>
<th style="text-align:center;"> 対応環境 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">  CPU   </td>
<td style="text-align:center;"> Haswell/Broadwell Core iシリーズ, Xeon E3 v3/v4 with GPU </td>
</tr>
<tr>
<td style="text-align:center;">  OS    </td>
<td style="text-align:center;"> CentOS 7.1 </td>
</tr>
</tbody>
</table>


<h2>環境構築</h2>

<p>今回構成するシステムは下図のようになっています。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/12/21/recording-server.png" width="640" height="480"></p>

<p>PT3とUSB ICカードリーダーをパススルーした<a href="https://github.com/kanreisa/Chinachu">Chinachu</a>環境に加えて、Intel HD GraphicsをパススルーしたQSVエンコード用のCentOSを<a href="https://pve.proxmox.com/">ProxMox VE</a>の上で動作させています。
今回はQSVのお話なのでChinachuの環境構築の紹介はしません。</p>

<h3>Intel HD Graphics Pass-through</h3>

<p>昨年のLinux Advent CalendarにてIntel HD Graphics Pass-throughを取り上げましたが(参照：<a href="https://mzyy94.com/blog/2014/12/12/kvm-intel-hd-graphics-passthrough/">KVMでQSVするためIntel HD Graphicsパススルーするー</a>)、あれから1年が経ち色々と変わってきている部分があります。
1年前は<a href="https://www.proxmox.com/">ProxMox</a> 3.2で構築していた仮想マシンも今では4.1となり、自前でカーネルをビルドする必要がなくなったことが大きな違いです。
そのため、ProxMoxのカーネルはそのままに、Pass-through機能を有効にする設定をいじるだけでIntel HD Graphicsのパススルーができます。</p>

<p>前回の方法では自前ビルドのカーネルで有効にしていたIOMMUの機能が、ProxMox 4.1の標準カーネルではデフォルト無効になっているので、有効にしてあげるように起動時パラメータを指定します。
root権限で以下のように実行し、IOMMUを有効化します。</p>

<pre><code># sed -i -e 's/\(GRUB_CMDLINE_LINUX="\)\(.*"\)/\1intel_iommu=on \2/' /etc/default/grub
# grub-mkconfig -o /boot/grub/grub.cfg
# reboot
</code></pre>

<p>IOMMUが有効になれば、あとは仮想マシンの設定ファイルにIntel HD Graphicsをパススルーする記述を加えるのみです。
全体的には以下のようなPorxMox仮想マシン設定ファイルが出来上がりました。</p>

<pre><code>bios: ovmf
boot: cdn
bootdisk: sata0
cores: 4
cpu: host
hostpci0: 00:02.0,pcie=1,rombar=on,x-vga=on
ide2: iso-image:iso/CentOS-7-x86_64-Minimal.iso,media=cdrom
machine: q35
memory: 4096
name: QSV
net0: e1000=66:63:63:25:51:27,bridge=vmbr0
numa: 0
ostype: l26
sata0: local:115/vm-115-disk-1.qcow2,size=32G
serial0: socket
smbios1: uuid=4b9f905b-66a5-4858-b1db-914bfd369aeb
sockets: 1
</code></pre>

<p>CentOSにてQSV対応カーネルをビルドする都合上、4コア割り当てていますが環境構築後は1コアに変更しても十分なパフォーマンスが発揮できます。
あとはこのパススルーした仮想マシンにCentOS 7.1をインストールし、QSVエンコード環境を作っていきます。
仮想マシンであろうがなかろうが続くQSV環境の導入に関する話で行うことは全く一緒なので、素のCentOS 7.1で行っているものとして読んでください。</p>

<h2>Intel Media Server Studio</h2>

<p>今年の頭に書いた記事でもIntel Media Server Studio(以下、MSS)を紹介しましたが、当時は数千ドルする有償SDKのみの公開だったため、試用期間しか利用できず、導入方法とエンコードの実験を行うだけでした。
しかし、今年9月にMSSのアップデートがあり、バージョンR6の登場とともに無償のCommunity Editionが公開され、私的利用の範囲で無期限で利用することができるようになりました。
今回はそれを導入し、QSVによる動画のH.264エンコードを行います。</p>

<p><a href="https://software.intel.com/en-us/intel-media-server-studio">Intel® Media Server Studio | Intel® Developer Zone</a></p>

<p><img src="/blog/resources/images/2015/12/21/get-mss.png" alt="Get Intel Media Server Studio" /></p>

<p>手順は前に紹介した時のものとあまり大きくは変わらないのですが、今回もMSSのインストールスクリプトに少々バグがあります。
文字でつらつらと説明するのも読者側からすればめんどくさいの一言で嫌われてしまう記事になってしまうので、MSSのインストールスクリプトを用意しました。</p>

<p><a href="https://github.com/mzyy94/QSV-on-Linux"><strong>mzyy94/QSV-on-Linux on GitHub</strong></a></p>

<p>README.mdを読み、スクリプトの内容を確認し、MSSを用意したら以下のようにコマンドを叩くとインストールされます。</p>

<pre><code>$ ./install-MSS.sh
</code></pre>

<h2>FFmpegによるQSVエンコード</h2>

<p>FFmpegもバージョンアップがあり、昨日2015/12/20にバージョン2.8.4が公開されました。
この1年のバージョンアップの間に標準でQSVエンコーダーが搭載され手動で追加する必要がなくなりました。
しかし今回導入したMSS 2015 R6では必要なファイルが不足しているため、いくつか手を加えなければいけません。
これもまた何をするかを事細かに説明するよりかはスクリプト実行で導入できた方が楽なので、よしなにしてくれるものを用意してあります。</p>

<p>先ほどのリポジトリに移動し、以下のようにすることでQSVに対応したFFmpegができあがります。</p>

<pre><code>$ ./build-ffmpeg.sh
</code></pre>

<p>他のエンコーダー/デコーダーが必要な場合は適宜修正して導入してください。</p>

<h2>地デジをエンコード</h2>

<p>DTV(Digital TeleVision = デジタルテレビ放送) Advent Calendarのネタなので、地上デジタル放送の録画TSファイルをエンコードしてやっと完結です。
ということで、2015/12/19放映のご注文はうさぎですか??第11羽をエンコードしてみます。</p>

<pre><code>$ ffmpeg -y -i gr23608-18yd.m2ts -f mp4 -vcodec h264_qsv -vprofile main -level 4.1 -s 1280x720 -r 24 -q 20 -acodec copy gochiusa11.mp4
</code></pre>

<p>と、エンコードしてみたものの、ProxMox 4.xのバグらしいものを踏んでしまい、ホストOSがｶｰﾈﾙﾊﾟﾆｯｸになってしまったために、エンコードが終了しませんでした。
なので投稿日の夕方になってベアメタルマシンに導入して試しています（故にAdvent Calendarに間に合わなカッタ）。</p>

<h3>結果</h3>

<p>約9分でQSVによるH.264エンコードが終わりました。</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> 項目 </th>
<th style="text-align:center;"> 元ファイル </th>
<th style="text-align:center;"> 変換後ファイル </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 長さ </td>
<td style="text-align:center;"> 29:56 </td>
<td style="text-align:center;"> 29:56(カットなし) </td>
</tr>
<tr>
<td style="text-align:center;"> ファイルサイズ </td>
<td style="text-align:center;"> 1963490988 bytes (1.87GB) </td>
<td style="text-align:center;"> 62257131 bytes (594MB)  </td>
</tr>
<tr>
<td style="text-align:center;"> 解像度 </td>
<td style="text-align:center;"> 1440x1088 </td>
<td style="text-align:center;"> 1280x738 </td>
</tr>
<tr>
<td style="text-align:center;"> フレームレート </td>
<td style="text-align:center;"> 29.97 </td>
<td style="text-align:center;"> 24.00 </td>
</tr>
<tr>
<td style="text-align:center;"> 動画コーデック </td>
<td style="text-align:center;"> MPEG-2 </td>
<td style="text-align:center;"> H.264 </td>
</tr>
<tr>
<td style="text-align:center;"> 音声コーデック </td>
<td style="text-align:center;"> AAC </td>
<td style="text-align:center;"> AAC(無変換) </td>
</tr>
</tbody>
</table>


<h4>元ファイル(MPEG-2)</h4>

<p><a href="/blog/resources/images/2015/12/21/syaro-original.png"><img src="/blog/resources/images/2015/12/21/syaro-original.png" alt="シャロシコ Original" /></a></p>

<h4>変換後ファイル(H.264)</h4>

<p><a href="/blog/resources/images/2015/12/21/syaro-qsv.png"><img src="/blog/resources/images/2015/12/21/syaro-qsv.png" alt="シャロシコ QSV" /></a></p>

<hr />

<p>以上、DTV Advent Calendar 21日目の記事でした。
明日は<a href="https://twitter.com/rndomhack">rndomhack</a>さんです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自宅サーバーを増やした]]></title>
    <link href="http://mzyy94.com/blog/2014/04/06/new-server/"/>
    <updated>2014-04-06T23:10:36+09:00</updated>
    <id>http://mzyy94.com/blog/2014/04/06/new-server</id>
    <content type="html"><![CDATA[<p>増税前のPCパーツ買いだめイベントに便乗して、３月中に自宅サーバーを増設しました。
どんな構成で組み立てたのかの紹介になります。</p>

<!-- more -->


<p>サーバー増設にあたって、次に挙げる構成目標を先に決めていました。</p>

<ul>
<li>４コア以上、かつ８スレッド以上</li>
<li>16GB以上のDRAM</li>
<li>速い記憶装置</li>
<li>8万円以下</li>
</ul>


<p>あまり欲がありませんが、だいたいこれを満たせるようにと組みました。</p>

<p>SandyBridge世代のCPUを載せた、自宅サーバーっぽいものは前からありました。
構成は、以下の表の通りです。</p>

<table>
<thead>
<tr>
<th>パーツ</th>
<th>種類</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>Intel Core i5</td>
</tr>
<tr>
<td>DRAM</td>
<td> DDR3-1333 8GB (4GB x 2)</td>
</tr>
<tr>
<td>HDD</td>
<td> WD2TB</td>
</tr>
<tr>
<td>MB</td>
<td>ECS H67I</td>
</tr>
</tbody>
</table>


<p>どこがサーバーじゃいと思うかもしれませんが、そう思うのもあたりまえ、元デスクトップマシンの構成のままなのです。
大概のことはこなせていたので、新しく組む必要はなかったといわれればその通りなのですが、気軽に仮想マシンをたてて、実験して、つぶして、のような遊びをするには非力であったため、最新のパーツで新たに組むことにしました。</p>

<h1>パーツ選定</h1>

<h2>CPU</h2>

<p><img src="/blog/resources/images/2014/4/6/DSC08114.JPG" alt="" />
「サーバー向けならXeonっしょ。」と各所で言われているので、Xeonにしました。
用途としては、CIサーバーが主で、適当な仮想マシンインスタンスを作っては遊び、追加していくという将来を見据えて、<a href="http://ark.intel.com/ja/products/75462/Intel-Xeon-Processor-E3-1245-v3-8M-Cache-3_40-GHz">Intel Xeon E3-1245 v3</a>にしました。</p>

<table>
<thead>
<tr>
<th>プロセッサー</th>
<th>Intel Xeon E3-1245 v3</th>
</tr>
</thead>
<tbody>
<tr>
<td>動作周波数</td>
<td>3.4 GHz</td>
</tr>
<tr>
<td>TB時周波数</td>
<td>3.8 GHz</td>
</tr>
<tr>
<td>キャッシュ</td>
<td>8 MB</td>
</tr>
<tr>
<td>最大 TDP</td>
<td>84 W</td>
</tr>
</tbody>
</table>


<p>動作周波数3.4GHzあれば１０個ほど仮想マシン立ち上げても大丈夫でしょう。</p>

<h2>MB</h2>

<p><img src="/blog/resources/images/2014/4/6/DSC08093.JPG" alt="" />
自宅に転がっているPCケースがどれもMini-ITX向けのものなので、Mini-ITXにします。Xeon対応を謳っているマザーボードは少なく、Mini-ITXに限定してしまうと片手で数えきれるほどしか候補がありません。
サーバー向けチップセットを載せたASUSの<a href="http://www.asus.com/Commercial_Servers_Workstations/P9DI/">P9D-I</a>が購入時時点のXeon向けMini-ITXマザーボードとしては最上位であるものの、予算オーバーしてしまうので、今回は見送りました。
残る選択肢はGIGABYTEかASRockのほぼ二択となり、両者の違いはeSATAの有無やGbEの数などで、仮想マシンをいくつもたてることを考えると、二つGbEがあるほうが好ましいということで、GIGABYTEの<a href="http://www.gigabyte.jp/products/product-page.aspx?pid=4600">GA-Z87N-WIFI</a>を購入しました。</p>

<h2>DRAM</h2>

<p><img src="/blog/resources/images/2014/4/6/DSC08105.JPG" alt="" />
Xeon向けチップセットを載せたマザーボードを選んでいれば、ECC付きのメモリで長期運用時の信頼性を高めることができるのですが、上記の通り、Z87チップセットを載せたマザーボードを選択したため、特にECCに関してはこだわる必要がありません。
Z87チップセットはDDR3-1333/1600対応のため、たくさんの仮想マシンを支えられるよう、DDR3-1600のもので、16GB（8GB x ２枚）のものを探しました。
相性問題などは特に気にせず、財布と相談しながら予算に合うものを選んだ結果、Kingstonの<a href="http://www.amazon.co.jp/gp/product/B008KRZYH4/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B008KRZYH4&amp;linkCode=as2&amp;tag=mzyy-22">KHX16C10B1K2/16X</a>の価格が暴落していたのですぐさま購入しました。</p>

<h2>Storage</h2>

<p>なんでもよかったです。とにかく速いものであれば。
これも、お財布と相談しながらということで、適当に探してSanDiskの<a href="http://www.amazon.co.jp/gp/product/B00BWR2QZC/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00BWR2QZC&amp;linkCode=as2&amp;tag=mzyy-22">SanDisk SSD UltraPlus 128GB</a>にしました。</p>

<h2>その他パーツ</h2>

<p>増設ということで、旧マシンから流用できるパーツがありません。あまっているパーツは7mm厚120mmファンくらいで、必要なものがいくつもありました。</p>

<p>CPUはバルクで購入したのでファンがついておらず、CPUファンを購入する必要がありました。ケースの高さ制限より、これもまた選択肢が少なく、某所のレビューでよく冷えるとあったので、Scytheの<a href="http://www.amazon.co.jp/gp/product/B004W5KS0G/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B004W5KS0G&amp;linkCode=as2&amp;tag=mzyy-22">KOZUTI</a>にしました。</p>

<p>CPUファンとの熱伝導のためのグリスは、ファン付属のものでもよかったのですが、どうしても別で買いたかったのでAINEXの<a href="http://www.amazon.co.jp/gp/product/B000BLBHTQ/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000BLBHTQ&amp;linkCode=as2&amp;tag=mzyy-22">シルバーグリス</a>を購入しました。よく冷えそうなので。</p>

<p>あとは、2.5インチSSDを3.5インチに変える、<a href="http://www.amazon.co.jp/gp/product/B0088QXTK6/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B0088QXTK6&amp;linkCode=as2&amp;tag=mzyy-22">センチュリー 裸族のインナー</a>や、ケースの狂った配線とつなぐための<a href="http://www.amazon.co.jp/gp/product/B000FHQACA/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000FHQACA&amp;linkCode=as2&amp;tag=mzyy-22">アイネックス ピン配列交換ケーブル</a>や<a href="http://www.amazon.co.jp/gp/product/B000Y1YUKG/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000Y1YUKG&amp;linkCode=as2&amp;tag=mzyy-22">アイネックス コネクタ簡単脱着ケーブル</a>を購入しました。</p>

<h1>組み立て</h1>

<h2>ケースの整備</h2>

<p><img src="/blog/resources/images/2014/4/6/DSC08139.JPG" alt="" />
普通のPCケースならば、パーツをケースに組み込むだけですが、自宅に転がっているというケースがくせ者で、数年前のAcer Aspire H340のものなのです。
このケース、Mini-ITXサイズのマザーボードが組み込まれていたので、一見どのマザーボードでも使えるかと思ったら大間違い。フロントパネルのボタンは効かないわSATAは認識しないわで問題ばかり。このケースを市販されているMini-ITXマザーボードで活用しようと思う方はたくさん居るようで、ウェブに情報はたくさんあります。
今回は、<a href="http://z.apps.atjp.jp/memo/h340.html">http://z.apps.atjp.jp/memo/h340.html</a>を参考にさせていただき、ケースを利用できる状態にしました。</p>

<h2>パーツ組み込み</h2>

<p><img src="/blog/resources/images/2014/4/6/DSC08158.JPG" alt="" /></p>

<p>やっと普通のPCケースとして使える状態になったので、組み込みます。
ここからの手順は、ご存知の方多いと思いますので割愛します。</p>

<h2>設置</h2>

<p><img src="/blog/resources/images/2014/4/6/Servers.jpg" alt="" />
ちゃんとケースに組み込んで所定の位置に設置しました。
ほかのサーバーとおなじ見た目なのでわかりづらいですが、右上のが今回新設したサーバーとなります。
それらに関してはおいおい紹介していきますのでしばしおまちを。</p>

<h1>費用</h1>

<p>気になるサーバー構築費用です（すべて税込み）。</p>

<table>
<thead>
<tr>
<th>パーツ</th>
<th style="text-align:right;">購入価格(円)</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU    </td>
<td style="text-align:right;">26800</td>
</tr>
<tr>
<td>MB     </td>
<td style="text-align:right;"> 8800</td>
</tr>
<tr>
<td>DRAM   </td>
<td style="text-align:right;">11151</td>
</tr>
<tr>
<td>SSD    </td>
<td style="text-align:right;"> 9790</td>
</tr>
<tr>
<td>Fan    </td>
<td style="text-align:right;"> 2880</td>
</tr>
<tr>
<td>Grease </td>
<td style="text-align:right;"> 1140</td>
</tr>
<tr>
<td>Mounter</td>
<td style="text-align:right;">  891</td>
</tr>
<tr>
<td>Cable  </td>
<td style="text-align:right;">  827</td>
</tr>
</tbody>
</table>


<p>計62,279円で、このサーバーを構築できました。目標としていた8万円を大きく下回り、金銭的にストレージ増設の余地があります。
このサーバーを生かして、今後いろいろと実験していくような記事を書く予定ですので、こう御期待。</p>
]]></content>
  </entry>
  
</feed>
