<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[犬アイコンのみっきー]]></title>
  <link href="http://mzyy94.com/atom.xml" rel="self"/>
  <link href="http://mzyy94.com/"/>
  <updated>2015-02-21T05:57:34+09:00</updated>
  <id>http://mzyy94.com/</id>
  <author>
    <name><![CDATA[mzyy94]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KodiとChinachuで地デジLive視聴 on Raspberry Pi2 w/ OSMC]]></title>
    <link href="http://mzyy94.com/blog/2015/02/21/kodi-livetv-chinachu/"/>
    <updated>2015-02-21T07:02:43+09:00</updated>
    <id>http://mzyy94.com/blog/2015/02/21/kodi-livetv-chinachu</id>
    <content type="html"><![CDATA[<p>どうも、Raspberry Pi2で遊ぶ毎日が続いております。
Raspberry Pi model B（2ではない）にRaspbmcを入れて昨年の夏頃からChinachu経由で地上デジタル放送を視聴する環境を構築していたのですが、
いかんせんスペックが低く、チャンネル切り替え時などにもたついていました。</p>

<p>Raspberry Pi2が発売され、従来の6倍のパフォーマンスが発揮できるようになり、もたつきがなく不便しなくなってきたので、
Raspbmc改めOSMCで地デジ視聴をする方法をまとめます。</p>

<!-- more -->


<h1>PVRクライアント</h1>

<p>Kodi(旧:XBMC)にはテレビ放送を視聴するためのPVRクライアントという機能があります。
テレビ放送の配信携帯に合わせていくつかPVRクライアントがAdd-onとして提供されていますが、汎用的につかえるものに
<a href="https://github.com/afedchin/xbmc-addon-iptvsimple/">XBMC IPTV Simple Client</a>というものがあります。</p>

<p>XBMCからKodiに名称変更した際に、Kodi本体にこれらのPVRクライアントはあらかじめバンドルされるようになり、
これまでは各自ビルドしてインストールしていたのが、設定して有効化するだけで使えるようになっています。
もちろんこのIPTV Simple Clientもバンドルされています。これを使って地デジを視聴する環境を構築します。</p>

<h2>IPTV Simple Client</h2>

<p>このAdd-onは、m3u形式で配信されているチャンネル配信情報と、<a href="http://wiki.xmltv.org/index.php/XMLTVFormat">XMLTV形式</a>で配信されている番組表情報を用いてネットワーク経由でテレビを視聴することができるPVRクライアントです。
数あるプレイリストフォーマットの中でも一般的な形式であるm3uと、<a href="http://www.mythtv.org/">MythTV</a>などのテレビ視聴・録画クライアントがサポートするEPG番組表形式であるXMLTVを用いているため、テレビ放送配信側となるサーバーがサポートしていれば簡単に地デジをKodiで視聴できます。
G
今回テレビ放送を配信するサーバーとしてはChinachuを使いますが、残念ながら上記のm3u形式のチャンネル情報とXMLTV形式の番組表情報は提供されていません。
なので、Chinachuに2つのファイルを追加して機能を追加することで対応するようにしました。</p>

<h1>Chinachu</h1>

<p>数ある地デジ録画管理ソフトウェアの中でもモダンなデザインで、使い勝手がよくREST APIを提供している素敵なソフトウェアです。
Chinachuは番組の録画・再生が主な機能とされていますが、現在放送中の番組の視聴にも対応しており、APIを経由することでいろいろなクライアントから再生することができます。
しかし、前途の通りChinachuが提供するAPIでは、IPTV Simple Clientが対応するm3u形式のプレイリストやXMLTV形式の番組表情報は取得できません。
幸いなことに、ChinachuへのAPIの追加は難しくなく、Chinachuが動作するディレクトリ直下にある<strong>api</strong>ディレクトリにAPIリソース情報とスクリプトを配置することで必要なAPIを追加することができます。</p>

<p>IPTV Simple Clientに必要な、</p>

<ul>
<li>m3u形式でのチャンネル配信情報</li>
<li>XMLTV形式での番組表情報</li>
</ul>


<p>の二つをAPIで提供するファイルを作りました。
以下からダウンロードしてapiディレクトリのファイルをChinachuのapiディレクトリに放り込んでください。</p>

<p><em><a href="https://github.com/mzyy94/Chinachu-IPTV-API-addon">https://github.com/mzyy94/Chinachu-IPTV-API-addon</a></em></p>

<p>これを導入すると、</p>

<ul>
<li><code>/api/kodi/channel.m3u8</code>にチャンネル配信情報</li>
<li><code>/api/kodi/epg.xml</code>にXMLTV情報</li>
</ul>


<p>が提供されるようになります。</p>

<h1>KodiでSimple IPTV Clientの設定</h1>

<p>サーバー側の準備は整ったのでKodiの方の設定をします。前回の記事で日本語化したRaspberry Pi2で動くOSMC上のKodiでの設定方法になります。</p>

<p>上記の通り、KodiにはPVRクライアントが導入されているので、Add-on管理から設定をして有効化するだけで準備ができます。</p>

<p>まず、設定のAdd-onの中にある無効なアドオンからPVR Simple IPTV Clientを探して選択し、設定画面を開きます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/disabled-addons.png" alt="Disabled add-ons" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/21/iptv-simple-client-addon.png" alt="IPTV Simple client" /></p>

<p>設定画面にあるM3UプレイリストのURLとXMLTV URLにChinachuのWUIが動作するURLに続けて、下図のように設定します。
各自環境に合わせて<code>chinachu:10772</code>の部分を書き換えてください。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/addon-configure1.png" alt="Add-on configure1" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/21/addon-configure2.png" alt="Add-on configure2" /></p>

<p>設定を終えたらSimple IPTV Clientの<strong>有効</strong>を洗濯して有効にし、Kodiの全体の設定にあるLive TV設定に移動してLCD有効(誤訳？)すると、
トップの画像のようにライブTVの項目が現れ、PVRが利用できるようになります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/enable-pvr.png" alt="Enable PVR" /></p>

<p>m3uプレイリストとしてAPIが提供するチャンネルは、Chinachuの設定ファイルに記載の通りの順番でサブチャンネル含め配信しているので、
後日紹介するであろうリモコンを使ってチャンネル切り替えを行う場合は、Live TV設定のチャンネルマネージャーからグループ管理を行って、
不要なチャンネルを隠すことでリモコンでの操作に適したチャンネルのみを切り替え可能にできます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/channel-manager1.png" alt="Channel Manager1" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/21/channel-manager2.png" alt="Channel Manager2" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/21/channel-manager3.png" alt="Channel Manager3" /></p>

<p>ここまで終わった状態で、Kodiのトップに移動するとライブTVの項目が増えているはずです。これを選択すると、デフォルトでは番組表が表示されます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/pvr-epg.png" alt="PVR EPG view" /></p>

<p>また、バックスペースキーを押すとチャンネル一覧を表示するメニューが現れるので、そちらに切り替えると現在放送中の番組情報が表示されます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/pvr-channel.png" alt="PVR Channel view" /></p>

<p>ここで好きなようにチャンネルを切り替え、地デジを観ることができます。</p>

<h1>まとめ</h1>

<p>MPEG-2ライセンスを導入してあるRaspberry Pi2だとサクサク地デジが見られる。</p>

<blockquote class="twitter-tweet"><p>Raspberry Pi 2での地デジ視聴時の負荷&#10;HWデコーダー有効にするとフレームドロップなしでCPU負荷はほぼゼロ <a href="http://t.co/rAzv7eCTGW">pic.twitter.com/rAzv7eCTGW</a></p>&mdash; 犬みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/565610656809091072">February 11, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi2にOSMC入れてKodi(旧:XBMC)日本語化するまで]]></title>
    <link href="http://mzyy94.com/blog/2015/02/16/raspberry-pi2-osmc-jp/"/>
    <updated>2015-02-16T20:05:56+09:00</updated>
    <id>http://mzyy94.com/blog/2015/02/16/raspberry-pi2-osmc-jp</id>
    <content type="html"><![CDATA[<p>今月頭の発表で一気に盛り上がりを見せた<a href="http://www.raspberrypi.org/products/raspberry-pi-2-model-b/">Raspberry Pi 2 Model B</a>。もちろん発売日に購入しました。
手元にはRaspberry Pi BとGalileo Gen2の2つのLinuxが動く小型ボードがあるんですが、主にメディアセンター用途で使おうとしていたRaspberry Pi Bに性能面で不満を抱いていたため、今回この新バージョン購入は即決しました。</p>

<p>Raspberry Piでのメディアセンター用途で代表的なのは<a href="http://www.raspbmc.com/">Raspbmc</a>ですが、
このプロジェクトは<a href="https://osmc.tv/about/">OSMC</a>に移行するようで、2015年2月2日のFinalリリースの配布をもって終了となりました。</p>

<p>ということで、Raspberry Pi 2 Model B(以下、RPi2B)にOSMCを導入して日本語化するまでのメモを残します。</p>

<!-- more -->


<h1>OSMCインストール</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/16/osmc-installer.png" alt="OSMC Installer" /></p>

<p>OSMCは<a href="https://osmc.tv/download/">https://osmc.tv/download/</a>からインストーラーがダウンロードできるので、自分の使ってるOSにあったインストーラーをダウンロード・実行して、microSDHCにイメージを書き込むだけです。2015/2/16時点での最新版であるAlpha 4をインストールしました。</p>

<h1>日本語化</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/16/osmc-mainmenu.png" alt="OSMC main menu" /></p>

<p>起動するとこんな感じです。OSMCテーマ標準のフォントは流行りのLightなウェイトを持つRobotoとOpenSansが利用されているため、もちろんのこと日本語は表示できません。
テーマのデザインを損ねることなく、日本語でも美しい細字のフォントで表示したく思い、<a href="http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/index.html">M+ FONT</a>を利用することにしました。</p>

<p>M+ FONTはJIS第一水準までの漢字を網羅し、極細から極太まで7種のウェイトを収録した美しいフリーフォントです。
LightウェイトフォントでJIS第二水準まで含むオープンなフォントはAdobeとGoolgeが共同で開発・公開している<a href="https://www.google.com/get/noto/cjk.html">Noto Sans CJK</a>/<a href="https://github.com/adobe-fonts/source-han-sans/tree/release">Source Han Sans</a>があります。しかし、OpenTypeフォントとしての配布である上に、TrueTypeに変換しても18MB前後のフォントファイルとなってしまい、Kodiで読み込めないことを確認したのでM+ FONTを利用します。</p>

<p>M+ FONTを利用するため、OSMC上で以下のスクリプトを実行するか、<code>curl -L http://git.io/NSrC | sh -</code>とするとデフォルトフォントをM+ FONTに差し替えられます。
OSMCへはSSHで（USER/PASSともに<code>osmc</code>）ログインしてください。※パスワードの変更をお忘れなく。</p>

<script src="https://gist.github.com/mzyy94/15ee1b3880107e9d7ece.js"></script>


<p>このあと、Settings->Appearance->International->Japaneseとすることで、以下のような美しい日本語メニューが表示されるようになります。</p>

<p>（本当は日本語化したくてやったんじゃなく、次の記事で紹介する地デジの番組表情報が表示されるようにするために日本語フォントが必要で導入したので、表示確認後英語表記に戻しました。）</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/16/osmc-mainmenu-jp.png" alt="OSMC JP" /></p>

<h1>MPEG-2ライセンス購入</h1>

<p>メディアプレイヤー用途として使うにはMPEG-2のハードウェアデコードを有効化して、快適に動画（地デジ）再生ができるようにしたいと思い、ライセンスを購入しました。</p>

<p>Raspberry PiはMPEG-2ハードウェアデコーダーの利用にライセンス料を課しているので、£2.40支払ってキーを入手します。
<a href="http://www.raspberrypi.com/mpeg-2-license-key/">ライセンスキーストア</a>にシリアル番号を入力してカートに入れ購入手続きし、深夜にでも送られてくるであろうシリアルキーを、
<code>echo decode_MPG2=0xdeadbeef | sudo tee -a /boot/config.txt</code>のようにしてハードウェア設定ファイルに追記し再起動してハードウェアデコーダーを有効にします。</p>

<p>これで快適に地デジなどの動画が再生できるようになります。</p>

<h1>次回予告</h1>

<p>Raspberry Pi 2で地デジ視聴する</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinuxでQSVとH.264のエンコード対決]]></title>
    <link href="http://mzyy94.com/blog/2015/01/31/qsv-x264-linux-battle/"/>
    <updated>2015-01-31T19:23:04+09:00</updated>
    <id>http://mzyy94.com/blog/2015/01/31/qsv-x264-linux-battle</id>
    <content type="html"><![CDATA[<p>先日の記事、でLinuxでH.264の動画をエンコードできることを紹介しました。
そのベンチマークをとってみました。QSVでのエンコードとlibx264を用いたエンコードの比較となります。</p>

<p>今回エンコード時間の比較に用いた動画は以下のものを利用しました。</p>

<p><em><a href="http://www.bigbuckbunny.org">Big Buck Bunny</a></em></p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/big-buck-bunny.png" alt="Big Buck Bunny" /></p>

<p>ここの、<code>big_buck_bunny_1080p_surround.avi</code>を以下の表のオプションでLibx264とQSVでのエンコードで変換し、比較をしてみました。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">項目 </th>
<th style="text-align:center;"> 値</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">音声コーデック</td>
<td style="text-align:center;"> コピー</td>
</tr>
<tr>
<td style="text-align:center;">ビットレート</td>
<td style="text-align:center;">2000kbps</td>
</tr>
<tr>
<td style="text-align:center;">サイズ</td>
<td style="text-align:center;"> 1280x720</td>
</tr>
<tr>
<td style="text-align:center;">フレームレート</td>
<td style="text-align:center;"> 29.97</td>
</tr>
</tbody>
</table>


<p>このオプションで起動すると、<strong>ffmpeg -i big_buck_bunny_1080p_surround.avi -acodec copy -vcodec コーデック -b:v 2000k -s 1280x720 -r 30000/1001 -y 出力ファイル</strong>という起動オプションになります。</p>

<!-- more -->


<h1>仮想8コアでx264エンコード</h1>

<p>Xeon搭載マシンで動かしているKVMに仮想8コアを割り当てた環境でエンコードしてみました。
FFmpegの粋な計らいによって、エンコード中は以下のようにたくさんのスレッドが立ちがあり、マシンはエンコードに専念していました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/x264-8core-encode.png" alt="x264 8core encode" /></p>

<p>CPUはエンコード中、全コア90%前後の使用率を維持していました。そんなエンコードにかかった時間は以下の通りでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real    2m50.118s
</span><span class='line'>user    20m15.617s
</span><span class='line'>sys     0m7.375s</span></code></pre></td></tr></table></div></figure>


<p>10分の動画を3分足らずでエンコードしてしまいました。恐るべきコア数の暴力。</p>

<h1>仮想8コアでQSVエンコード</h1>

<p>先ほどと同じ環境でQSVを用いたエンコードをしてみました。
こちらもFFmpegによって複数のスレッドによる処理がされるのですが、CPUの負荷は多くて各コア10%程度となる非常に省エネなエンコードとなっていました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/qsv-8core-encode.png" alt="QSV 8core encode" /></p>

<p>こんな省エネでもエンコードに要する時間はそれほどかかりませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real    3m6.697s
</span><span class='line'>user    2m56.301s
</span><span class='line'>sys     0m4.871s</span></code></pre></td></tr></table></div></figure>


<p>3分とちょっとでエンコードが完了しています。さすがにXeon 8コアにはかなわないようです。</p>

<h1>仮想1コアでx264エンコード</h1>

<p>KVMで割り当てコア数を1コアに設定し、x264を用いたエンコードをしてみました。
負荷はほぼ100%、まれに90%前後になる程度でした。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/x264-1core-encode.png" alt="x264 1core encode" /></p>

<p>じっくりエンコードしてかかった時間は以下のとおりです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real    10m56.739s
</span><span class='line'>user    10m54.374s
</span><span class='line'>sys     0m1.070s</span></code></pre></td></tr></table></div></figure>


<p>動画再生時間+10%程度の時間がかかっていました。</p>

<h1>仮想1コアでQSVエンコード</h1>

<p>QSVとコア数の関係性は不明ながら、比較のために同じ環境でQSVでもエンコードしてみました。
負荷はほとんどないかと思ってたのですが、エンコーダに渡す前処理などで少々CPUを使うようで、90%前後まで達したり0%付近をうろうろしたりと、不安定な負荷がかかっていました。また、なぜか2スレッドで処理していました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/qsv-1core-encode.png" alt="qsv 1core encode" /></p>

<p>要した時間は以下のとおりです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real    3m0.692s
</span><span class='line'>user    2m35.944s
</span><span class='line'>sys     0m0.972s</span></code></pre></td></tr></table></div></figure>


<p>予想はついていましたが、QSVでは8コアでも1コアでもほとんど時間は変わらないようです。</p>

<h1>仮想1コアで複数のQSVエンコード&#8230;?</h1>

<p>記事公開直後にこのような気になる意見をいただきました。</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 一コア使用QSVで複数同時エンコしたらどうなるか実験してもらえるとうれしいです</p>&mdash; の (@polamjag) <a href="https://twitter.com/polamjag/status/561469823561920513">January 31, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>早速、QSVでの同時エンコードを試してみました。
tmuxで分割し、上下のコンソールで同時にエンコードを開始してみた結果が以下の画像のとおりになります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/qsv-1core-multi-encode.png" alt="qsv 1core multi encode" /></p>

<p>ライブラリがIGPへアクセスできないようでアクセス違反起こして終了してしまうため、QSVでの同時エンコードはダメでした。</p>

<h2>ファイルサイズ比較</h2>

<p>ビットレート固定なのでそれほど違いはありませんが、ファイルサイズは以下のようになっています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -l
</span><span class='line'>total 1261812
</span><span class='line'>-rw-rw-r--. 1 ninniku ninniku 928670754 May  6  2008 big_buck_bunny_1080p_surround.avi
</span><span class='line'>-rw-rw-r--. 1 ninniku ninniku 179373021 Jan 31 02:27 big_buck_bunny_qsv.mp4
</span><span class='line'>-rw-rw-r--. 1 ninniku ninniku 184045287 Jan 31 02:23 big_buck_bunny_x264.mp4</span></code></pre></td></tr></table></div></figure>


<p>QSVでエンコードしたほうが4MBほどファイルサイズが小さくなっていました。</p>

<h1>品質について</h1>

<p>x264とQSVの比較では目立った差異は見受けられなかったです。視力の問題かもしれませんが。</p>

<h1>まとめ</h1>

<p>動画再生時間の3分の1程度でエンコードができるQSVはLinuxでもすごい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel QSVのH.264エンコードをLinuxで！]]></title>
    <link href="http://mzyy94.com/blog/2015/01/30/intel-qsv-on-linux/"/>
    <updated>2015-01-30T22:22:03+09:00</updated>
    <id>http://mzyy94.com/blog/2015/01/30/intel-qsv-on-linux</id>
    <content type="html"><![CDATA[<p><a href="http://mzyy94.com/blog/2014/12/12/kvm-intel-hd-graphics-passthrough/">前回の記事</a>から1ヶ月以上空いてしまいました。遅ればせながらで申し訳ありません。続編です。
Intel QSVは高速にある程度の画質のエンコードできてよいです。とても。</p>

<p>今回はKVMでIntel HD Graphicsをパススルーした仮装マシン上に、SDKのインストールとカーネルモジュールのインストール、そしてffmpegでのQSVによるH.264エンコードができる環境づくりまでの手順をご紹介します。
<del>これが意外と骨が折れる作業だったので同じような思いをせぬよう、ご熟読ください。</del>（書き直す前の文章です。書き直した理由は後述。）</p>

<!-- more -->


<h1>Intel Media Server Studio (Intel Media SDK)</h1>

<p>前回の記事で紹介したIntel Media Server Studio(以下、IMSS。旧Intel Media SDK)のインストールをします。
IMSSはIntel Developer Zoneのメンバーになってから、<a href="https://software.intel.com/en-us/intel-media-server-studio">こちら</a>へアクセスすることでダウンロードできます。
メンバー登録時と同じメールアドレスを指定するとダウンロードリンクが送られてくるので、アクセスしてfor Linuxの方をダウンロードします。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-download.png" alt="IMSS donwload page" /></p>

<p>執筆時点での最新版は2015 R3です。この2015 R3を対象にインストールを進めていきます。(12月中旬に2015 R2を対象にした記事を書き終わっていたのだけれど、公開し損ねてる間にバージョンアップがあったため最初から書き直してるなんて言えない。。)</p>

<p>IMSS 2015 R3から対応OSはCentOSとSLESの2種類のみとなったので、どちらか好きな方を選んでインストールしてください。以下にはCentOS 7での様子を載せます。</p>

<h2>Intel Media SDK Install</h2>

<p>IMSSをダウンロードし回答すると、下図のように幾つかアーカイブの入ったディレクトリが展開されます。そこにあるSDKをインストールすることでQSVを利用することができるようになります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-1.png" alt="IMSS step 1" /></p>

<p>このSDKのアーカイブを展開すると下図のように、インストール手順の書かれたPDFファイルとOSごとにディレクトリで分けられたドライバがでてきます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-2.png" alt="IMSS step 2" /></p>

<p>今回はCentOS 7なので、CentOSディレクトリに移動し、PDFに記載のインストール手順を踏むだけでいいはずなんですが、幾つか依存関係にあるパッケージが必要になります。これがなくてインストールコケまくったので下表にまとめておきます。<code>yum install</code>などでインストールしてください。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">パッケージ名 </th>
<th style="text-align:left;"> 簡易説明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">mesa-dri-drivers </td>
<td style="text-align:left;"> グラフィックデバイスドライバ</td>
</tr>
<tr>
<td style="text-align:center;">redhat-lsb </td>
<td style="text-align:left;"> lsb_releaseでOS情報取得したいらしい</td>
</tr>
<tr>
<td style="text-align:center;">wget </td>
<td style="text-align:left;"> あのダウンロードするやつ</td>
</tr>
<tr>
<td style="text-align:center;">net-tools </td>
<td style="text-align:left;"> ネットワーク設定するアレ</td>
</tr>
</tbody>
</table>


<p>そしてあとは手順通りにインストールすればいいだけ。だと思ってたんですが、そのままインストールすると、ファイルやディレクトリが足りない（？）というエラーで怒られてしまいます。
見た感じインストールスクリプトのバグのようですが、一般環境向けのGeneric SDKが用意されているので、これを先にインストールしてからOS SpecificなSDKで上書きすることで、正常にインストールすることができるようです。</p>

<p>なので、SDKのディレクトリにあるGenericディレクトリに移動し、ぽつりと存在するアーカイブを展開します。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-3.png" alt="IMSS step 3" /></p>

<p>展開されたファイルの中にあるシェルスクリプトを管理者権限で実行し、Generic SDKをインストールします。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-4.png" alt="IMSS step 4" /></p>

<p>この作業で必要なディレクトリとファイルが作成されるので、次にOS固有のドライバとSDKをインストールします。</p>

<p>SDKのディレクトリに戻り、さらにCentOSのディレクトリに移動しファイルを確認すると、以下のようになっているはずです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-5.png" alt="IMSS step 5" /></p>

<p>　
ここではファイルの展開等は行わず、PDF記載の通りにユーザーをvideoグループに追加して、<code>/MSS</code>ディレクトリを作成してそこにファイルをコピーしてカレントディレクトリも移動し、インストール関連ファイルの入ったアーカイブを展開してでてくるSDKのインストールスクリプトを実行します。下図のninnikuはカレントユーザー名なので適当に<code>$(whoami)</code>に置換してください。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-6.png" alt="IMSS step 6" /></p>

<p>SDKのインストールが成功すると、下図のようになり、再起動を促されるのでひとまず再起動します。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-7.png" alt="IMSS step 7" /></p>

<p>再起動後、再度<code>/MSS</code>へ移動して、下図のようにドライバの組み込まれたカーネルをビルドします。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-8.png" alt="IMSS step 8" /></p>

<p>正常に終了すると以下のようになります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-9.png" alt="IMSS step 9" /></p>

<p>指定された場所<code>./rpmbuild/RPMS/</code>に移動すると<code>x86_64</code>ディレクトリがさらにあるのでそこに移動し、ここにあるQSVドライバが組み込まれたカーネルカーネルをインストールします。しかし今回使用しているCentOS 7では、QSVドライバが組み込まれたカーネルより新しいカーネルがインストールされていたため、QSVドライバ付きカーネルのインストールを拒否されてしまいました。
古いバージョンであることを重々承知した上でインストールするため、<code>--oldpackage</code>オプションを追加してインストールし、再起動してドライバのインストールは終了です。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-10.png" alt="IMSS step 10" /></p>

<p>再起動後、<code>lsmod | grep i915</code>として、以下のように幾つか該当があれば、ドライバが動作していることを確認できます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-11.png" alt="IMSS step 11" /></p>

<p>これで終わりかと思いきや、インストールスクリプトのバグなのか、ライブラリのリンク先が間違っており、実際にSDKを利用するときにリンクできずにプログラムが起動しない、などが発生してしまいます。</p>

<p>なので、下記スクリプトを実行してライブラリのパスを再設定してください。</p>

<p><code>sudo bash -c '(ldconfig -p -N | grep intel.mediasdk) || echo "/opt/intel/mediasdk/lib64" &gt;&gt; /etc/ld.so.conf.d/intel-mediasdk.conf &amp;&amp; ldconfig'</code></p>

<h1>H264_QSV codec for FFmpeg</h1>

<p>さて、IMSSのインストールができたのでSDKを利用する代表的なプログラムとして、QSVによるH.264エンコードをしましょう。</p>

<p>前回の記事で紹介した<a href="https://github.com/shenhailuanma/qsv-ffmpeg-codec">qsv_ffmpeg_codec</a>はIntel Media SDKの対応バージョンが古く、導入に手間がかかるのでIMSS 2014 R3対応版としてフォークしました。下記リポジトリに置いてあります。</p>

<p><em><a href="https://github.com/mzyy94/qsv_h264-ffmpeg">mzyy94/h264_qsv-ffmpeg</a></em></p>

<p>ここからクローンし、ディレクトリ下にある<code>./setup.sh</code>を実行して、FFmpeg-2.2ディレクトリに移動して<code>make</code>して、インストールください。</p>

<p>このコーデック、QSVによるH.264へのエンコードはしっかりとできるのですが、<strong>MPEG-TSファイルのエンコードはエラーになります</strong>。原因は、TSの仕組みゆえの、ライブラリの関数<code>MFXVideoENCODE_EncodeFrameAsync</code>に渡される引数によるものというところまではわかったのですが、修正にはほぼ全ての処理を書き換えないといけない手間がかかるので、MPEG-TSから一度RAWファイルを抽出し、パイプ等を使ってQSVコーデックに渡してエンコードしてください。</p>

<p>実行方法の例としては、
<code>ffmpeg -i in.avi -acodec copy -vcodec h264_qsv -b:v 2000k -y -sar 16:9 -s 1280x720 -r 30000/1001 -bufsize 20000k -maxrate 25000k out.mp4</code>
のようにHDサイズにリサイズして変換することができます。</p>

<p>せっかくなのでベンチマークとして、<a href="http://www.bigbuckbunny.org">Big Buck Bunny</a>をエンコードしようと思ったのですが、残念ながら執筆中にダウンロードが終わらなかったのでまたの機会に追記する形で公開しようと思います。</p>

<h1>まとめ</h1>

<p>LinuxでもQSVできる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVMでQSVするためIntel HD Graphicsパススルーするー]]></title>
    <link href="http://mzyy94.com/blog/2014/12/12/kvm-intel-hd-graphics-passthrough/"/>
    <updated>2014-12-12T23:59:49+09:00</updated>
    <id>http://mzyy94.com/blog/2014/12/12/kvm-intel-hd-graphics-passthrough</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://qiita.com/advent-calendar/2014/linux">Linux Advent Calendar 2014</a> 12日目の記事です。</p>

<p>12月も中頃となり寒い日が続きますね。みなさん体調はいかがでしょうか。</p>

<p>先日の<a href="http://mzyy94.com/blog/2014/12/10/kotatsu-heating/">こたつを温める実験</a>で十分な熱を得られることを知ってしまい、つい調子に乗って動画のエンコードをこたつの中でやってしまって、40℃超の高温になるという経験を得るなど、新しい発見のある毎日です。</p>

<p>こたつ温め実験で使った録画サーバーはCPUがIntel Celeron 847はとても貧弱で、動画をH.264にエンコードしようものなら30分のアニメで8時間かかってしまうほどです。
なんとか短時間で動画エンコードできないかと悩んでいたところ、Intel QuickSync Video(以下QSV、詳細は後述)がLinuxもサポートされていることを思い出し、LinuxでQSVエンコードをしてみようと思い立ちました。</p>

<p>QSVを利用できるベアメタルマシンは我が家に2台あり、より新しいものはCPUにXeon E3v3を搭載しています。
このマシンではKVMで仮想マシンを複数立ち上げていて、カーネルコンパイルなどのCIを回したり、クロスコンパイル環境を構築しているものです。
今回はそのマシンに録画用仮想マシンを立て、録画に必要なUSBデバイスとPCI ExpressのレーンとQSVエンコードのためにIntel HD Graphicsのパススルーを試みる記録の第1章となります。</p>

<!-- more -->


<h1>Intel QuickSync Video</h1>

<p><a href="http://www.intel.co.jp/content/www/jp/ja/architecture-and-technology/quick-sync-video/quick-sync-video-general.html">IntelのQSV公式サイト</a>に情報が載っていますが簡単にまとめます。</p>

<p>Intel Quick Sync Videoとは、Sandy Bridge世代のCore iシリーズのIntel CPUに搭載されているIntel HD Graphicsによる、動画のハードウェアエンコード・デコード技術のことです。
対象となるコーデックはH.264とH.262のみですが、エンコードに関してはソフトウェアで行うものよりもQSVを利用したものの方が圧倒的に高速（ただし品質は低下する模様）です。</p>

<p>QSVをオープンソースな動画エンコードソフトウェアで利用する動きは近頃活発であり、有名どころとしては<a href="https://handbrake.fr">Handbrake</a>が最新版である<a href="https://handbrake.fr/news.php?article=27">バージョン0.10.0でQSVエンコードをサポート</a>し始めました。
<a href="http://www.videolan.org">VLC</a>も<a href="http://www.videolan.org/vlc/releases/2.1.0.html">バージョン2.10からQSVエンコードをサポート</a>しています。</p>

<p>ただ、これらのオープンソースソフトウェア(OSS)によって、QSVによるH.264エンコード高速化の恩恵を受けられるのは、両者ともいまのところWindows版のみとなっています。</p>

<h1>QSV on Linux</h1>

<p>Windows向けにしかOSSのQSVエンコーダーがないからって、なにもLinuxでQSVでエンコードできないわけではないのです。
ffmpegのエンコードコーデックとして、LinuxでもQSVエンコードができる<a href="https://github.com/shenhailuanma/qsv-ffmpeg-codec">qsv-ffmpeg-codec</a>なるものがあるのです。
これを利用するには、Intel Media SDKを導入する必要がありますが、これによってOSSでのQSVエンコードがLinuxでもできるのです。</p>

<h1>Intel Media SDK</h1>

<p>Intel HD GraphicsをLinuxで利用するためにはSDKが必要となります。そのSDKがこれ、Intel Media SDKです。これは現在、<a href="https://software.intel.com/en-us/intel-media-server-studio">Intel(r) Medoa Server Studio 2015</a>(以下IMSS)に含まれる形で提供されています。IMSS 2015 R2ではUbuntuとSUSE Linuxがサポートされています。</p>

<h1>Intel HD Graphics pass-through</h1>

<p>いろいろなシステムの説明を終えたのでここからが本題です。
KVMでIntel HD Graphicsをpass-throughする方法を手順を追って説明していきます。</p>

<p>仮想マシンでのPCIデバイスのパススルーはよく行われており、XenにおいてはGPUパススルーによって<a href="http://www.slideshare.net/zgock/203o">家庭内VDIサーバーを作る</a>というような例があります。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/25982988" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/zgock/203o" title="Xenとzfsで作る家庭内VDIサーバ" target="_blank">Xenとzfsで作る家庭内VDIサーバ</a> </strong> from <strong><a href="http://www.slideshare.net/zgock" target="_blank">zgock</a></strong> </div></p>

<p>XenによるPCIパススルーの記事はたくさん見つかるものの、KVMによるPCIパススルーに関するものは少なく、ましてやCPU内臓GPUのパススルーは皆無と言ってもいいほどです。
これは、KVMにおいてPCIパススルーをするにはIntel VT-dテクノロジーが必要なので、ユーザーが限られてしまうのも影響しているかもしれません。</p>

<p>KVMでPCIパススルーするための手がかりを<code>make menuconfig</code>で調べたところ、次の2つのオプションを有効化することでIntel HD GraphicsをKVMにパススルーできそうだということがわかりました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/12/Intel-IOMMU-option.png" alt="Intel IOMMU" />
<img src="http://mzyy94.com/blog/resources/images/2014/12/12/VFIO-option.png" alt="Intel VFIO" /></p>

<p>Intel IOMMUはIntel VT-dの機能をカーネルで有効にするものです。
また、VFIOはIOMMUによるデバイスへのアクセスを提供するものです。</p>

<p>これらを有効にしてコンパイル &amp;&amp; インストールしカーネルをKVMでPCIデバイスパススルーできるようにします。</p>

<p>その次はqemuの起動オプションです。
まず、ベアメタルマシン上ではどのようにIntel HD Graphicsが認識されているのかを調べます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/12/Intel-HD-Graphics-Host.png" alt="Intel HD Graphics host" /></p>

<p>バス00:02.0にIntel HD Graphicsが認識されています。</p>

<p>このバス 00:02.0をPCIデバイスとしてパススルーするため、kvmの起動オプションに<code>-device vfio-pci,host=00:02.0,id=hostpci0,bus=ich9-pcie-port-1,addr=0x0,x-vga=on -machine type=q35</code>を追加します。</p>

<p><strong> !&#8211; 追記(2015/1/30) &#8211; </strong></p>

<p>このとき、CPUタイプのオプションを<code>-cpu Haswell,kvm=off,+x2apic</code>とすることを忘れないでください。</p>

<p><strong> !&#8211; 追記ここまで &#8211; </strong></p>

<p>すると、ゲストLinuxにしっかりとIntel HD Graphicsが渡されていることがわかります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/12/Intel-HD-Graphics-Guest.png" alt="Intel HD Graphics guest" /></p>

<h1>Intel Media SDK Install</h1>

<p>この先の記事が長くなってしまったのでIMSSのインストール以降は後ほど別記事に書きます。。</p>

<h1>まとめ</h1>

<p>KVMでもPCIパススルーして幸せになろう！</p>

<p>明日はmasami256さんです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サーバーの発熱でこたつを温める]]></title>
    <link href="http://mzyy94.com/blog/2014/12/10/kotatsu-heating/"/>
    <updated>2014-12-10T00:02:35+09:00</updated>
    <id>http://mzyy94.com/blog/2014/12/10/kotatsu-heating</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://www.adventar.org/calendars/443">coins Advent Calendar</a>の一部です。</p>

<p>寒い日が続きますね。昨夜の外気温は摂氏2度でした。みなさんいかがお過ごしでしょうか。</p>

<p>我が家は先月下旬にこたつを出しました。こたつから出られない生活が続いております。
故に、こんなスライドをLTで発表しました。</p>

<p><a href="http://www.slideshare.net/mzyy94/kotatsu">こたつ - coinsLT #1</a></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/42258069" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/mzyy94/kotatsu" title="こたつ - coinsLT #1" target="_blank">こたつ - coinsLT #1</a> </strong> from <strong><a href="http://www.slideshare.net/mzyy94" target="_blank">Yuki Mizuno</a></strong> </div></p>

<p>ITによってこたつ生活のQoLが向上したのですが、まだ改善の余地はあります。
そう、<strong>熱源の有効利用</strong>です。</p>

<p>みなさんご存知の通り、PC機器は熱を持ちます。この熱、せっかくなので有効活用したくありませんか？
ということで、実際にサーバー・デスクトップPCを熱源にしてこたつを温めてみる実験をしてみました。</p>

<!-- more -->


<h1>どのように熱源として活用するか</h1>

<p>冒頭に掲載したスライドにあるように、すでにすべてのサーバーはLANケーブルと電源さえあれば動作し利用できるようになっています。
なので、我が家では電源とLANをこたつまで引っ張り、設置場所をこたつのなかに変えるだけで熱源として利用することができます。</p>

<p><strong>※熱を持つマシンは火災の危険があり、その危険度はアパートを燃やしてVPSを借りるという炎上マーケティングに利用されるほどです。真似する際は十分に注意してください。</strong></p>

<h1>実験環境</h1>

<table>
<thead>
<tr>
<th style="text-align:center;">        日時      </th>
<th style="text-align:center;">             場所           </th>
<th style="text-align:center;"> 外気温 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">2014/12/9 19:04:22</td>
<td style="text-align:center;">学園都市内のマンションの一室</td>
<td style="text-align:center;">  2  ℃  </td>
</tr>
</tbody>
</table>


<p>LTで発表した2つのシステムをこたつ内で動作させて、熱の有効利用ができるかどうかを検証してみます。</p>

<h1>録画サーバー</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/recording-server.jpg" alt="Recording Server" /></p>

<p>まずは録画サーバーを熱源としてこたつを温めてみたいと思います。
主な熱源となりうるパーツは以下の通りです。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">種類</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> CPU  </td>
<td style="text-align:center;"> Intel Celeron 847 </td>
</tr>
<tr>
<td style="text-align:center;"> GPU  </td>
<td style="text-align:center;"> n/a </td>
</tr>
<tr>
<td style="text-align:center;"> HDD  </td>
<td style="text-align:center;"> 3x WD Green 3TB </td>
</tr>
<tr>
<td style="text-align:center;"> SSD  </td>
<td style="text-align:center;"> 1x SanDisk 128GB </td>
</tr>
<tr>
<td style="text-align:center;">Power </td>
<td style="text-align:center;"> 200W FlexATX </td>
</tr>
</tbody>
</table>


<p>24時間稼働を前提に構成したサーバーなので低消費電力のパーツが多いですが、HDD3台の発熱は結構なものであると思います。</p>

<h2>実験</h2>

<p>いつもの利用方法を想定して、電源を入れてアニメを2本、計50分ストリーミング再生して温度上昇がどれほどかを実験してみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/recording-server-temperature1.jpg" alt="temperature1" /></p>

<p>電源をいれる直前のこたつ内の温度は16.0℃でした。アニメを再生しているときの録画サーバーの消費電力は平均40.4Wでした。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/recording-server-power.jpg" alt="power1" /></p>

<h2>結果</h2>

<p>体温が熱源となることがないよう、寒いこたつの外でアニメを2本みた後のこたつ内の温度はどうなったでしょうか。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/recording-server-temperature2.jpg" alt="temperature2" /></p>

<p>1時間の録画サーバーの稼働でなんとこたつ内の温度は21.2℃になりました。5.2℃の上昇です。
なんとなく温もりを感じられますが、まだまだこたつとしては物足りなさを感じてしまう温度です。</p>

<h1>ゲームストリームサーバー</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/gamestream-server.jpg" alt="GameStream Server" />
そこで、ゲームストリームサーバーを追加してあらたな熱源としてこたつを温めてみたいと思います。
主な熱源となりうるパーツは以下の通りです。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">種類</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> CPU  </td>
<td style="text-align:center;"> Intel Core i5-2405S </td>
</tr>
<tr>
<td style="text-align:center;"> GPU  </td>
<td style="text-align:center;"> ZOTAC GeForce 750Ti</td>
</tr>
<tr>
<td style="text-align:center;"> HDD  </td>
<td style="text-align:center;"> n/a</td>
</tr>
<tr>
<td style="text-align:center;"> SSD  </td>
<td style="text-align:center;"> 1x Transcend 128GB </td>
</tr>
<tr>
<td style="text-align:center;">Power </td>
<td style="text-align:center;"> 200W FlexATX </td>
</tr>
</tbody>
</table>


<p>ゲーミングマシンとあって、発熱の多いGPUを搭載しているのが特長です。</p>

<h2>実験</h2>

<p>先ほどの録画サーバーによって温まったこたつに、ゲームストリームサーバーを追加して、2台のマシンでどれほどこたつを温められるかを実験してみます。
こちらもいつもの利用方法を想定して、電源を入れてゲームを1チャプター、約30分プレイしてこたつ内を温めます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/gamestream-server-temperature1.jpg" alt="temperature1" /></p>

<p>電源をいれる直前のこたつ内の温度は20.8℃でした。アニメを再生した直後より少し下がっていますが、これはこたつ内にサーバーを搬入した際に、こたつ外の冷えた空気が入ったためです。
ゲームをプレイしているときの2台のマシンの消費電力は平均120Wでした。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/gamestream-server-power.jpg" alt="power2" /></p>

<h2>結果</h2>

<p>1回死んでしまいましたが、なんとかチャプターをクリアできました。透明なハンターは強い。
さて、こたつ内の温度はどうなったでしょうか。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/gamestream-server-temperature2.jpg" alt="temperature2" /></p>

<p>30分間のゲームプレイで、温度はなんと26.1℃になりました。2台のマシンで16.0℃から26.1℃にまで暖かくなりました。10℃も！！
こたつに入ってみると、眠りを誘う温もりを感じられるほどでした。普通にあったかい。</p>

<h1>まとめ</h1>

<p>いくらサーバーの発熱がすごいからと、室温を劇的に上げることはできませんが、こたつの中なら10℃ほど温められることがわかりました。寒い冬にはもってこいのお得情報です。
しかし、こたつの中は埃が多く、炎上してVPSを借りる羽目になることもあるので、くれぐれも真似する際は十分に注意をはらって行ってください。</p>

<p>明日のcoins Advent Calendarは<a href="https://twitter.com/azuma962">カブさん</a>です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON2014 Online英語版予選 Write-up]]></title>
    <link href="http://mzyy94.com/blog/2014/12/07/seccon2014-online/"/>
    <updated>2014-12-07T17:59:06+09:00</updated>
    <id>http://mzyy94.com/blog/2014/12/07/seccon2014-online</id>
    <content type="html"><![CDATA[<p>昨日12月6日午前9時（日本時間）から12月7日午後5時までの32時間耐久CTFが行われたので参加してみました。
あまり活躍できずでしたがチャレンジしたもののまとめを記します。</p>

<!-- more -->


<h1>Get the key (Network 100)</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/NW100-1.png" alt="Get the key pcap file opened" />
配布されたパケットからキーの手がかりを探すというもの。
これはNWの基本問題だったので解説することはほとんどないです。
Wiresharkで開いてWebサイトのログイン情報が出るのでそれでアクセスしておしまい。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/NW100-2.png" alt="Get the key WebSite login" />
<img src="http://mzyy94.com/blog/resources/images/2014/12/7/NW100Flag.png" alt="NW100Flag" /></p>

<h1>Reverseit (Bin 100)</h1>

<p>なにやら配られたファイルを反転しろというもの。
バイト列反転、ビット反転いろいろな反転方法を試したところ、
4bitごとに反転してあげるとJPEG画像に早変わり。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/BIN100Flag.jpg" alt="BIN100Flag" /></p>

<p>画像中のFLAGも左右反転してるので眼で見て脳内反転しておしまい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">in</span><span class="p">,</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">in</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;Reverseit&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;reversed&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="o">|</span><span class="n">O_CREAT</span><span class="p">,</span> <span class="mo">0666</span><span class="p">);</span>
</span><span class='line'>      <span class="n">stat</span><span class="p">(</span><span class="s">&quot;Reverseit&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">lseek</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
</span><span class='line'>          <span class="n">read</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x0f</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xf0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>          <span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>SECCON Wars: The Flag Awakens (QR 300)</h1>

<iframe width="459" height="344" src="http://www.youtube.com/embed/1pC56S17-_A?feature=oembed" frameborder="0" allowfullscreen></iframe>


<p>新ジャンルQRからの出題。
<a href="http://youtu.be/1pC56S17-_A">YouTubeの動画</a>を見ろとの指令のみが与えられた問題。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/QR300-1.png" alt="SECCON Wars QR code movie" /></p>

<p>よーく見るとSECCONのバナーが出るときに動画の下の方にQRコードが流れているのでそれをスキャンすればよさそう。</p>

<p>手順としては動画をまずローカルに引っ張り出して、QRコードの出現する54秒の時点から7秒間を16fpsで連番画像として抜き出します。
ファイル情報を確認すると320x240ピクセルなので、目視で下部3ピクセルに表示されてると仮定して、320x3ピクセルの画像に切り出します。
あとはこれを連結してノイズを減らして色反転すると、</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/QR300Flag.jpg" alt="QR300 Flag" /></p>

<p>このようなQRコードが得られ、スキャンしてFLAGをゲットできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">ffmpeg</span> <span class="o">-</span><span class="n">i</span> <span class="n">SECCON_WARS</span><span class="p">.</span><span class="n">mp4</span> <span class="o">-</span><span class="n">ss</span> <span class="mi">54</span> <span class="o">-</span><span class="n">t</span> <span class="mi">7</span> <span class="o">-</span><span class="n">r</span> <span class="mi">16</span> <span class="o">-</span><span class="n">f</span> <span class="n">image2</span> <span class="o">%</span><span class="mo">04</span><span class="n">d</span><span class="p">.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">identify</span> <span class="mf">0001.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">convert</span> <span class="o">*</span><span class="p">.</span><span class="n">jpg</span> <span class="o">-</span><span class="n">crop</span> <span class="err">&#39;</span><span class="mi">320</span><span class="n">x3</span><span class="o">+</span><span class="mi">0</span><span class="o">+</span><span class="mi">237</span><span class="err">&#39;</span> <span class="n">qr_</span><span class="o">%</span><span class="mo">04</span><span class="n">d</span><span class="p">.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">convert</span> <span class="o">-</span><span class="n">append</span> <span class="n">qr_</span><span class="o">*</span><span class="p">.</span><span class="n">jpg</span> <span class="n">qr_appended</span><span class="p">.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">convert</span> <span class="o">-</span><span class="n">median</span> <span class="mi">3</span> <span class="o">-</span><span class="n">negate</span> <span class="n">qr_appended</span><span class="p">.</span><span class="n">jpg</span> <span class="n">qr</span><span class="p">.</span><span class="n">jpg</span>
</span></code></pre></td></tr></table></div></figure>


<h1>The Golden Gate (Programming 400)</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/GoldenGate.jpg" alt="The Golden Gate" /></p>

<p>自作ハードウェアエンコーダーの写真があって、それによってエンコードされた文字<code>BQDykmgZ0I6SaQnq4o/iEONudetXdPJdpl1UVSlU69oZOtvqnHfinOpcEfIjXy9okkVpsuw2kpKS==</code>をデコードしてくれとのこと。
このハードウェアエンコーダーはユニーバーサル基板上に作られていて、絡み合うジャンパ線がどう繋がっているのかをしっかり把握できれば回路図を起こすのは以外と簡単。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/TGG-1.jpg" alt="Handwriting Circuit" /></p>

<p>7400のNANDゲートによって入力から出力までの間は、2入力NANDの結果をさらにその2入力でそれぞれNANDし、それらをNANDするという、何度もNANDする処理が入ってるだけでした。
要するにXORです。</p>

<p>よって、プログラムは簡潔にできあがり、難なくFLAGを手に入れることができると思いました。</p>

<p>&#8230;思いました。</p>

<p>残念ながら時間中にFLAGは得られませんでした。</p>

<p>一点、デコードすべき文がなんなのかがわからなかったことがあります。BASE64にしては文字数が合わないのです。
そして、どのタクトスイッチがどのbitをさしているのか、アノード・カソードどちらなのか写真からよくわからない、など、躓く点が多かったのです。</p>

<p>SECCONは終わってしまいましたが、ヒントが出され、入力と出力とが対応付けられるようになりました。</p>

<iframe width="480" height="270" src="http://www.youtube.com/embed/kaDjypSndMk?feature=oembed" frameborder="0" allowfullscreen></iframe>


<p>タクトスイッチによる入力が一部反転できてなかったようです。</p>

<p>入力文を正規のBASE64にして実行してみると、しっかりとgzipのデータとなり、フラッグを得られました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">echo</span> <span class="s">&quot;BQDykmgZ0I6SaQnq4o/iEONudetXdPJdpl1UVSlU69oZOtvqnHfinOpcEfIjXy9okkVpsuw2kpKS&quot;</span> <span class="o">|</span> <span class="n">openssl</span> <span class="n">base64</span> <span class="o">-</span><span class="n">d</span> <span class="o">&gt;</span> <span class="n">input</span>
</span><span class='line'><span class="n">gcc</span> <span class="n">goldengate</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">gg</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">gg</span> <span class="n">input</span>
</span><span class='line'><span class="n">file</span> <span class="n">out</span>
</span><span class='line'><span class="n">gzip</span> <span class="o">-</span><span class="n">S</span> <span class="p">.</span><span class="n">gz</span> <span class="o">-</span><span class="n">d</span> <span class="o">-</span><span class="n">c</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define B(y) ((*buf &gt;&gt; (y)) &amp; 1)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">nand</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">xor</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nand</span><span class="p">(</span><span class="n">nand</span><span class="p">(</span><span class="n">nand</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">),</span> <span class="n">a</span><span class="p">),</span> <span class="n">nand</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">nand</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">encoder</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a4</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">,</span> <span class="n">B</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a6</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">B</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a5</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">a6</span><span class="p">,</span> <span class="n">B</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">g1</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">B</span><span class="p">(</span><span class="mi">7</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a0</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">g1</span><span class="p">,</span> <span class="n">B</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a2</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">g2</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">B</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a1</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">g2</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a3</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">g1</span><span class="p">,</span> <span class="n">g2</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a7</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">,</span> <span class="n">g2</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a7</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">128</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a6</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">64</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a5</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">32</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a4</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a3</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a2</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a0</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="n">t</span> <span class="o">^</span> <span class="mh">0xff</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">in</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">table</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create table</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">256</span><span class="p">;</span> <span class="n">c</span> <span class="o">=</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">encoder</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>      <span class="n">table</span><span class="p">[(</span><span class="kt">int</span><span class="p">)</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">in</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">O_RDONLY</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">stat</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">);</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;out&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="o">|</span><span class="n">O_CREAT</span><span class="p">,</span> <span class="mo">0666</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">read</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>          <span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>QR (Easy) (QR 100)</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/QRCake.jpg" alt="QR Cake" /></p>

<p>昨年のSECCON 2013オンライン予選でも出題された、データビットの部分だけ残ってるQRコードを解析するという問題。
今回はパンケーキに焼いて食べてしまったようです。</p>

<p>おなじみ<a href="http://en.wikipedia.org/wiki/QR_code">英語版WikipediaのQRコード解説ページ</a>のデータ配置図を元にデータビットを埋めていくだけです。
今回のフラッグの形式は<code>SECCON{XXXXXXX}</code>なので、最初の6文字が&#8221;SECCON&#8221;になるようなマスクを<a href="http://www.swetake.com/qrcode/qr5.html">QRコードの解説サイト</a>を見ながら特定すると、マスクパターンは001であることがわかります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/QR100-1.png" alt="QR Cake" /></p>

<p>あとは淡々とビットを解析して行って得たFLAGは、</p>

<pre>
0010 : 英数モード
000000110 : 6文字
10011111010 : 'SE'
01000101000 : 'CC'
10001001111 : 'ON'
0100 : 8bitバイトモード
00010010 : 18文字
01111011 : '{'
01010000 : 'P'
01010011 : 'S'
01110111 : 'w'
01011101 : ']'
01010001 : 'Q'
00111001 : '9'
01100100 : 'd'
00111001 : '9'
01000111 : 'G'
01101010 : 'j'
01001011 : 'K'
01010100 : 'T'
01100100 : 'd'
01000100 : 'D'
00111000 : '8'
01001000 : 'H'
01111101 : '}'
0101
11
</pre>


<p><code>SECCON{PSw]Q9d9GjKTdD8H}</code>
しかし<strong>Incorrect.</strong></p>

<p>骨の折れる作業で再度トライする気にはならなかったのですが、
今になって見返してみると間違ってるビットを発見。
正解は<code>SECCON{PSwIQ9d9GjKTdD8H}</code>;</p>

<h2>おしまい</h2>

<p>チーム合計で2500点でした(´Д` )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 横浜大会NW予選 Write-up]]></title>
    <link href="http://mzyy94.com/blog/2014/09/03/seccon2014-yokohama-2nd-day/"/>
    <updated>2014-09-03T14:40:47+09:00</updated>
    <id>http://mzyy94.com/blog/2014/09/03/seccon2014-yokohama-2nd-day</id>
    <content type="html"><![CDATA[<p>SECCON 2014 横浜大会に参加してきました。
NW,BIN,WEBと３部門の予選がありましたが、ネットワーク大好き♡なのでNWにチャレンジしました。</p>

<p>ネットワーク部門は10問ある問題を解いて答えを紙に書いて提出して採点された点数によって順位付けされ、成績優秀者10人が予選突破という選抜形式で行われました。</p>

<p>CTFにおけるネットワーク問題は年々減少傾向にある上、難易度を上げることが難しいとのことなので、今回は少し特殊なファイル形式で出題されていました。
例えば以下が問題1の出題ファイルです。</p>

<pre><code>Find the Key!

0000  00 00 00 00 00 00 00 00  00 00 00 00 08 00 45 00   ........ ......E.
0010  00 34 f3 ed 00 00 40 01  88 d9 7f 00 00 01 7f 00   .4....@. ........
0020  00 01 08 00 bd c8 18 18  00 00 5a 6d 78 68 5a 33   ........ ..ZmxhZ3
0030  74 7a 5a 57 4e 6a 62 32  35 7a 5a 57 4e 6a 62 32   tzZWNjb2 5zZWNjb2
0040  35 39 
</code></pre>

<p>そう、いいままでのpcapファイルでの出題ではなくテキストファイルでの出題となっていたのです。</p>

<p>このままでは今まで愛用してきたWiresharkおよび、tsharkでの解析ができません。
バイナリエディタにコピペして目grepしてもいいですが、ここはpcapファイルに変換してしまいましょう。</p>

<p>世の中には便利なソフトウェアが沢山あります。こんなときにもOSSが活躍します。
テキストファイルをpcapファイルに変換するソフトウェア、その名も<code>text2pcap</code>です。
これ、Wiresharkに付属してるんです。</p>

<p>使い方は簡単、例えば問題1の出題ファイルでは、1行目の問題文を削除してHEX部分だけにしたファイル、question-01.txtを作成し、
<code>text2pcap question-01.txt q01.pcap</code>などとすれば、Wiresharkで解析できるpcapファイルが作成されます。</p>

<p>さて、このようにしてさくさくと解けるファイルが作成できればあとは画面を凝視するのみ、順々に解いていきます。</p>

<!-- more -->


<h1>問題1</h1>

<pre><code>Find the Key!

0000  00 00 00 00 00 00 00 00  00 00 00 00 08 00 45 00   ........ ......E.
0010  00 34 f3 ed 00 00 40 01  88 d9 7f 00 00 01 7f 00   .4....@. ........
0020  00 01 08 00 bd c8 18 18  00 00 5a 6d 78 68 5a 33   ........ ..ZmxhZ3
0030  74 7a 5a 57 4e 6a 62 32  35 7a 5a 57 4e 6a 62 32   tzZWNjb2 5zZWNjb2
0040  35 39 
</code></pre>

<p>簡単ですね。
tsharkでパケットをチェックしてみると、
      1   0.000000    127.0.0.1 -> 127.0.0.1    ICMP 66 Echo (ping) request  id=0x1818, seq=0/0, ttl=64
と出力されるので、ICMPメッセージにフラッグが隠されてるんだろうなーっと想像つきます。
上記のファイルを見ると、目nkfで簡単に答えが出てきます。
目nkf力が無い人は、<code>echo ZmxhZ3tzZWNjb25zZWNjb259|nkf -mB</code>とでもやるとよいでしょう。</p>

<p>ということでフラッグは<code>secconseccon</code>でした。</p>

<h1>問題2</h1>

<pre><code>開いてるTCPポートを列挙せよ
</code></pre>

<p><a href="http://mzyy94.com/blog/resources/data/2014/9/3/nmaped.pcap">nmaped.pcap</a></p>

<p>これはpcapファイルが添付されていました。
nmapでポートスキャンをしたときのログが残っているようです。
ポートが空いているということは、TCP FlagのSYNとACKが帰ってくるはずなので、SYN/ACKを返しているポートを列挙する適当なスクリプトを書きました。
node.js + node_pcapです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">filter</span> <span class="o">=</span> <span class="s2">&quot;tcp&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">pcap</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pcap&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">pcap_session</span> <span class="o">=</span> <span class="nx">pcap</span><span class="p">.</span><span class="nx">createOfflineSession</span><span class="p">(</span><span class="s2">&quot;./nmaped.pcap&quot;</span><span class="p">,</span> <span class="nx">filter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pcap_session</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;packet&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">raw_packet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">packet</span> <span class="o">=</span> <span class="nx">pcap</span><span class="p">.</span><span class="nx">decode</span><span class="p">.</span><span class="nx">packet</span><span class="p">(</span><span class="nx">raw_packet</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">packet</span><span class="p">.</span><span class="nx">link</span><span class="p">.</span><span class="nx">ip</span><span class="p">.</span><span class="nx">tcp</span><span class="p">.</span><span class="nx">flags</span><span class="p">.</span><span class="nx">syn</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="nx">packet</span><span class="p">.</span><span class="nx">link</span><span class="p">.</span><span class="nx">ip</span><span class="p">.</span><span class="nx">tcp</span><span class="p">.</span><span class="nx">flags</span><span class="p">.</span><span class="nx">ack</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">packet</span><span class="p">.</span><span class="nx">link</span><span class="p">.</span><span class="nx">ip</span><span class="p">.</span><span class="nx">tcp</span><span class="p">.</span><span class="nx">sport</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを02-solver.jsとして保存し、<code>npm install pcap &amp;&amp; node 02-solver.js | sort -n | uniq</code>としてあげれば答えのポートが出てきます。</p>

<h1>問題3</h1>

<pre><code>このパケットデータのアプリケーションプロトコルは何でしょう？
英字でお答えください。

0000   00 1a a0 89 a3 7f 44 94 fc 7e 1a ba 08 00 45 00  ......D..~....E.
0010   00 4c 00 00 40 00 36 11 11 2c d2 ad a0 1b c0 a8  .L..@.6..,......
0020   00 04 00 7b 00 7b 00 38 6d 96 1c 02 11 e8 00 00  ...{.{.8m.......
0030   06 8b 00 00 02 9e ac 1d 02 32 d7 ad 09 99 d8 db  .........2......
0040   8b 49 d7 ad 0a 44 7a a8 0f 7e d7 ad 0a 46 42 28  .I...Dz..~...FB(
0050   23 a6 d7 ad 0a 46 42 2b 5a b3                    #....FB+Z.
</code></pre>

<p>目grepで答えはすぐにわかるんですが、確認のためにtext2pcapを用いてpcapファイルにしてtsharkに食わせてみると、以下のように出力されます。</p>

<pre><code>$ tshark -r q03.pcap
  1   0.000000 210.173.160.27 -&gt; 192.168.0.4  NTP 90 NTP Version 3, server
</code></pre>

<p>NTPですね。</p>

<h1>問題4</h1>

<pre><code>サーバの名前は何？
FQDNでお答えください。

0000   00 1a a0 89 a3 7f 44 94 fc 7e 1a ba 08 00 45 00  ......D..~....E.
0010   00 4c 00 00 40 00 36 11 11 2c d2 ad a0 1b c0 a8  .L..@.6..,......
0020   00 04 00 7b 00 7b 00 38 6d 96 1c 02 11 e8 00 00  ...{.{.8m.......
0030   06 8b 00 00 02 9e ac 1d 02 32 d7 ad 09 99 d8 db  .........2......
0040   8b 49 d7 ad 0a 44 7a a8 0f 7e d7 ad 0a 46 42 28  .I...Dz..~...FB(
0050   23 a6 d7 ad 0a 46 42 2b 5a b3                    #....FB+Z.
</code></pre>

<p>先ほどと同じパケットデータなので、全問でtsharkを動かしたときの出力にあるIPアドレスに向けてnslookupしてあげれば答えがでます。</p>

<pre><code>$ nslookup 210.173.160.27
Server:     192.168.128.1
Address:    192.168.128.1#53

Non-authoritative answer:
27.160.173.210.in-addr.arpa name = ntp1.jst.mfeed.ad.jp.

Authoritative answers can be found from:
</code></pre>

<p>答えは、ntp1.jst.mfeed.ad.jp.です。</p>

<h1>問題5</h1>

<pre><code>このパケットによると、日本時間で今何月何日何時何分何秒？

0000   00 1a a0 89 a3 7f 44 94 fc 7e 1a ba 08 00 45 00  ......D..~....E.
0010   00 4c 00 00 40 00 36 11 11 2c d2 ad a0 1b c0 a8  .L..@.6..,......
0020   00 04 00 7b 00 7b 00 38 6d 96 1c 02 11 e8 00 00  ...{.{.8m.......
0030   06 8b 00 00 02 9e ac 1d 02 32 d7 ad 09 99 d8 db  .........2......
0040   8b 49 d7 ad 0a 44 7a a8 0f 7e d7 ad 0a 46 42 28  .I...Dz..~...FB(
0050   23 a6 d7 ad 0a 46 42 2b 5a b3                    #....FB+Z.
</code></pre>

<p>これも先ほどと同じパケットです。<code>tshark -r 03.pcap -V</code>とすると、Timestampの情報が現れるので時差と到達遅延を計算してあげれば答えが出ます。</p>

<h1>問題6</h1>

<pre><code>空欄となっている箇所の２バイトの値は？

00 66 77 88  99 AA 00 11  22 33 44 55  08 00 45 00
00 54 03 76  00 00 40 01  F3 DF C0 A8  01 01 C0 A8
01 02 08 00  48 FD 3B 04  00 6F 54 01  8D C5 00 0C
A6 B9 08 09  0A 0B 0C 0D  0E 0F 10 11  12 13 14 15
16 17 18 19  1A 1B 1C 1D  1E 1F 20 21  22 23 24 25
26 27 28 29  2A 2B 2C 2D  2E 2F 30 31  32 33 34 35
36 37

00 11 22 33  44 55 00 66  77 88 99 AA  08 00 45 00
00 54 1E 0A  00 00 40 01  D9 4B C0 A8  01 02 C0 A8
01 01 00 00  -- -- 3B 04  00 6F 54 01  8D C5 00 0C
A6 B9 08 09  0A 0B 0C 0D  0E 0F 10 11  12 13 14 15
16 17 18 19  1A 1B 1C 1D  1E 1F 20 21  22 23 24 25
26 27 28 29  2A 2B 2C 2D  2E 2F 30 31  32 33 34 35
36 37
</code></pre>

<p>目wiresharkするとわかると思いますが、求めるフラッグはICMPのChecksumです。
計算してもいいのですが、wireshark/tsharkのチェック機能を使ってさっくりと解いてしまいます。
&#8211;の部分に00を埋めてわざと間違っているであるだろうChecksumを入力してpcapファイルを作成し、
tsharkで詳細情報を見ると、以下のように出力されます。</p>

<pre><code>$ tshark -r q06.pcap -V
Frame 1: 98 bytes on wire (784 bits), 98 bytes captured (784 bits)
    Encapsulation type: Ethernet (1)
    Arrival Time: Sep  3, 2014 12:48:01.000000000 JST
    [Time shift for this packet: 0.000000000 seconds]
    Epoch Time: 1409716081.000000000 seconds
    [Time delta from previous captured frame: 0.000000000 seconds]
    [Time delta from previous displayed frame: 0.000000000 seconds]
    [Time since reference or first frame: 0.000000000 seconds]
    Frame Number: 1
    Frame Length: 98 bytes (784 bits)
    Capture Length: 98 bytes (784 bits)
    [Frame is marked: False]
    [Frame is ignored: False]
    [Protocols in frame: eth:ethertype:ip:icmp:data]
Ethernet II, Src: 00:66:77:88:99:aa (00:66:77:88:99:aa), Dst: 00:11:22:33:44:55 (00:11:22:33:44:55)
    Destination: 00:11:22:33:44:55 (00:11:22:33:44:55)
        Address: 00:11:22:33:44:55 (00:11:22:33:44:55)
        .... ..0. .... .... .... .... = LG bit: Globally unique address (factory default)
        .... ...0 .... .... .... .... = IG bit: Individual address (unicast)
    Source: 00:66:77:88:99:aa (00:66:77:88:99:aa)
        Address: 00:66:77:88:99:aa (00:66:77:88:99:aa)
        .... ..0. .... .... .... .... = LG bit: Globally unique address (factory default)
        .... ...0 .... .... .... .... = IG bit: Individual address (unicast)
    Type: IP (0x0800)
Internet Protocol Version 4, Src: 192.168.1.2 (192.168.1.2), Dst: 192.168.1.1 (192.168.1.1)
    Version: 4
    Header Length: 20 bytes
    Differentiated Services Field: 0x00 (DSCP 0x00: Default; ECN: 0x00: Not-ECT (Not ECN-Capable Transport))
        0000 00.. = Differentiated Services Codepoint: Default (0x00)
        .... ..00 = Explicit Congestion Notification: Not-ECT (Not ECN-Capable Transport) (0x00)
    Total Length: 84
    Identification: 0x1e0a (7690)
    Flags: 0x00
        0... .... = Reserved bit: Not set
        .0.. .... = Don't fragment: Not set
        ..0. .... = More fragments: Not set
    Fragment offset: 0
    Time to live: 64
    Protocol: ICMP (1)
    Header checksum: 0xd94b [validation disabled]
        [Good: False]
        [Bad: False]
    Source: 192.168.1.2 (192.168.1.2)
    Destination: 192.168.1.1 (192.168.1.1)
    [Source GeoIP: Unknown]
    [Destination GeoIP: Unknown]
Internet Control Message Protocol
    Type: 0 (Echo (ping) reply)
    Code: 0
    Checksum: 0x0000 [incorrect, should be 0x50fd]
    Identifier (BE): 15108 (0x3b04)
    Identifier (LE): 1083 (0x043b)
    Sequence number (BE): 111 (0x006f)
    Sequence number (LE): 28416 (0x6f00)
    Data (56 bytes)

0000  54 01 8d c5 00 0c a6 b9 08 09 0a 0b 0c 0d 0e 0f   T...............
0010  10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f   ................
0020  20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f    !"#$%&amp;'()*+,-./
0030  30 31 32 33 34 35 36 37                           01234567
        Data: 54018dc5000ca6b908090a0b0c0d0e0f1011121314151617...
        [Length: 56]
</code></pre>

<p>ICMPの項目を見てみると、
<code>   Checksum: 0x0000 [incorrect, should be 0x50fd]</code>
とあるので、答えにコレを記入して乙です。</p>

<h1>問題7</h1>

<pre><code>通信相手のIPアドレスは？次の4つのパケットを見て答えよ。

-- 1 --
000000: FF FF FF FF  FF FF 00 66  77 88 99 AA  08 06 00 01 : .......f w.......
000010: 08 00 06 04  00 01 00 66  77 88 99 AA  C0 A8 01 02 : .......f w.......
000020: 00 00 00 00  00 00 C0 A8  01 01                    : ........ ..
==
-- 2 --
000000: 00 66 77 88  99 AA 00 11  22 33 44 55  08 06 00 01 : .fw..... "3DU....
000010: 08 00 06 04  00 02 00 11  22 33 44 55  C0 A8 01 01 : ........ "3DU....
000020: 00 66 77 88  99 AA C0 A8  01 02 00 00  00 00 00 00 : .fw..... ........
000030: 00 00 00 00  00 00 00 00  00 00 00 00              : ........ ....
==
-- 3 --
000000: 00 11 22 33  44 55 00 66  77 88 99 AA  08 00 45 00 : .."3DU.f w.....E.
000010: 00 54 00 00  40 00 40 01  50 C3 C0 A8  01 02 0A 14 : .T..@.@. P.......
000020: 1E 28 08 00  D0 C0 7A 07  00 01 EA 6C  02 54 C9 72 : .(....z. ...l.T.r
000030: 0C 00 08 09  0A 0B 0C 0D  0E 0F 10 11  12 13 14 15 : ........ ........
000040: 16 17 18 19  1A 1B 1C 1D  1E 1F 20 21  22 23 24 25 : ........ .. !"#$%
000050: 26 27 28 29  2A 2B 2C 2D  2E 2F 30 31  32 33 34 35 : &amp;'()*+,- ./012345
000060: 36 37                                              : 67
==
-- 4 --
000000: 00 66 77 88  99 AA 00 11  22 33 44 55  08 00 45 00 : .fw..... "3DU..E.
000010: 00 54 02 95  40 00 40 01  4E 2E 0A 14  1E 28 C0 A8 : .T..@.@. N....(..
000020: 01 02 00 00  D8 C0 7A 07  00 01 EA 6C  02 54 C9 72 : ......z. ...l.T.r
000030: 0C 00 08 09  0A 0B 0C 0D  0E 0F 10 11  12 13 14 15 : ........ ........
000040: 16 17 18 19  1A 1B 1C 1D  1E 1F 20 21  22 23 24 25 : ........ .. !"#$%
000050: 26 27 28 29  2A 2B 2C 2D  2E 2F 30 31  32 33 34 35 : &amp;'()*+,- ./012345
000060: 36 37                                              : 67
==
</code></pre>

<p>pcapファイルを作成して、<code>tshark -r q07.pcap</code>とするだけです。それだけです。やってみてください。</p>

<h1>問題8</h1>

<pre><code>間違っているのは何バイト目？次の二つのパケットを見て答えよ。

-- 1 --
000000: FF FF FF FF  FF FF 00 11  22 33 44 55  08 06 00 01 : ........ "3DU....
000010: 08 00 08 04  00 01 00 11  22 33 44 55  C0 A8 01 01 : ........ "3DU....
000020: 00 00 00 00  00 00 C0 A8  01 02                    : ........ ..      
==
-- 2 --
000000: 00 11 22 33  44 55 00 66  77 88 99 AA  08 06 00 01 : .."3DU.f w.......
000010: 08 00 08 04  00 02 00 66  77 88 99 AA  C0 A8 01 02 : .......f w.......
000020: 00 11 22 33  44 55 C0 A8  01 01 00 00  00 00 00 00 : .."3DU.. ........
000030: 00 00 00 00  00 00 00 00  00 00 00 00              : ........ ....    
==
</code></pre>

<p>ぱっと見で大体予想はつくのですが、今回もpcapファイルを作成して見てみます。
tsharkの出力は以下のようになりました。
    $ tshark -r q08.pcap
      1   0.000000              ->              Ethernet 2 [Malformed Packet]
      2   0.000001 00:66:77:88:99:aa -> 00:11:22:33:44:55 ARP 60 1.2.0.17 is at 0066778899aac0a8</p>

<p>1パケット目が壊れてるようです。
この通信はARPの問い合わせの様子を示しているようで、ARPの構造を知っていればすぐに解ける問題です。
ARPのPDUは以下のようになっています。</p>

<pre><code> 0                               1
 0 1 2 3 4 5 6 7 8 9 a b c d e f 0 1 2 3 4 5 6 7 8 9 a b c d e f 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Hardware type         |           Protocol type       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  HW addr len  | Proto addr len|              OP Code          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  Sender Hardware Address                      |
+                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |   Sender Protocol Address     
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   Sender Protocol Address      |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
|                      Target Hardware Address                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  Target Protocol address                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</code></pre>

<p>これに0x000eから始まるEtherペイロードを合わせてみて見ると、HW addr lenの部分、すなわちARPリクエストのハードウェアアドレス長指定が間違っているのです。
この問い合わせはProtocol typeの部分からIP問い合わせであることがわかり、IPアドレス問い合わせのためにはMACアドレスに対するARP要求が行われます。
MACアドレスが物理層となり、EthernetのMACアドレスは6バイトなので、HW addr lenの部分は08ではなく、06である必要があります。</p>

<p>0x0012番地目の部分が間違っているので、19バイト目が答えとなります。</p>

<h1>問題9</h1>

<p>なぜか問題8と同じ</p>

<h1>問題10</h1>

<pre><code>このパケットデータの??の部分に表示される文字列をお答えください。

0000  00 00 00 00 00 00 00 00  00 00 00 00 08 00 45 00   ........ ......E.
0010  00 54 00 00 40 00 40 01  3c a7 7f 00 00 01 7f 00   .T..@.@. &lt;.......
0020  00 01 08 00 ba 0c 02 18  00 01 d7 c2 05 54 00 00   ........ .....T..
0030  00 00 91 f0 0e 00 00 00  00 00 10 11 12 13 14 15   ........ ........
0040  16 17 18 19 1a 1b 1c 1d  1e 1f 20 21 22 23 24 25   ........ .. ?????
0050  26 27 28 29 2a 2b 2c 2d  2e 2f 30 31 32 33 34 35   ?????????????????
0060  36 37                                              ??
</code></pre>

<p>パケットの問題ではないね。
ASCIIコードテーブル片手に0x21から0x37までのASCII文字を記入しておしまい。</p>

<h3>感想</h3>

<p>CTF予選問題としては出題ファイル形式含めてもちょっと優しすぎるかなぁといった印象を持ちました。
さくさくと解けるものが多く、難しいものは無かったように感じます。
ただ、text2pcapの存在を知らない人に取っては結構な時間を取られてしまう骨の折れるような問題群だったと思います。</p>

<blockquote class="twitter-tweet" lang="ja"><p>わいわい <a href="http://t.co/YaEfzCCFq8">pic.twitter.com/YaEfzCCFq8</a></p>&mdash; 誕生日前日amzn.to/1vvKISb (@mzyy94) <a href="https://twitter.com/mzyy94/status/507067029547806720">2014, 9月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自宅サーバーを増やした]]></title>
    <link href="http://mzyy94.com/blog/2014/04/06/new-server/"/>
    <updated>2014-04-06T23:10:36+09:00</updated>
    <id>http://mzyy94.com/blog/2014/04/06/new-server</id>
    <content type="html"><![CDATA[<p>増税前のPCパーツ買いだめイベントに便乗して、３月中に自宅サーバーを増設しました。
どんな構成で組み立てたのかの紹介になります。</p>

<!-- more -->


<p>サーバー増設にあたって、次に挙げる構成目標を先に決めていました。</p>

<ul>
<li>４コア以上、かつ８スレッド以上</li>
<li>16GB以上のDRAM</li>
<li>速い記憶装置</li>
<li>8万円以下</li>
</ul>


<p>あまり欲がありませんが、だいたいこれを満たせるようにと組みました。</p>

<p>SandyBridge世代のCPUを載せた、自宅サーバーっぽいものは前からありました。
構成は、以下の表の通りです。</p>

<table>
<thead>
<tr>
<th>パーツ</th>
<th>種類</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>Intel Core i5</td>
</tr>
<tr>
<td>DRAM</td>
<td> DDR3-1333 8GB (4GB x 2)</td>
</tr>
<tr>
<td>HDD</td>
<td> WD2TB</td>
</tr>
<tr>
<td>MB</td>
<td>ECS H67I</td>
</tr>
</tbody>
</table>


<p>どこがサーバーじゃいと思うかもしれませんが、そう思うのもあたりまえ、元デスクトップマシンの構成のままなのです。
大概のことはこなせていたので、新しく組む必要はなかったといわれればその通りなのですが、気軽に仮想マシンをたてて、実験して、つぶして、のような遊びをするには非力であったため、最新のパーツで新たに組むことにしました。</p>

<h1>パーツ選定</h1>

<h2>CPU</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08114.JPG" alt="" />
「サーバー向けならXeonっしょ。」と各所で言われているので、Xeonにしました。
用途としては、CIサーバーが主で、適当な仮想マシンインスタンスを作っては遊び、追加していくという将来を見据えて、<a href="http://ark.intel.com/ja/products/75462/Intel-Xeon-Processor-E3-1245-v3-8M-Cache-3_40-GHz">Intel Xeon E3-1245 v3</a>にしました。</p>

<table>
<thead>
<tr>
<th>プロセッサー</th>
<th>Intel Xeon E3-1245 v3</th>
</tr>
</thead>
<tbody>
<tr>
<td>動作周波数</td>
<td>3.4 GHz</td>
</tr>
<tr>
<td>TB時周波数</td>
<td>3.8 GHz</td>
</tr>
<tr>
<td>キャッシュ</td>
<td>8 MB</td>
</tr>
<tr>
<td>最大 TDP</td>
<td>84 W</td>
</tr>
</tbody>
</table>


<p>動作周波数3.4GHzあれば１０個ほど仮想マシン立ち上げても大丈夫でしょう。</p>

<h2>MB</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08093.JPG" alt="" />
自宅に転がっているPCケースがどれもMini-ITX向けのものなので、Mini-ITXにします。Xeon対応を謳っているマザーボードは少なく、Mini-ITXに限定してしまうと片手で数えきれるほどしか候補がありません。
サーバー向けチップセットを載せたASUSの<a href="http://www.asus.com/Commercial_Servers_Workstations/P9DI/">P9D-I</a>が購入時時点のXeon向けMini-ITXマザーボードとしては最上位であるものの、予算オーバーしてしまうので、今回は見送りました。
残る選択肢はGIGABYTEかASRockのほぼ二択となり、両者の違いはeSATAの有無やGbEの数などで、仮想マシンをいくつもたてることを考えると、二つGbEがあるほうが好ましいということで、GIGABYTEの<a href="http://www.gigabyte.jp/products/product-page.aspx?pid=4600">GA-Z87N-WIFI</a>を購入しました。</p>

<h2>DRAM</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08105.JPG" alt="" />
Xeon向けチップセットを載せたマザーボードを選んでいれば、ECC付きのメモリで長期運用時の信頼性を高めることができるのですが、上記の通り、Z87チップセットを載せたマザーボードを選択したため、特にECCに関してはこだわる必要がありません。
Z87チップセットはDDR3-1333/1600対応のため、たくさんの仮想マシンを支えられるよう、DDR3-1600のもので、16GB（8GB x ２枚）のものを探しました。
相性問題などは特に気にせず、財布と相談しながら予算に合うものを選んだ結果、Kingstonの<a href="http://www.amazon.co.jp/gp/product/B008KRZYH4/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B008KRZYH4&amp;linkCode=as2&amp;tag=mzyy-22">KHX16C10B1K2/16X</a>の価格が暴落していたのですぐさま購入しました。</p>

<h2>Storage</h2>

<p>なんでもよかったです。とにかく速いものであれば。
これも、お財布と相談しながらということで、適当に探してSanDiskの<a href="http://www.amazon.co.jp/gp/product/B00BWR2QZC/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00BWR2QZC&amp;linkCode=as2&amp;tag=mzyy-22">SanDisk SSD UltraPlus 128GB</a>にしました。</p>

<h2>その他パーツ</h2>

<p>増設ということで、旧マシンから流用できるパーツがありません。あまっているパーツは7mm厚120mmファンくらいで、必要なものがいくつもありました。</p>

<p>CPUはバルクで購入したのでファンがついておらず、CPUファンを購入する必要がありました。ケースの高さ制限より、これもまた選択肢が少なく、某所のレビューでよく冷えるとあったので、Scytheの<a href="http://www.amazon.co.jp/gp/product/B004W5KS0G/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B004W5KS0G&amp;linkCode=as2&amp;tag=mzyy-22">KOZUTI</a>にしました。</p>

<p>CPUファンとの熱伝導のためのグリスは、ファン付属のものでもよかったのですが、どうしても別で買いたかったのでAINEXの<a href="http://www.amazon.co.jp/gp/product/B000BLBHTQ/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000BLBHTQ&amp;linkCode=as2&amp;tag=mzyy-22">シルバーグリス</a>を購入しました。よく冷えそうなので。</p>

<p>あとは、2.5インチSSDを3.5インチに変える、<a href="http://www.amazon.co.jp/gp/product/B0088QXTK6/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B0088QXTK6&amp;linkCode=as2&amp;tag=mzyy-22">センチュリー 裸族のインナー</a>や、ケースの狂った配線とつなぐための<a href="http://www.amazon.co.jp/gp/product/B000FHQACA/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000FHQACA&amp;linkCode=as2&amp;tag=mzyy-22">アイネックス ピン配列交換ケーブル</a>や<a href="http://www.amazon.co.jp/gp/product/B000Y1YUKG/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000Y1YUKG&amp;linkCode=as2&amp;tag=mzyy-22">アイネックス コネクタ簡単脱着ケーブル</a>を購入しました。</p>

<h1>組み立て</h1>

<h2>ケースの整備</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08139.JPG" alt="" />
普通のPCケースならば、パーツをケースに組み込むだけですが、自宅に転がっているというケースがくせ者で、数年前のAcer Aspire H340のものなのです。
このケース、Mini-ITXサイズのマザーボードが組み込まれていたので、一見どのマザーボードでも使えるかと思ったら大間違い。フロントパネルのボタンは効かないわSATAは認識しないわで問題ばかり。このケースを市販されているMini-ITXマザーボードで活用しようと思う方はたくさん居るようで、ウェブに情報はたくさんあります。
今回は、<a href="http://z.apps.atjp.jp/memo/h340.html">http://z.apps.atjp.jp/memo/h340.html</a>を参考にさせていただき、ケースを利用できる状態にしました。</p>

<h2>パーツ組み込み</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08158.JPG" alt="" /></p>

<p>やっと普通のPCケースとして使える状態になったので、組み込みます。
ここからの手順は、ご存知の方多いと思いますので割愛します。</p>

<h2>設置</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/Servers.jpg" alt="" />
ちゃんとケースに組み込んで所定の位置に設置しました。
ほかのサーバーとおなじ見た目なのでわかりづらいですが、右上のが今回新設したサーバーとなります。
それらに関してはおいおい紹介していきますのでしばしおまちを。</p>

<h1>費用</h1>

<p>気になるサーバー構築費用です（すべて税込み）。</p>

<table>
<thead>
<tr>
<th>パーツ</th>
<th style="text-align:right;">購入価格(円)</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU    </td>
<td style="text-align:right;">26800</td>
</tr>
<tr>
<td>MB     </td>
<td style="text-align:right;"> 8800</td>
</tr>
<tr>
<td>DRAM   </td>
<td style="text-align:right;">11151</td>
</tr>
<tr>
<td>SSD    </td>
<td style="text-align:right;"> 9790</td>
</tr>
<tr>
<td>Fan    </td>
<td style="text-align:right;"> 2880</td>
</tr>
<tr>
<td>Grease </td>
<td style="text-align:right;"> 1140</td>
</tr>
<tr>
<td>Mounter</td>
<td style="text-align:right;">  891</td>
</tr>
<tr>
<td>Cable  </td>
<td style="text-align:right;">  827</td>
</tr>
</tbody>
</table>


<p>計62,279円で、このサーバーを構築できました。目標としていた8万円を大きく下回り、金銭的にストレージ増設の余地があります。
このサーバーを生かして、今後いろいろと実験していくような記事を書く予定ですので、こう御期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsでダウンロードしながらGunzipしてmd5の計算しながら保存する奴]]></title>
    <link href="http://mzyy94.com/blog/2014/02/25/dl-gunzip-with-nodejs/"/>
    <updated>2014-02-25T22:18:21+09:00</updated>
    <id>http://mzyy94.com/blog/2014/02/25/dl-gunzip-with-nodejs</id>
    <content type="html"><![CDATA[<p><a href="http://nodejs.org/">Node.js</a>です。
Lempel-Ziv符号化で圧縮されたファイル(.gz)のダウンロードをしようとしたときの話です。
ブラウザからダウンロードすると、拡張子gzで保存され、それを解凍することで必要なデータを得ることができるのですが、圧縮されたファイルは解凍したあとでは不要です。
このような不要ファイルを保存することなく、目的のファイルが欲しいような状況になったので、いろいろと調べて解決しました。</p>

<!-- more -->


<p>Lempel-Ziv符号化で圧縮されたファイルは、かの有名な<a href="http://www.zlib.net/">zlib</a>によって扱うことができます。
Node.jsの標準モジュールには、zlibがあり、require()で取り込むことでzlibを利用することができます。
標準モジュールであるため、APIに関する説明が<a href="http://nodejs.org/api/zlib.html">Node.js公式ドキュメント</a>にあるのですが、よく使い方がわからなかったので、いろいろと試行錯誤してみました。</p>

<p>結果、zlibモジュールを利用してストリームを扱うオブジェクトを作成し、パイプでつなげることで、前途の目的である、圧縮されたアーカイブファイルを保存することなく、目的のファイルを保存することができました。</p>

<p>以下、ソースコードになります。
引数に拡張子gzのファイルのURLを渡し実行することで、解凍されたファイルを保存できます。</p>

<script src="https://gist.github.com/mzyy94/9209459.js"></script>


<p>20行目の<code>res.pipe(gunzip).pipe(output);</code>にてhttp.getで得られたストリームを<code>zlib.createGunzip()</code>で作成したgunzipオブジェクトにパイプで渡し、処理されたものを、<code>fs.createWriteStream()</code>で作成されたoutputオブジェクトにさらにパイプすることで不要なファイルを保存することなく、ダウンロードしながら解凍し、保存しています。</p>

<p>保存時に、gunzipオブジェクトの&#8217;data&#8217;イベントを拾って、crypto標準モジュールでmd5の値を計算させています。
ダウンロードのときはmd5チェックしたいですし。</p>

<p>Node.jsのzlibモジュールに関して、あまり実例がなく、せっかくなので記事にしました。
ご参考になれば幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode形式に変換するPopClipのExtensionを作りたかっただけだったのに]]></title>
    <link href="http://mzyy94.com/blog/2014/02/21/unicode-popclip-extension/"/>
    <updated>2014-02-21T17:46:27+09:00</updated>
    <id>http://mzyy94.com/blog/2014/02/21/unicode-popclip-extension</id>
    <content type="html"><![CDATA[<p>いろいろな趣味がよく合う<a href="http://hitoriblog.com/">ひとりぶろぐ</a>さんの記事を読んでいたときのこと。どうやら<a href="https://itunes.apple.com/jp/app/popclip/id445189367?mt=12&amp;uo=4&amp;at=1l3v4mQ">PopClip</a>が便利らしいことを<a href="http://hitoriblog.com/?p=22987">発見</a>したので、だいぶ昔に買ったっきりで使っていなかったPopClipを活用してみることにしました。</p>

<h1>PopClipとは</h1>

<p>PopClipに関しては、<a href="http://hitoriblog.com/?p=22987">ひとりぶろぐさんの記事</a>にて紹介されているので省略します。知っているという前提で以下、話を進めます。</p>

<h1>Unicodeエンコード</h1>

<p>最近なにかとマイブームなUnicode。CSSのcontentプロパティで記号を表示したり、JavaScriptで難読化したりなど、よく使う割には毎回ブラウザ上でコンソールを拡げていました。この手間を解決する手段として、せっかくなのでPopClipの拡張機能を利用しようと思います。</p>

<!-- more -->


<h1>PopClip拡張機能</h1>

<p>PopClipが人気なのは、iOSライクなコピー＆ペーストができるからではなく、PopClip拡張機能で選択テキストなどに対する便利な機能が実現できるかららしい[<em>要出典</em>]。
PopClip拡張機能を作るための手順に関しては、さっきからよく登場する<a href="http://hitoriblog.com/?p=22987">ひとりぶろぐさんの記事</a>にて説明があるので、読んで作っていきます。</p>

<h2>UnicodeEncode.popclipext</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/21/UnicodeEncode_popclipext.gif" alt="UnicodeEncode_popclipext" /></p>

<p>そこまで難しく考えることなく、サンプルのURLエンコードの拡張機能をちょちょっと編集して、\uXXXXの形のUnicode形式を出力するプログラムをかきました。UTF-8→Unicodeの変換は、<a href="http://gihyo.jp/admin/serial/01/charcode/0004">第4回 UTF-8の冗長なエンコード：本当は怖い文字コードの話｜gihyo.jp … 技術評論社</a>を参考にしました（はせがわさんの警告無視）。</p>

<p>こちらになります。<a href="https://github.com/mzyy94/UnicodeEncode.popclipext">mzyy94/UnicodeEncode.popclipext</a></p>

<p><strong>作るの意外と大変だった</strong></p>

<p>さらっとサンプルのソースコードを読んだ限り、簡単にできるものだとおもったのですが、いろいろと問題がありました。</p>

<h3>LANG環境変数問題</h3>

<p>一つ目の問題は、LANG環境変数。
おなじみシステムのローケルを設定する環境変数ですが、日本語を扱うときのこのロケールがいろいろと厄介なものでした。
OS X Mavericksで日本語環境でターミナルを起動する際は、標準でLANG=ja_JP.UTF-8に設定されています。この状態で、日本語を扱うときには特に問題ないのですが、LANG=Cのときだと厄介なことになることがあるのです。
その例が以下の画像。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/21/problem1.gif" alt="Problem1" /></p>

<p>&#8220;あ&#8221;をUnicode表記にすると\u0342になるはずですが、この例では出力がUTF-8バイトコードの&#8221;あ&#8221;であるe3 81 82がそれぞれ個々の文字としてUnicodeにエンコードされています。
PopClip拡張機能は、起動時にLANG環境変数を引き継ぐことなく、未指定の状態でスクリプトが実行されているようで、デフォルトであるLANG=Cでの処理となってしまっているためです。bashで実装したのが大きな原因であるようですが、どうも文字列を文字ごとに分割するときにLANG=Cではマルチバイト文字をASCII文字として扱ってしまっているのが原因らしいです。</p>

<p>解決策として、<code>export LANG=en_US.UTF-8</code>と、UTF-8ロケールに設定しました。</p>

<h3>濁点文字分離問題</h3>

<p>まず、以下の例をみてください。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/21/problem2.gif" alt="Problem2" /></p>

<p>三人ともおなじ５文字の名前なのに、鹿目さんだけがUnicode化した際に６文字になってしまっています。
これは、鹿目さんが悪いのではなく、OS Xの挙動が悪いのです。</p>

<p>この問題は、OS X特有のもので、OS X上でのUTF-8の文字コードの取り扱いに起因しています。
OS XではUTF-8を扱う文字コードが２種存在します。<code>iconv -l | grep UTF-8</code>とすれば確認できますが、一つは純粋なUTF-8で、もう一つはUTF-8-MACなるものです。このUTF-8-MACは、OS XのファイルシステムによってUTF-8を扱うためのものであるらしく<a href="http://macwiki.sourceforge.jp/wiki/index.php/UTF-8-MAC">1</a>、濁点のある仮名文字などで正規分解が行われ、今回の例では「鹿」「目」「ま」「と」「 ゙」「か」といった具合にUTF-8の文字列がPopClip拡張機能にわたされてしまったようです。この問題は、PopClip拡張機能にせずにシェルスクリプトをそのままのかたちで実行し、テストしたときには再現されなかったので、発見が遅れ、解決に時間がかかってしまいました。</p>

<p>この問題は<code>iconv -f UTF-8-MAC -t UTF-8</code>とすることで解決しました。</p>

<h1>PopClip拡張機能を作りたかっただけだったのに</h1>

<p>PopClipがロケール環境変数を引き継いでいなかったおかげでLANG=CでのUTF-8の文字の扱いがわかり、PopClipがUTF-8-MACとしてテキストを渡してくれていたおかげでOS XでのUTF-8の取り扱いに関して知識を得ることができて、結果的にいい経験になりました。ありがとう、PopClip。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Honda 3DのサイトがFlashだったときの症例]]></title>
    <link href="http://mzyy94.com/blog/2014/02/13/honda-3d-webgl/"/>
    <updated>2014-02-13T19:03:54+09:00</updated>
    <id>http://mzyy94.com/blog/2014/02/13/honda-3d-webgl</id>
    <content type="html"><![CDATA[<p>RSSを消化してたときのこと。
<a href="http://japanese.engadget.com/2014/01/28/3d-nsx-concept-5/">ホンダが歴代コンセプトカーの3DデータをCCライセンスで公開、NSX Concept など全5種 (動画) - Engadget Japanese</a>
なる記事を見つけて、「クリエイティブコモンズで3Dモデル公開とはなかなかやるな。流行に乗っててよろしい。」と感心していました。</p>

<p>しかし、そんな関心も次のクリックで吹っ飛びました。</p>

<!-- more -->


<pre>
＿人人人人人人人＿
＞　衝撃のFlash　＜
￣Y^Y^Y^Y^Y^Y￣
</pre>


<p>流行に乗ってると微塵でも思ってしまったことを後悔。
3Dプリンタという流行を意識した3Dモデルの公開に使われたものが流行遅れのFlashであるという、なんとも言い難い悲しい状況を目の当たりにしてしまったのです。</p>

<p>この惨状を目にした60分後、手元にはこんなものが出来上がっていました。</p>

<h3><a href="http://mzyy94.com/HONDA-3D-WebGL-demo/">Honda 3D - WebGL Demo (Beta)</a></h3>

<p><span>※Chrome 33向けです。</span><br>
<span>※※RAMとCPU使用率と通信量を膨大に使うので開く際はご注意ください</span></p>

<p><a href="https://github.com/mzyy94/HONDA-3D-WebGL-demo">GitHub Repository</a></p>

<p>悲しみからか、手が勝手に動き<strong>Flashなし</strong>で模倣していました。</p>

<p>このれらのサイトを構成している技術に関して比較してみました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/13/comparison.png" alt="comparison" /></p>

<p>せっかくつくったので解説させてください。</p>

<h1>トップページ</h1>

<p>上：拙作デモサイト　下：本家サイト</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/13/demo-top.png" alt="demo" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/original-top.png" alt="original" /></p>

<p>メインページの全体像はほとんど違和感を感じさせない作りとなっています。
左右のパネルを選択すると本家と変わらないスライドアニメーションで次のパネルへ移り変わります。</p>

<p>このカルーセルはjQueryによるclass操作とCSS3のkey frame アニメーションを使っています。クリック時に左端のパネルのmarginを以下のように動かすことで滑らかなスライドアニメーションを疑似的に見せています。</p>

<p>CSS3の技術が詰まったパネルをもう少し詳しく見てみましょう。
テキストの上でもカーソル形状は本家のものと同じくデフォルトになるようにしてあります。
背景透過はbackground-colorをCSS3からのrgba値を用いており、サムネイルを円形にしてあるのもCSS3のborder-radiusを指定して実現しています。さらに、パネル上の美しいfontもCSS3によるWeb fontを利用しています。</p>

<p>背景動画はYouTubeのHTML5 videoでの埋め込みにしてあるというAnti-Flashの徹底ぶり。オプションを以下の通り指定してNo Flashにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;iframe id="bgmovie" width="1920" height="1080" src="http://www.youtube.com/embed/MJWzLm91Hmg?html5=1&playlist=kdOVr4Tqdoc&autoplay=1&disablekb=1&controls=0&showinfo=0&vq=hd1080&modestbranding=1&rel=0&loop=1" style="top: -374px;"&gt;&lt;/iframe&gt;</span></code></pre></td></tr></table></div></figure>


<h1>3D ビュー</h1>

<p>ここのシーンを見せるためにHondaはFlashを試用したというのは安易に想定できますが、せっかくなのでHTML5の技術を使って欲しかったです。
ということで、HTML5の新技術であるWebGLを利用してモデルを表示するようにしました。</p>

<p>WebGLの複雑なコードを書かずとも、数十行のコードで手軽にWebGLをつかえるライブラリはいくつか存在します。
今回は<a href="http://threejs.org/">three.js</a>とよばれるWebGLラッパーを利用しました。</p>

<p>WebGLで3Dモデルを表示するには、表示するための3Dデータが必要です。
現在、Honda-3d.comからダウンロードできるファイルは3Dプリンタ向けのSTL形式で、WebGL、加えてthree.jsでもそのままでは利用できるものではありません。
そこで、three.jsで扱える形式に変換する必要があります。
今回は3Dモデリング界では名高い<a href="http://www.blender.org/">Blender</a>を利用しました。</p>

<h2>3Dモデルデータを変換する</h2>

<p>BlenderでSTL形式をthree.jsで扱える形式に変換する方法はそこまで難しいことではありません。
Blenderは標準でSTL形式を扱えるので、three.jsで使えるよう、
three.jsに含まれるBlender用のAdd-onを導入すれば、three.jsで表示できる形式に変換する環境は整います。
このAdd-onはthree.jsをgitリポジトリからCloneした際に、一緒にダウンロードされています。</p>

<p>Add-onを導入するのは簡単で、必要なファイル群をBlenderのアプリケーションフォルダに入れてあげるだけです。
OS X上で、Blender@2.69とthree.js@r65を利用する場合は、</p>

<pre><code>[three.jsのClone先ディレクトリ]/utils/exporters/blender/2.65/scripts/addons
</code></pre>

<p>にある<code>io_mesh_threejs</code>ディレクトリを</p>

<pre><code>[アプリケーションフォルダ]/Blender.app/Contents/MacOS/2.69/scripts/addons
</code></pre>

<p>の中にコピーします。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-1.png" alt="blender" /></p>

<p>コピーし終わったらBlenderを起動し、File->User Preferences&#8230;で設定画面を開き、
Addonsタブにある検索ボックスでthreejsとして検索して出てくる項目をチェックし有効化します。
チェックし終わったら次回以降も反映されるよう、Save User Settingsをしておきます。
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-2.png" alt="blender" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-3.png" alt="blender" /></p>

<p>設定画面を閉じたらFile->Import->Stlでダウンロードしたファイルを開き、
起動時に作られていた不要なオブジェクトを削除し、File->Export->Three.jsでthree.js用の形式にして出力します。
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-4.png" alt="blender" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-5.png" alt="blender" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-6.png" alt="blender" /></p>

<h2>3Dモデルデータを表示する</h2>

<p>上：拙作デモサイト　下：本家サイト</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/13/demo-3dview.png" alt="demo" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/original-3dview.png" alt="original" /></p>

<p>表示はthree.jsの基本的な機能を使うだけで行っています。
基本的な方法は、
<a href="http://www.atmarkit.co.jp/ait/articles/1210/04/news142.html">Webグラフィックをハックする（5）：多彩な表現力のWebGLを扱いやすくする「Three.js」 (1/5) - ＠IT</a>
にて説明されています。
この説明を参考に、three.jsのファイルを読み込ませて表示させています。
ちゃんとマウスでぐりぐりできるようになっています。</p>

<p>各コードに関して説明したかったのですが、すでに結構な分量になっているので、気になる人は以下のGistにてご参照ください。</p>

<p><a href="https://gist.github.com/mzyy94/8974444">https://gist.github.com/mzyy94/8974444</a></p>

<p>以上、Anti-Flashをこじらせた人の症例でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qiで203Zを充電できるようにしてみた]]></title>
    <link href="http://mzyy94.com/blog/2014/02/04/qi-battery-203z/"/>
    <updated>2014-02-04T08:47:16+09:00</updated>
    <id>http://mzyy94.com/blog/2014/02/04/qi-battery-203z</id>
    <content type="html"><![CDATA[<p>Qiという無接点充電の<em>事実上</em>標準規格なものがありまして、それを利用したモバイルルータの充電をしてみましたという日記です。</p>

<p>デバイスをQiにて充電するには、Qi給電の機能をもとからもっているデバイスを購入するか、もしくは非対応デバイスをQi対応にさせるかの2択しかありません。</p>

<p>今回Qi対応にしたいデバイスはモバイルルータのSoftBank 203Zです。出先でMac/iPadその他機器でインターネットに接続するために利用しているものです。バッテリーは結構もつのですが、それでも毎日充電しなければ一日中使うような日には持ちません。あの小さな小さなmicorUSBに毎晩のように上下を間違えて刺すこと数十日。さすがにうっとうしくなってきたのでmicroUSBを使わず充電できる方法を探りました。</p>

<!-- more -->


<h1>無接点充電という何か</h1>

<p>数年前からQiというものの存在を知っており、研究のため、今年度初めて利用する機会を得ました。実際に使ってみたところ、これは調子いい。わざわざ充電器に刺すことなく、奥だけで充電できるのはすばらしいじゃないか。こんな感想を抱いた記憶があります。「欲しい。」ただそう思いました。</p>

<p>月日が経ち、203Zを接続する煩わしさが溜まりにたまったところでQiのことを思い出し、導入することにしました。</p>

<h2>Panasonic 無接点充電パッド</h2>

<p>Qiには無接点給電する充電器が必要なのです。そのQi充電器は数社から出ており、いろいろな機能・サイズなどがあります。
たくさんある充電器ですが、購入するときは特に迷いもなくPanasonic製のものを買いました。</p>

<p>迷いもなく<a href="http://www.amazon.co.jp/gp/product/B0051R4ECM/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B0051R4ECM&amp;linkCode=as2&amp;tag=mzyy940a-22">Panasonic 無接点充電パッド ChargePadチャージパッド ブラック QE-TM101-K</a>を選択したのは、以前研究に使っていたものと同機種で、実際に使い勝手がよいのを感じでいたものだったためです。
移動式コイルによって２台まで充電させることができ、置く場所を意識しなくてもいいという点が高ポイントでした。</p>

<h2>Qi ワイヤレス充電レシーバー microUSB版</h2>

<p>正式名称がわからないのですが、ようするに上記の無接点充電パッドからの宮殿を受けるレシーバーです。
203ZはmicroUSB type-B端子での充電なので、それに対応したものをAmazon.co.jpで探し、購入してみました。</p>

<p>薄型タイプのものはたくさん販売されているのですが、検索時点で安く一定の評価がある商品を選びました。
現在は購入できませんが、<a href="http://www.amazon.co.jp/gp/product/B00H7FJX7M/">こちらの商品</a>を購入しました。</p>

<h3>届いた</h3>

<p>注文した商品が届きました。
香港からの発送とあったので、２−３週間ほどかかるのではないかと予想をしてたところ、2014/1/14に注文して2014/1/30に到着と、約２週間かかっていました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/4/DSC08056.JPG" alt="届いた状態" /></p>

<p>結構簡素な梱包でAIR MAILとして届きました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/4/DSC08055.JPG" alt="img" /></p>

<p>封筒から出すとこのような箱が１点のみでした。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/4/DSC08012.JPG" alt="img" /></p>

<p>先ほどの箱の中身はこれまた充電パッド一点のみ。
簡素さが貫き通せてます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/4/DSC08013.JPG" alt="img" /></p>

<p>この充電パッドを背面パネルを外した203Zの充電端子に差し込み、裏蓋を閉じるだけで無接点充電環境は整いました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/4/DSC08073.JPG" alt="img" /></p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/4/DSC08081.JPG" alt="img" /></p>

<p>背面パネルを閉じたところ、端子の一部が若干飛び出してしまいましたが、問題はなさそうです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/4/DSC08086.JPG" alt="img" /></p>

<p>実際に充電してみたところ、ちゃんと充電できている様子でした。</p>

<p>が、それも毎日は続かず、５日充電を試したところ、そのうち２日は充電されていないということがありました。
寝る前に確実に充電ランプが点灯していることを確認しているので、充電開始後に充電がされなくなる状況が発生したようです。
となりに一緒において充電してあるiPhoneは満充電になっているので、パッドが充電されたと勘違いして給電が止められたのかもしれません。
せっかく快適な充電環境を構築したと思ったら、充電したつもりだけど充電されていない、といった余計な問題が増えてしまったので、もう取り外しました。</p>

<p>なんのためのレビューだったのか┐(´∀｀)┌ﾔﾚﾔﾚ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptの記号だけで'1'を作るコードゴルフ]]></title>
    <link href="http://mzyy94.com/blog/2014/01/22/javascript-one-codegolf/"/>
    <updated>2014-01-22T11:02:22+09:00</updated>
    <id>http://mzyy94.com/blog/2014/01/22/javascript-one-codegolf</id>
    <content type="html"><![CDATA[<p>CodeIQでお正月チャレンジをしていた時に遭遇した問題を解決するために、いろいろと試行錯誤したことがありました。</p>

<p>ある条件下で数値を作成しなければいけないという問題に直面したときのことです。
条件としては、以下のとおりになっていました。</p>

<p>入力欄の文字数：100文字以内</p>

<p>禁止文字：1 2 3 4 5 6 7 8 9 0 , + % ? : this eval function Function Array join split repeat &#8217; &#8221;</p>

<p>この条件下で数字の1を作成した結果は以下のとおりになりました。</p>

<!-- more -->


<h2>1</h2>

<h3>初期案 (11文字)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[].</span><span class="nx">push</span><span class="p">([])</span>
</span></code></pre></td></tr></table></div></figure>


<p>数字の１を作成するためにまず思いついたのがこれです。
Arrayオブジェクトのpushは返り値が要素数になることを利用して、空配列に空配列を追加して1を得ました。</p>

<p>まだまだこれは短縮できそうということで、考えを練っていたら次にこのようなものが思い浮かびました。</p>

<h3>改善案 (6文字)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">~~!!</span><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>６文字まで短縮することができました。
このコードは主に3つの要素から成り立っています。</p>

<h4>[]</h4>

<p>空配列です。
ここでは、実態のあるオブジェクトがほしいだけなので、{}でも大丈夫です。</p>

<h4>!</h4>

<p>否定演算子です。
今回は、配列として実態があるものに対して行っているので、![]ではfalseが返ってきます。
!![]とすることで、trueを得ることができます。</p>

<h4>~</h4>

<p>ビット反転演算子です。
!![]で返ってきたtrueをビット反転することによって、数値として認識させます。
~!![]は、すなわち~trueであり、すなわち~1なので、-2を返します。
~~!![]とすることで、ビット反転を打ち消し、1を返させることができます。</p>

<p>６文字ではまだまだ字数が多すぎると思い、ふと閃いたものが以下になります。</p>

<h3>最終案 (4文字)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">-~</span><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Arrayオブジェクトに対して、直接ビット演算をしてしまいます。
要素数ゼロのArrayオブジェクトは数値として扱った場合に、ゼロとなるのでそれを用いてゼロをビット反転してしまいます。
補数により0は-1となり、正負を反転させるために-(マイナス)を加えて1としました。</p>

<p>記号を使った1を生成する最短コードなんじゃないでしょうか。</p>

<h1>おまけ</h1>

<p>2と3も作ってみました。</p>

<h2>2</h2>

<h3>初期案 (10文字)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">-~</span><span class="p">[]</span><span class="o">&lt;&lt;-~</span><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>上で作成した1を用いてビットシフトしています。
1を倍にすることで2になるという単純なものです。</p>

<p>ここで、1を作成した時のことを考えていたら、もっと単純で短いものがありました。</p>

<h3>最終案 (6文字)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">-~!!</span><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>先ほどの1を作成する改善案を元に、符号を反転させただけのものです。</p>

<p>最短コードなんじゃないでしょうか。</p>

<h2>3</h2>

<h3>初期案 (11文字)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">-~!!</span><span class="p">[]</span><span class="o">|-~</span><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>1と2でビットの論理和を計算して3とします。</p>

<h3>最終案 (8文字)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">-~-~!!</span><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>2の最終案を元に、ビット反転して-3にし、それを-(マイナス)で符号反転して３を作りました。</p>

<p>これら2と3を作った方法を元にすれば4,5,6..も同様に作れてしまいます。</p>

<p>この方法をもとにCodeIQのお正月ダンジョンLv.3に挑んだコードがトップ画像になります。</p>

<p>以上、豆知識的なメモでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[debianでiscsi target/initiator動作させるメモ]]></title>
    <link href="http://mzyy94.com/blog/2014/01/09/iscsi-debian/"/>
    <updated>2014-01-09T13:45:08+09:00</updated>
    <id>http://mzyy94.com/blog/2014/01/09/iscsi-debian</id>
    <content type="html"><![CDATA[<p>Linux上でのiSCSIパケット収集のためにVirtual Boxで作成した、Debian 7.0.0にiSCSI initiatorとtargetを入れたときのメモを起こしておきます。</p>

<!-- more -->


<p>今回iSCSIパケットの収集をする必要があったので、Linux上で動くように導入しました。
iSCSIの説明はまた今度にするとして、簡単に用語を定義しておくと、
iSCSIターゲット
- iSCSIサーバー
iSCSIイニシエータ
- iSCSIクライアント</p>

<p>対象とするシステムは以下のとおりです。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">Initiator </th>
<th style="text-align:center;">     Target</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">Debian 7.0.0</td>
<td style="text-align:center;"> Debian 7.0.0</td>
</tr>
<tr>
<td style="text-align:center;">仮想1コアCPU</td>
<td style="text-align:center;">仮想1コアCPU</td>
</tr>
<tr>
<td style="text-align:center;">512MB RAM  </td>
<td style="text-align:center;"> 512MB RAM</td>
</tr>
<tr>
<td style="text-align:center;">10GB SSD   </td>
<td style="text-align:center;"> 10GB SSD</td>
</tr>
</tbody>
</table>


<p>全く同じシステムで、初期インストール時の設定はminimalです。（gccなどはおろか、sshdも入っていない状態）</p>

<p>iSCSIに関するパッケージは以下のとおり。targetはiscsitargetとiscsitarget-dkms、イニシエータはopen-iscsiとなっています。</p>

<p><code class="code">root@debian:~# aptitude search iscsi
p   iscsitarget                                            - iSCSI Enterprise Target userland tools
p   iscsitarget-dkms                                       - iSCSI Enterprise Target kernel module source - dkms version
p   libiscsi-bin                                           - iSCSI client shared library - utilities
p   libiscsi-dev                                           - iSCSI client shared library
p   libiscsi1                                              - iSCSI client shared library
p   open-iscsi                                             - High performance, transport independent iSCSI implementation</code></p>

<p>まずサーバーとなるターゲットのインストールから。
rootで<code>aptitude install iscsitarget iscsitarget-dkms</code>としてパッケージインストールして下記のとおりに設定し、iSCSIターゲットを有効にします。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">ファイルパス </th>
<th style="text-align:center;">   変更内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">/etc/default/iscsitarget </td>
<td style="text-align:center;"> ISCSITARGET_ENABLE=falseをtrueに</td>
</tr>
</tbody>
</table>


<p>そして、iSCSIとして提供するデバイスを設定します。
この設定ファイルは/etc/iet/ietd.confに追記して設定します。</p>

<p>iSCSIターゲットの設定書式は設定ファイルにもサンプルがありますが、最小限の記述は以下の様な形式になります。
ここではfileioタイプを用い、単一ファイルをあたかもSCSIデバイスとして利用する方法を取ります。</p>

<p><code class="code">Target iqn.yyyy-mm.&lt;reversed domain name&gt;[:identifier]
   Lun 0 Path=&lt;image file path&gt;,Type=fileio,ScsiId=&lt;id&gt;,ScsiSN=&lt;sn&gt;</code></p>

<p>各所で紹介されている記事にはScsiIDやScsiSNを指定していないものもありましたが、open-iscsi 2.0.873@Debian 7.0.0ではSCSIデバイスとして認識されないのでちゃんとつけておきましょう（これがわからず1時間くらい考えこんでた）。</p>

<p>Pathで指定するファイルは<code>dd if=/dev/zero of=/disk.img bs=1 count=0 seek=10G</code>などで適当につくってしまいましょう。
今回はこのように設定しました。</p>

<p><code class="code">Target iqn.2014-01.localhost:fileio.test
   Lun 0 Path=/root/disk.img,Type=fileio,ScsiId=test,ScsiSN=test</code></p>

<p>ここまででターゲットの設定は終わりなので、サービスを再起動します。</p>

<p><code class="code">root@debian:~# service iscsitarget restart
Removing iSCSI enterprise target devices: :.
Starting iSCSI enterprise target service:.
.</code></p>

<p>エラーに関しては多くは出力されないので、<code>dmesg | tail</code>で確認するなりした方がいいと思います。
正常に動作しているかどうかは<code>neststat -a | grep iscsi</code>や<code>lsof -i:3260</code>で状態をみて判断します。</p>

<p>繋げてみないことには動作確認は取れませんので、クライアントとしてのopen-iscsiをインストールします。
<code>aptitude install open-iscsi</code>として、iscsiイニシエータを導入します。</p>

<p>最低限の動作には設定は必要ないのでこのままコマンドを入力して接続していきます。
<code>dpkg -L open-iscsi</code>すると、いくつかiscsiで始まるコマンドがインストールされていますが、すべてを統合的に実行できるiscsiadmを利用します。</p>

<p>iscsiadmに関して詳しいことはmanを見るとして、今回繋げるためには以下のようにして簡単ログインしてしまいましょう。</p>

<p><code class="code">root@debian:~# iscsiadm -m discovery -t sendtargets -p 127.0.0.1 -l</code></p>

<p>オプションに関して詳しいことはmanをみてもらうとして、今回使ったオプションは次のような意味を持っています。</p>

<table>
<thead>
<tr>
<th>Option </th>
<th> Sense</th>
</tr>
</thead>
<tbody>
<tr>
<td>-m     </td>
<td> モード指定</td>
</tr>
<tr>
<td>discovery</td>
<td>iSCSIターゲット探索</td>
</tr>
<tr>
<td>-t     </td>
<td>タイプ指定</td>
</tr>
<tr>
<td>sendtargets</td>
<td>準iSCSIプロトコルを用いているターゲット探索</td>
</tr>
<tr>
<td>-p</td>
<td>ネットワークポータル指定</td>
</tr>
<tr>
<td>127.0.0.1</td>
<td>指定ネットワークアドレス</td>
</tr>
<tr>
<td>-l</td>
<td>ログイン</td>
</tr>
</tbody>
</table>


<p>これで接続し、ちゃんとSCSIデバイスとして認識できていればdmesgに以下のように出ます。</p>

<p><code class="code">[ 6484.501041] scsi3 : iSCSI Initiator over TCP/IP
[ 6484.764505] scsi 3:0:0:0: Direct-Access     IET      VIRTUAL-DISK     0    PQ: 0 ANSI: 4
[ 6484.765289] sd 3:0:0:0: [sdb] 2097152 512-byte logical blocks: (1.07 GB/1.00 GiB)
[ 6484.765325] sd 3:0:0:0: [sdb] Write Protect is off
[ 6484.765328] sd 3:0:0:0: [sdb] Mode Sense: 77 00 00 08
[ 6484.765389] sd 3:0:0:0: [sdb] Write cache: disabled, read cache: enabled, doesn't support DPO or FUA
[ 6484.766030]  sdb: unknown partition table
[ 6484.766303] sd 3:0:0:0: [sdb] Attached SCSI disk
[ 6484.766417] sd 3:0:0:0: Attached scsi generic sg2 type 0</code></p>

<p>こんなかんじの出力があれば、大体検討はつくと思いますが、/dev/sdbにiSCSIターゲットがSCSIデバイスとして認識されています。
このブロックデバイスをパーティショニングし、フォーマットし、マウントすることで実際にディスクとして利用することが出来ます。
こんなかんじです。</p>

<pre class="code">root@debian:~# fdisk /dev/sdb
Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel
Building a new DOS disklabel with disk identifier 0x86017ce7.
Changes will remain in memory only, until you decide to write them.
After that, of course, the previous content won't be recoverable.

Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)

Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p):
Using default response p
Partition number (1-4, default 1):
Using default value 1
First sector (2048-2097151, default 2048):
Using default value 2048
Last sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):
Using default value 2097151

Command (m for help): w
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
root@debian:~# mkfs -t ext4 /dev/sdb1
mke2fs 1.42.5 (29-Jul-2012)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
65536 inodes, 261888 blocks
13094 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376
 
Allocating group tables: done
Writing inode tables: done
Creating journal (4096 blocks): done
Writing superblocks and filesystem accounting information: done
 
root@debian:~# mkdir mount
root@debian:~# mount /dev/sdb1 mount/
root@debian:~# df -h
Filesystem                                              Size  Used Avail Use% Mounted on
rootfs                                                   19G 1022M   17G   6% /
udev                                                     10M     0   10M   0% /dev
tmpfs                                                    50M  240K   50M   1% /run
/dev/disk/by-uuid/f5aa3b2c-46ae-4b43-8191-1173de38f1d8   19G 1022M   17G   6% /
tmpfs                                                   5.0M     0  5.0M   0% /run/lock
tmpfs                                                   276M     0  276M   0% /run/shm
/dev/sdb1                                              1007M   18M  939M   2% /root/mount</pre>


<p>あとはマウントしたディレクトリに対して好き放題アクセスしたら、切り離しておきます。
<code class="code">root@debian:~# iscsiadm -m session -u</code>
オプションは、</p>

<table>
<thead>
<tr>
<th>Option </th>
<th> Sense</th>
</tr>
</thead>
<tbody>
<tr>
<td>-m     </td>
<td> モード指定</td>
</tr>
<tr>
<td>session</td>
<td>現在はられているセッションを指定</td>
</tr>
<tr>
<td>-u</td>
<td>ログアウト</td>
</tr>
</tbody>
</table>


<p>以上がまっさらな状態からiSCSIイニシエータ／ターゲットを導入して繋げるまで、です。
これらをインストールして動作するまでにしたログに関してはgistにあげてありますので、より詳しく見たい方などよければご参照ください。</p>

<p><a href="https://gist.github.com/mzyy94/8329470">https://gist.github.com/mzyy94/8329470</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS Xで再現されるBus error: 10の原因探ってみた]]></title>
    <link href="http://mzyy94.com/blog/2013/12/18/buserr-segfault-osx/"/>
    <updated>2013-12-18T12:48:12+09:00</updated>
    <id>http://mzyy94.com/blog/2013/12/18/buserr-segfault-osx</id>
    <content type="html"><![CDATA[<p>Cです。</p>

<p>アプリケーションの例外でおこるSegmetion fault: 11 はよく目にするのですが、
OS Xで時々現れるBus error: 10 が現れる条件が気になったのでごちゃごちゃいじって探してみました。</p>

<p>こういう情報はどこかインターネットにあるのだと思ったのですが、
<a href="http://togetter.com/li/253717">Segmentation FaultとBus Errorの違いとMac - Togetterまとめ</a>
などには納得のいく答えがなかったのが今回探してみた経緯となります。</p>

<p>結論からいうと、原因の特定はできませんでした。
様子を伺うまでの手順など、やったことの記録になります。</p>

<!-- more -->


<p>早速ですが、Segmentation faultとBus errorがどういう基準で区別されているか、明確ではありません。
たとえば、<code>char a[1]</code>としたときに<code>int i = 512341232; a[i] = '\0';</code>とするとSegmentation faultになったり、
<code>int i = 512341285; a[i] = '\0';</code>とするとBus errorになったりします。
さらに、この条件は起動時に割り当てられるメモリによって変わったりするので、原因を探るのはすこし大変です。</p>

<p>しかし、記憶クラスを変えると出される例外がある程度固定されるようです。</p>

<p>まず、以下のようなコードを書いて例外が発生した状態を調べました。</p>

<script src="https://gist.github.com/mzyy94/8016375.js"></script>


<p>結果は以下の通りとなりました。</p>

<script src="https://gist.github.com/mzyy94/8017126.js"></script>


<p>staticで宣言した変数に対してのアクセスでおこる例外はBus errorとなっています。</p>

<p>そこで、次のようなコードを利用し、デバッガで探ってみました。</p>

<script src="https://gist.github.com/mzyy94/8017103.js"></script>


<p>OS X Mavericsなので、デバッガはgdbではなくlldbを用いました。
0,1,2,3の引数を与えてデバッグした結果は以下の通りになりました。</p>

<script src="https://gist.github.com/mzyy94/8017373.js"></script>


<p>この結果から、引数をそれぞれ与えたときのエラーメッセージはどれもEXC_BAD_ACCESSで、
このメッセージの中のエラーコードが1もしくは2ということで分かれています。例外は、2がSIGBUSで1がSIGSEGVであるようです。</p>

<p>disassembleした結果が面白いことになっています。
処理が違うのがわかりますが、ここでアセンブラをみてみます。</p>

<script src="https://gist.github.com/mzyy94/8017712.js"></script>


<script src="https://gist.github.com/mzyy94/8017515.js"></script>


<p>アセンブラのコードでは、switch文中のcaseにあたるの部分が、上から順に</p>

<table>
<thead>
<tr>
<th>Cソース </th>
<th>アセンブラ</th>
</tr>
</thead>
<tbody>
<tr>
<td>case &#8216;0&#8217;</td>
<td>LBB0_5:</td>
</tr>
<tr>
<td>case &#8216;1&#8217;</td>
<td>LBB0_6:</td>
</tr>
<tr>
<td>case &#8216;2&#8217;</td>
<td>LBB0_7:</td>
</tr>
<tr>
<td>default </td>
<td>LBB0_8:</td>
</tr>
</tbody>
</table>


<p>と、対応しています。</p>

<p>このアセンブラを追いかけてみていると、値は次のように対応付けしているようです。</p>

<table>
<thead>
<tr>
<th>Cソース </th>
<th>アセンブラ</th>
</tr>
</thead>
<tbody>
<tr>
<td>c[]     </td>
<td> -17(%rbp)</td>
</tr>
<tr>
<td>s[]     </td>
<td> _main.s(%rip)</td>
</tr>
<tr>
<td>i       </td>
<td> -24(%rbp)</td>
</tr>
</tbody>
</table>


<p>LBB0_5と、LBB0_6をみてみると、
leaq(64bit Load Effective Address)で実効アドレスから変数s[]を%raxレジスタに格納しています。
その次にはmovslq(64bit Move Signed Long)で変数iを%rcxに格納しています。
この読み出した%raxレジスタの%rcx番目、すなわち、s[i]にアクセス際に例外が発生しています。</p>

<p>LBB0_7と、LBB0_8をでは、
leaqはせず、
movslqでレジスタ%raxに格納した変数iを-17(%rbp,%rax)としてアクセス、すなわちc[i]としてアクセスしたところで例外が発生しています。</p>

<p>さて、この二つ組の違いはleaqにありますが、leaq命令事態はforループ中のレジスタ操作効率化のためのものなので、特段問題を抱えているようすはありません。
また、アセンブラコードの下部にある.zerofillはstatic変数に対するものですが、この命令はゼロ埋めするというもので、static変数の初期値に0を代入するものなので、これも影響は与えていません。<a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/Assembler/040-Assembler_Directives/asm_directives.html" title="OS X ">1</a></p>

<p>ほかの部分に関してもアクセス例外が明確に違うところは見あたらず、根本的原因はわかりませんでした。</p>

<p>おしまい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[まどマギコンサート名古屋行ってきた]]></title>
    <link href="http://mzyy94.com/blog/2013/12/11/madomagi-concert-nagoya/"/>
    <updated>2013-12-11T23:50:50+09:00</updated>
    <id>http://mzyy94.com/blog/2013/12/11/madomagi-concert-nagoya</id>
    <content type="html"><![CDATA[<p>昨日に開催された魔法少女まどか☆マギカ オーケストラ・コンサートに行ってきまし。
このオーケストラコンサートは各所ですでに開演されており、今回行った名古屋公演で4回目とのことです。
少しの写真とコンサートを聴いた雑感をまとめておきます。</p>

<!-- more -->


<h2>会場</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2013/12/11/madocon-1.jpg" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/11/madocon-2.jpg" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/11/madocon-3.jpg" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/11/madocon-4.jpg" alt="alt" /></p>

<p>名古屋公演は<a href="http://www.aac.pref.aichi.jp/">愛知芸術文化センター</a>内の<a href="http://www.aac.pref.aichi.jp/gekijyo/">愛知芸術劇場</a>5階、<a href="http://www.aac.pref.aichi.jp/gekijyo/c_hole.html">コンサートホール</a>にて開催されました。
栄駅降りてすぐのところで、開場1時間前には辺りも暗くなり、隣接するオアシス２１とテレビ塔が綺麗に光り輝いていました。
このコンサートホールは県内でも有名なコンサートホールで、公式サイトにある、</p>

<blockquote><p>クラシック音楽に最適な豊かな響きを持った本格的なコンサート専用ホールです。</p>

<p>残響時間は満席時に約2.1秒となるよう設計されており、第一級の音響を提供します。</p>

<p>シューボックス型がもつ音響特性の良さと、アリーナ型がもつ舞台と客席の一体感を合わせもつ、バルコニー型を併用したアリーナ型のホールです。</p></blockquote>

<p>との謳い文句が誇大ではないというのが実際、ハープの調律の際に感じ取れました。</p>

<h2>客数</h2>

<p>事前に販売されていたチケットは完売で、予定されていた席はほぼ埋まっている様子でした。
空席はほぼなかったと見て取れました。</p>

<p>事前販売チケットがよく捌けたことで機転を利かせてか、まどか☆マギカ公式ツイッターアカウントは、</p>

<blockquote class="twitter-tweet" lang="ja"><p>本日開催の『劇場版　魔法少女まどか☆マギカ』オーケストラ・コンサート名古屋公演ですが、機材席の一部を解放しまして当日券を若干ではございますが販売することになりました。当日券は18時より販売致します。枚数が限られており、完売の場合はご了承ください。 <a href="https://twitter.com/search?q=%23madoka_magica&amp;src=hash">#madoka_magica</a></p>&mdash; 魔法少女まどか☆マギカ (@madoka_magica) <a href="https://twitter.com/madoka_magica/statuses/410683990618566656">2013, 12月 11</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とつぶやき、急遽当日券を用意してくださっていました。</p>

<h2>客層</h2>

<p>中学生らしき制服を着た男の子からおばあちゃん世代の方まで幅広い層の客が集まっている印象でした。
この手のイベントでは男性が多いという勝手な想像があったのですが、
辺りを見渡してみると、男女比ほぼ半々のようですごい幅広い客層が集まっていると感じました。</p>

<p>特に珍しいと思ったのが、親子連れで来ている客が数組いたことです。
アニメだからというこだわりを持たず、オーケストラ・コンサートを純粋に聴きに来ている方も多いのではという雑感をいだきました。</p>

<h2>物販</h2>

<p>会場ではまどか☆マギカ関連グッズの販売をしていました。</p>

<p>ローソンHMV関連グッズが多い中、コンサート限定パンフレットの販売もしておりました。
このパンフレットを多くの人が求め、物販には行列ができていました。
人だかりが見える写真は開場直後のロビーの様子で、左側の壁に沿って並んでいるのが物販を求める人達の列です。</p>

<p>せっかくなのでパンフレットと、会場入りする前の水分補給として十六茶を購入しました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2013/12/11/madocon-5.jpg" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/11/madocon-6.jpg" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/11/madocon-7.jpg" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/11/madocon-8.jpg" alt="alt" /></p>

<h2>ホール内</h2>

<p>名古屋公演の特別演出として、他の会場にはない【スクリーン・コンサート形式】という演出をすると<a href="http://www.aim-vil.com/sponsor/madoka-concert/12-11-%E5%90%8D%E5%8F%A4%E5%B1%8B%E5%85%AC%E6%BC%94/">公式サイト</a>に記載がありました。
説明では、</p>

<blockquote><p>オーケストラの生演奏＋名場面をスクリーンに投影（静止画）！
目と耳でお楽しみいただける公演形式です。</p></blockquote>

<p>とありました。
ステージ中央上空に設置されているスクリーンがこの演出に使われるものでした。</p>

<p>１階席の最後部にはマイクロフォンが設置されていました。
全公演終了後にCD化して発売でもするのでしょうか？</p>

<p>開演前にすでに、<a href="http://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%BC%E3%83%97">ハープ</a>や<a href="http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%83%9E%E3%82%B7%E3%83%BC%E3%83%B3">ウィンドマシン</a>などのいくつか大きな楽器が設置されていました。</p>

<p>奏者の方が演奏前に舞台風景に関して写真付きでつぶやいておられました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>まどか☆マギカオーケストラの名古屋公演。いよいよ今日の夜です。&#10;とっても素晴らしい響きのホールですよ！ <a href="http://t.co/qeL6D8Jgak">pic.twitter.com/qeL6D8Jgak</a></p>&mdash; 待山 一生 (@machiyamaissei) <a href="https://twitter.com/machiyamaissei/statuses/410479386731618304">2013, 12月 10</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet" lang="ja"><p>朝からパーカッションパートの方々と優雅な朝食済ませて、ホール入り。&#10;大好きなアニメの演奏を、素晴らしいホールや素敵なオーケストラ、指揮者、そして楽しい仲間と出来るって、それはとっても嬉しいなって。 <a href="http://t.co/3FEE0zlhGX">pic.twitter.com/3FEE0zlhGX</a></p>&mdash; 待山 一生 (@machiyamaissei) <a href="https://twitter.com/machiyamaissei/statuses/410582767705944064">2013, 12月 11</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet" lang="ja"><p>まもなく、魔法少女まどか☆マギカのオーケストラコンサート名古屋公演です。視覚と聴覚の両方で、魔法少女たちの物語を感じてください。<a href="https://twitter.com/search?q=%23madoka_magica&amp;src=hash">#madoka_magica</a> <a href="http://t.co/m2sZlhFQL4">pic.twitter.com/m2sZlhFQL4</a></p>&mdash; 待山 一生 (@machiyamaissei) <a href="https://twitter.com/machiyamaissei/statuses/410691793655578625">2013, 12月 11</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>演奏</h2>

<p>この名古屋公演は19:00開演で、開演５分前には鈴が鳴り始まる旨を合図していました。
その合図の後、暁美ほむら役の斎藤千和さんが場内アナウンスで注意事項等の連絡をしていました。
公式サイトにあるよう、当日は事前集力での出演だということなので録音のアナウンスのようです。</p>

<p>曲目は<a href="http://www.aim-vil.com/sponsor/madoka-concert/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0/">公式サイトのコンサート・プログラム</a>に載っています。
このページの最後にも引用して載せておきました。</p>

<p>アナウンスが終わり、奏者と識者が入場しました。
壮大な拍手で迎えられ、静かになった後、演奏が始まりました。</p>

<p>コーラスと共にSis puella magica!(通称：営業のテーマ)が奏でられ、暁美ほむらさんのナレーションがありました。
この曲はコンサートの序曲だったようで、次から本編が始まると暁美ほむらさんはおっしゃっていました。</p>

<p>本編が始まってからは感動の嵐でした。
オーケストラ用にアレンジされた生演奏の曲はどれも美しく、聴いていて心地よかったです。
劇場版のストーリー順を意識しながら演奏順が組まれており、物語の流れを感じながら聴き入っていました。
さらには、名古屋公演だけの特別演出である【スクリーン・コンサート形式】によって物語の場面場面が投映され、
曲のシーンを鮮明に意識できたので、楽曲とストーリーとの関連を聴き取りながら感じられました。
他の公演ではキャストの方が出演されていたので、この名古屋公演のスクリーン・コンサート形式には賛否両論ありましたが、
実際に体験してみると、とてもよい環境で聴けたので十分満足できました。</p>

<p>演奏に関しての感想は、全体的には個々の楽器の音色をオーケストラ用にしっかりと編成してあり、とくにバイオリンやフルートが目立つように聴こえました。
ただ、席の都合かスピーカーからでる電子楽器の音が大きく、コーラスとともに奏でられる曲は声が届きづらかったです。
しかし、コーラスや小さい音色を出す楽器と共演せず、ベースギター・エレキギターが弾ける曲はとても響いてよく聴こえました。</p>

<p>奏でられたすべての曲に感想を書いていても長くだらだらと続いていくだけなので、特に印象に残った曲をピックアップして感想を書いていきます。</p>

<h4>a human bullet</h4>

<p>典型的なエレキギターやドラムが響きわたっていて元気になる曲でした。</p>

<h4>Confessio</h4>

<p>トーンチャイムによる柔らかな音色と鍵盤打楽器によるメロディーに安らぎを感じる曲でした。</p>

<h4>Witch world #2</h4>

<p>二人のしっかりとしたコーラスが曲の注目を寄せ付け、それと強調して奏でられる楽器の音色とがとてもバランスよく、聴き応えがありました。</p>

<h4>she is a witch</h4>

<p>Which world #2に続いて演奏されたのがこの曲。男性コーラス人も参加した全体のコーラスが他の楽曲とは比べ物にならないほどの迫力あり、テンポも軽快で前半の〆として、後半の演奏に期待させる終わり方でした。</p>

<h4>Symposium magarum</h4>

<p>劇中でもオーケストラとして演奏されるシーンで登場した曲なので、実際にオーケストラコンサートで演奏されると、もうそれは涙が出てもおかしくない感動がえられました。</p>

<h4>mother and daughter</h4>

<p>とてもきれいでしなやかな演奏でした。ピアノソロで奏でる曲はいくつかあったのですが、これは映像とともに劇中のシーンの感動をさらに思い起こさせる演奏であったため、特に心に残っています。</p>

<p>前半後半すべての曲がおわり、指揮者が降壇したとき、
演奏中は曲間に拍手で感動を表すことができなかったからか、会場からまさに言葉通り壮大な拍手が贈られました。</p>

<p>プログラムが終了し、指揮者が舞台袖にはけたと思うと、バイオリニストとピアニストが立ち上がり、スポットライトを浴びました。
場内全員がいまから何が起こるのか静かに待っていると、ここであの名曲が奏でられました。
<a href="http://upload.wikimedia.org/wikipedia/commons/a/ab/Rappold_and_Spalding_-_Ave_Maria_%28Bach%2C_Gounod%29.ogg">グノーのアヴェ・マリア</a>です。
思わず泣いてしまいそうでした。</p>

<p>これが終わると指揮者が戻り、アンコール曲として、for the next episodeが流れました。
これもまたフルートが綺麗に鳴り響いており、また、最後の曲となると思うと涙が流れてきました。</p>

<p>最後に指揮者の挨拶があり、「みなさんでMagiaを楽しみましょう」とおっしゃり、会場全体が手拍子をして盛り上がり公演は終了しました。</p>

<p>会場は感動にあふれ、奏者全員が舞台から見えなくなるまで今日一番の拍手が鳴り響き、今日の公演はすべて終了しました。</p>

<p>公演終了後、主催会社のツイッターでは場内の様子がつぶやかれていました。</p>

<blockquote class="twitter-tweet" lang="en"><p>名古屋公演は無事終了しました！ホールからの撤収も完了しました。ご来場下さった全てのお客様に感謝申し上げます！&#10;ありがとうございました！！ <a href="http://t.co/EoFnAmimi2">pic.twitter.com/EoFnAmimi2</a></p>&mdash; 株式会社アイムビレッジ (@AimVil_MusicDiv) <a href="https://twitter.com/AimVil_MusicDiv/statuses/410771901640749056">December 11, 2013</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>以上、劇場版 魔法少女まどか☆マギカ オーケストラ・コンサートに行ってきた感想でした。</p>

<h3>コンサート・プログラム</h3>

<p>引用元：<a href="http://www.aim-vil.com/sponsor/madoka-concert/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0/">AIM VILLAGE 劇場版魔法少女まどか☆マギカ オーケストラ・コンサート コンサート・プログラム</a></p>

<ol>
<li>Sis puella magica! <a href="https://itunes.apple.com/jp/album/sis-puella-magica!/id575591707?i=575591878&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Terror adhaerens <a href="https://itunes.apple.com/jp/album/terror-adhaerens/id575591707?i=575591889&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Salve, terrae magicae <a href="https://itunes.apple.com/jp/album/salve-terrae-magicae/id575591707?i=575591879&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>ルミナス <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Postmeridie <a href="https://itunes.apple.com/jp/album/postmeridie/id575591707?i=575591885&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Puella in somnio <a href="https://itunes.apple.com/jp/album/puella-in-somnio/id575591707?i=575591886&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Desiderium <a href="https://itunes.apple.com/jp/album/desiderium/id575591707?i=575591883&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>未来 <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Credens justitiam <a href="https://itunes.apple.com/jp/album/credens-justitiam/id575591707?i=575591881&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Venari strigas <a href="https://itunes.apple.com/jp/album/venari-strigas/id575674580?i=575675032&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Clementia <a href="https://itunes.apple.com/jp/album/clementia/id575591707?i=575591882&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>warning #2 <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Agmen clientum <a href="https://itunes.apple.com/jp/album/agmen-clientum/id575674580?i=575675031&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Amicae carae meae <a href="https://itunes.apple.com/jp/album/amicae-carae-meae/id575674580?i=575675035&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>wo ist die Käse? <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Signum malum <a href="https://itunes.apple.com/jp/album/signum-malum/id575674580?i=575675034&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Incertus <a href="https://itunes.apple.com/jp/album/incertus/id575674580?i=575675036&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Serena ira <a href="https://itunes.apple.com/jp/album/serena-ira/id575674580?i=575675038&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Decretum <a href="https://itunes.apple.com/jp/album/decretum/id575674580?i=575675030&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Anima mala <a href="https://itunes.apple.com/jp/album/anima-mala/id575674580?i=575675039&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>a human bullet <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Inevitabilis <a href="https://itunes.apple.com/jp/album/inevitabilis/id575674580?i=575675037&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>fateful #2 <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Confessio <a href="https://itunes.apple.com/jp/album/confessio/id576314620?i=576314710&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>witch world #2 <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>she is a witch <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Fateful #4 <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Symposium magarum <a href="https://itunes.apple.com/jp/album/symposium-magarum/id576314620?i=576314712&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>I miss you <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Numquam vincar <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>magia [quattro] <a href="https://itunes.apple.com/jp/album/magia-quattro/id573784184?i=573784188&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>コネクト <a href="https://itunes.apple.com/jp/album/konekuto/id570085121?i=570085122&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>mother and daughter <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Surgam identidem <a href="https://itunes.apple.com/jp/album/surgam-identidem/id576314620?i=576314709&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
<li>Sagitta luminis <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>her wings <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>rebirth <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Taenia memoriae <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>Pergo pugnare  <a href=""><i class="glyphicon glyphicon-music"></i></a></li>
<li>ひかりふる <a href="https://itunes.apple.com/jp/album/hikarifuru/id573784184?i=573784186&amp;uo=4&amp;at=1l3v4mQ"><i class="glyphicon glyphicon-music"></i></a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAS4FreeでTime Machineの設定するメモ]]></title>
    <link href="http://mzyy94.com/blog/2013/12/10/timemachine-with-nas4free/"/>
    <updated>2013-12-10T12:58:47+09:00</updated>
    <id>http://mzyy94.com/blog/2013/12/10/timemachine-with-nas4free</id>
    <content type="html"><![CDATA[<p>Mavericksの登場で手元のMacBook Airをクリーンインストールしました。
その際、バックアップから復元するような手段は取らず、必要なデータのみを移して環境を再構築しました。
というのも、いままではTime Machineでバックアップを取っていなかったがために復元する手段がなかったのです。</p>

<p>次のバージョンでもクリーンインストールする予定ではありますが、突然のデータ消失に備えてTime Machineでの定期バックアップをするようにしました。</p>

<p>Time Machineのバックアップ先としては主に利用されるのは外付けドライブやTime Capsuleなどいろいろなバックアップ先があります。
しかし、MacBook Airをポータブル端末として利用している身としては、バックアップのたびにケーブルを抜き差しするのは効率を落とすだけでなく、バックアップ中は移動ができなくなってしまうため、候補から外しました。</p>

<p>ケーブルレスでTime Machineの機能を使う方法としては、無線LAN経由でネットワークストレージにバックアップする方法に限られてきてしまいます。
Time Machineのバックアップ用ネットワークストレージとして、Appleからは<a href="http://store.apple.com/jp/product/ME177/airmac-time-capsule-2tb">AirMac Time Capsule</a>なるものが発売されていますが、これが如何せんお高い。
主な機能としてのTime MachineのバックアップとIEEE802.11ac対応無線LANルータの２つを備えた2TBのもので29,800円するという。
もっと多機能で安価なものを自分で構成したいという欲が湧いてきました。</p>

<!-- more -->


<p>前置きが長くなりましたが、ここからが本題です。
NASを建ててTime Machineのバックアップ先にするというお仕事になります。</p>

<p>まず、NASを立てるところから始めます。既成品のNASはいじりがいがいがないので却下しました。
<strong>たまたま</strong>自宅にAcer Aspire H340なるサーバー用のマシンが転がっていたのでこれを流用します。
ストレージには<a href="http://www.amazon.co.jp/gp/product/B009QWUF6M/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B009QWUF6M&amp;linkCode=as2&amp;tag=mzyy940f-22">WD Green 3.5inch 2.0TB</a>を利用します。</p>

<p>ハードウェアが準備出来たら次はソフトウェアです。NAS向けのOSはいくつか存在しています。</p>

<ul>
<li><a href="http://freenas.org/">FreeNAS</a></li>
<li><a href="http://www.nas4free.org/">NAS4Free</a></li>
<li><a href="http://openmediavault.org/">OpenMediaVault</a></li>
<li><a href="http://www.openfiler.com/">Openfiler</a></li>
<li><a href="http://cryptonas.org/">CryptoNAS</a></li>
</ul>


<p>どれも得意な機能を持っており、その特徴と利用したい機能が一致したものを利用すればいいのですが、今回用意したH340のマシンは256MBのオンボードフラッシュストレージを搭載しているので、その256MBに収まるものに限定することにしました。
今回リストアップしたなかでは、NAS4Freeが機能的にもよく、256MBにも収まるものでしたのでこれを選択しました。</p>

<h2>NAS4Freeのインストール</h2>

<p>ダウンロードしたx8664のイメージをCDに焼き、ブートして起動してEmbeddedインストールするだけです。
このEmbeddedインストールではイメージファイルを書き込むもので、256MBに収まる用にできています。
FreeNASも同じくEmbededインストールをサポートしていますが、2GBの容量が必要とのことですので断念しました。</p>

<h2>起動</h2>

<p>ネットワークの設定をして起動し、<a href="http://nas4free.local">nas4free.local</a>にアクセスします。</p>

<h2>設定</h2>

<h3>ディスクの設定</h3>

<p>NAS4Freeが起動したら</p>

<ol>
<li>Disk->Managementでディクスをオンラインにし、</li>
<li>Disk->Formatでフォーマットした後に、</li>
<li>Disk->Mount pointでマウントします。</li>
</ol>


<p>フォーマット形式はUFSにしました。
以前、FreeNAS用にZFSで作った際にpoolを破壊してしまってデータが吹っ飛んだ経験があるため、ZFSは避けましたが、
メモリが潤沢に搭載されているシステムであればraidzを利用してもいいかと思います。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2013/12/10/NAS4Free-1.png" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/10/NAS4Free-2.png" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/10/NAS4Free-3.png" alt="alt" /></p>

<h3>AFPの設定</h3>

<p>Services->AFPにて、</p>

<ol>
<li>SettingsタブをEnableにし、 Enable local user authentication. にチェックしてサービスを開始し、</li>
<li>Shareタブで、</li>
</ol>


<hr />

<ul>
<li>Name: 適当な名前</li>
<li>Comment: 適当なコメント</li>
<li>Path: 先ほどマウントしたマウントポイント以下の任意のパス</li>
<li>Share Character Set: UTF8</li>
<li>Allow: timecapsule</li>
<li>Read/Write Access: timecapsule</li>
<li>Automatic disk discovery: Enable</li>
<li>Automatic disk discovery mode: Time Machine</li>
</ul>


<hr />

<p>と、設定します。ほかはデフォルトのままにしました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2013/12/10/NAS4Free-4.png" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/10/NAS4Free-5.png" alt="alt" />
<img src="http://mzyy94.com/blog/resources/images/2013/12/10/NAS4Free-6.png" alt="alt" /></p>

<p>この設定で、同一ネットワークにつながったMacからTime Machineの設定を開くと以下のように、バックアップ先に設定できるようになっていると思います。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2013/12/10/NAS4Free-7.png" alt="Time Machineの設定画面" /></p>

<p>設定方法と、NASの紹介でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blogを建ててみた]]></title>
    <link href="http://mzyy94.com/blog/2013/12/07/create-new-blog/"/>
    <updated>2013-12-07T18:22:11+09:00</updated>
    <id>http://mzyy94.com/blog/2013/12/07/create-new-blog</id>
    <content type="html"><![CDATA[<p>いままで情報を発信する場として、確かなものが周りになかったので新年に向けて新しくブログを作成しました。
よろしくお願いします。</p>

<p>今回はサイトのホスティングとして、Github pagesを用いることにしました。Github pagesでブログを制作する方法に関しては、
<a href="http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/" title="OctopressでGitHub無料ブログ構築。sourceをBitbucket管理。簡単ガイド！ - 酒と泪とRubyとRailsと">こちら</a>とかで確認して下さい。</p>

<p>ブログのスタイリングのために、今回はBootstrapをベースに構成しました。BootstrapはOOCSSを謳っているものの、
オブジェクト指向特有のごちゃごちゃしたプロパティ名が好みではなかったので利用を控えていました。
ではなぜBootstrapを選んだかというと、単純にスタイルテンプレートがBootstrap向けだったためです。</p>

<!-- more -->


<p>サイトデザインを模索しているときに出会ったとても気に入ったテーマがありました。<a href="http://pixelkit.com/" title="Premium Web UI Kits &amp; Design Resources | PixelKit">PixelKit</a>で公開されている<a href="http://pixelkit.com/kits/flat-ui-kit" title="Flat UI Kit | Modern Touch">Modern Touch</a>というものです。
最近の流行であるフラットデザインをシンプルな配色で実装し、中途半端さが無く、とても清潔感あふれている点に惹かれました。
しかしここで気になったのがデザインの配布形式です。</p>

<p>過去から現在にかけてWeb UIデザインは各所で提案され公開されてきていますが、公開形式として大半を占めているのがPSD形式のものです。
HTML5やCSS3が主要となりつつある現代WebデザインにおいてはUIに多くの画像を用いることはあまり好まれません。
汎用性が高いという理由でしょうが、Web UIやUIデザインが提供されている形式はPSD形式ばかりです。
そんなサイトがたくさんある中、少数派であるHTML5とCSS3を用いてサイトデザインを提供公開しているサイトにもれず、<a href="http://pixelkit.com/" title="Premium Web UI Kits &amp; Design Resources | PixelKit">Pixelkit</a>もHTML5/CSS3でデザインを提供していたのです。</p>

<p>このサイトにあるデザインはすべてが無料で提供されているわけではありません。公開されているデザインをすべて利用するには年間Subscriptionが必要です。
しかし、今回使用したテーマのModern touchを始め、いくつかのデザインは<a href="https://github.com/Pixelkit/PixelKit-Bootstrap-UI-Kits">GitHubにて公開</a>されています。ライセンスは<a href="http://creativecommons.org/licenses/by/3.0/" title="Creative Commons — Attribution 3.0 Unported — CC BY 3.0">CC BY 3.0</a>と<a href="http://opensource.org/licenses/mit-license.html" title="The MIT License (MIT) | Open Source Initiative">MIT</a>です。</p>

<p>「せっかくよいデザインを見つけたのだから使いたい」と思ったので使うことにしました。
サイトデザインのために、好みでなかったTwitter Bootstrapを利用しはじめ、Octopressのテーマをいじっていきました。
時々出力されたサイトのソースをみるとこんなかんじになっていました。</p>

<figure>
<img src="http://mzyy94.com/blog/resources/images/2013/12/07/blog-html-sourcecode.png" alt="blog html sourcecode" />
<figcaption class="boxed-green">blogのソースコード</figcaption>
</figure>


<p>OOCSSの影響でclassが溢れて可読性が下がると思っていましたが、この程度の組み方であればあまり影響はないようです。</p>

<p>GitHub pagesとOctopressによってブログを書き始めました。というお話でした。
まだまだ未熟者ですが今後とも宜しくお願いします。</p>
]]></content>
  </entry>
  
</feed>
