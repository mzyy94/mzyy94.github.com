<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[犬アイコンのみっきー]]></title>
  <link href="http://mzyy94.com/atom.xml" rel="self"/>
  <link href="http://mzyy94.com/"/>
  <updated>2015-04-16T01:35:59+09:00</updated>
  <id>http://mzyy94.com/</id>
  <author>
    <name><![CDATA[mzyy94]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ネットエージェント最終面接問題 Write-up エクストリームCTF編]]></title>
    <link href="http://mzyy94.com/blog/2015/04/16/netagent-mondai10/"/>
    <updated>2015-04-16T00:13:43+09:00</updated>
    <id>http://mzyy94.com/blog/2015/04/16/netagent-mondai10</id>
    <content type="html"><![CDATA[<p>ネットエージェントのいきなり最終面接問題を解いたのでWrite-upです。</p>

<ul>
<li><a href="http://www.netagent.co.jp/recruit/newgraduates_2016.html">2016年度 新卒採用｜ネットエージェント株式会社</a></li>
</ul>


<p>これまでmondai1からmondai9までは、mondaiとOS XやLinux、Windowsマシンが手元にあれば解く事ができていました。
しかしmondai10はそうはいきません。mondaiが手元にないのです。mondaiを入手しなければいけないのです。
某所で10分で解けたと言っていた人は、きっと某せんせーみたいにマッハ20で移動できるのでしょう。</p>

<p>こんな楽しい体験をさせてくれたmondaiを少しでもたくさんの人に知ってもらおうと、学内のLT大会で以下のように発表してきました。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/47019316" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/mzyy94/ctf-coinslt" title="CTFの話 - coinsLT #10" target="_blank">CTFの話 - coinsLT #10</a> </strong> from <strong><a href="//www.slideshare.net/mzyy94" target="_blank">Yuki Mizuno</a></strong> </div></p>

<p>この発表では、この記事の内容から抜粋する形で、最後のmondai10を解く楽しさと、それによって得た経験を紹介してきました。
よろしければご覧になってみてください。</p>

<p>さて、一昨々日から始まったネットエージェント最終面接問題のWrite-upもこれで最終回です。
<a href="http://mzyy94.com/blog/2015/04/15/netagent-mondai7-9/">昨日のmondai9のWrite-up</a>に続き、最後のmondai10のWrite-upです。</p>

<!-- more -->


<h1>mondai10</h1>

<p>mondai9でマウントしたmondai10.tcには9枚の写真とmondai10.txtがありました。mondai10.txtには以下のように記載がありました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>関東２ヶ所、関西２ヶ所のそれぞれの箇所にSDカードに最後の問題を隠した。今までのヒントと写真から位置を割り出せ。
</span><span class='line'>
</span><span class='line'>各地先着１名
</span><span class='line'>ヒント：石の下のミンティア</span></code></pre></td></tr></table></div></figure>


<p>関東に住んでいるので、関東のSDカードをゲットしに行こうと思いました。
関東の2ヶ所はkanto1・kanto2と呼ばれ、どちらにしようか迷っていると、kanto2がゲットを狙われているとの情報を得たのでkanto1に行くことにしました。</p>

<h2>今までのヒント</h2>

<p>これまでの問題を解いていて、途中でhint[数字].txtといったファイルが幾つか一緒に出てきました。
このhintに書かれているkanto1のヒントは以下の6つでした。</p>

<ul>
<li>com.ruckygames.gunmaapps</li>
<li>ひもかわうどん</li>
<li>百足</li>
<li>×Fe</li>
<li>!△</li>
<li>ヤマヒゲナガケンミジンコ</li>
</ul>


<p>1つ目のヒントはアプリケーションBundle IDで、<strong>ぐんまのやぼう</strong>のものでした。2つ目のヒントのひもかわうどんは、群馬県の桐生名物とのことです。
この2つから群馬県のとある場所に隠されているということが想像つきます。</p>

<p>3つ目のヒントの百足と群馬県をセットにしてGoogle検索してみると、次のサイトが上位にヒットします。</p>

<p><a href="http://akagi-yama.jp/archives/358">神戦「赤城と日光二荒山神戦」 | 群馬県赤城山ポータルサイト</a></p>

<p>群馬県赤城山の神様が大ムカデとのことです。これによって群馬県赤城山に隠されている線が浮上します。</p>

<p>4つ目のヒントは×Fe（※エックスではなくバツ）ですが、さっぱりわかりません。そのまま見るに、鉄(Fe)ではない、ということでしょうか。</p>

<p>5つ目のヒントは!△で意味するところは、山頂にはない、もしくは、三角点付近ではない、ということでしょうか。これまたよくわかりません。</p>

<p>6つ目のヒントはヤマヒゲナガケンミジンコで、Google検索してみるとミジンコ画像サイトばかりヒットしてよくわかりませんでした。</p>

<p>これらのヒントを元にわかったことは、<strong>群馬県の赤城山</strong>に隠されているということです。
kanto1に関する画像がまだ確認してないので見てみます。
kanto1_1.jpgとkanto1_2.jpgのファイル情報に撮影場所の手がかりがあるかもと期待を込め、メタ情報を見てみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/exif-infos.png" alt="exif-infos.png" /></p>

<p>予想通り、SDカードを隠した場所のGPSの座標情報がEXIFに含まれているようです。OS Xのプレビュー.appで詳細情報を開いて、マップ.appにその地点を表示させてみました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/apple-map.png" alt="apple-map.png" /></p>

<p>ヒントから導いた通り、隠されている場所は赤城山でまちがいないようです。</p>

<p>早速、赤城山への行き方を調べてみます。</p>

<p><a href="http://akagi-yama.jp/access">アクセス | 群馬県赤城山ポータルサイト</a></p>

<p>公共交通機関で行く方法として、電車に乗って前橋駅もしくは中央前橋駅へ行き、そこから赤城山行きのバスに乗ればよいと示されていました。
同じ関東だし翌日9時頃に家を出ればその日のうちに帰ってこれるだろ、と高を括り、お布団に入って熟睡し翌日に備えました。
今思えばこの時点で<strong>エクストリームCTF</strong>が始まっていました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>ヤマノススメするぞといった気持ち</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584858646346989568">2015, 4月 5</a></blockquote>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=mzyy-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00L3NPW7E" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h2>当日</h2>

<p>ぐっすりと睡眠をとり、目覚めのコーヒーと朝食の調理パンを食べて赤城山に向かう準備を始めます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>とりあえず登山グッズはこんなもんか <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/pXQj4G5MdH">pic.twitter.com/pXQj4G5MdH</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584861432895811585">2015, 4月 5</a></blockquote>


<p>MBA,パン,水分,チョコレート,革手袋,コンパクトダウンジャケット,モバイルバッテリーにSDカードリーダーを持っていざ出発です。</p>

<h3>午前の部　電車乗り換え編</h3>

<blockquote class="twitter-tweet" lang="ja"><p>行くぜ関東 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ つくば駅 (Tsukuba Sta.) in つくば市, 茨城県) <a href="https://t.co/DUWnj3m167">https://t.co/DUWnj3m167</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584874102009266176">2015, 4月 6</a></blockquote>


<p>自宅の最寄駅のつくば駅からつくばエクスプレスに乗り、赤城山の最寄駅である前橋駅へ向かいます。
つくばエクスプレスの電車の中で検索したところ経路としては、流山おおたかの森駅乗り換えで東武鉄道を使う行き方と、
南流山乗り換えでJRを使って行く方法がありました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/train-connections.png" alt="train-connections" /></p>

<p>JRでは移動距離100km以上だったので学割が使えますが、電車内での決断は以下のようになりました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>JRでSDカード発掘に行くつもりだったけど時間ずらすと東武の方が安いことに気づいて学割使わなんだ</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584881057205395456">2015, 4月 6</a></blockquote>


<p>この時は後にある過酷な乗り換えが待っていることも知らず、運賃の安さで流山おおたかの森駅での乗り換えを選択しました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>TX乗り換え <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ つくばエクスプレス 流山おおたかの森駅 in 流山市, 千葉県) <a href="https://t.co/PTvNeocyiw">https://t.co/PTvNeocyiw</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584879354540388352">2015, 4月 6</a></blockquote>


<p>東武鉄道へと乗り換え、電車の中で前橋駅から赤城山へのバスの時刻表を調べ始めます。ここで衝撃の事実を知ることになります。</p>

<blockquote class="twitter-tweet" lang="ja"><p>やべぇ登山口へのバスの本数少なすぎるw <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584885349471498242">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>ちょっと！kanto1最寄り駅から1日5本しかバス出てないってどういうことおかしいでしょ！！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584885739130716160">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>5本じゃない4本だし！！！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584885923290030082">2015, 4月 6</a></blockquote>


<p>衝撃です。平日の前橋駅発赤城山行きのバスは4本しかなく、4本目が最終折り返し便という記載がバス時刻表にあることを初めて知りました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/bus-table.png" alt="bus-table" /></p>

<p>平日の前橋駅発富士見温泉経由赤城山行きの出発時刻は7:32、10:35、13:27、15:28の4本しかなく、15:28の便が最終折り返し便なので、なんとしてでも13:27のバスに乗らなければならない状況に立たされていることを知ります。
悠長に電車旅を続けられる状態ではなくなりました。本数の少ない路線を乗り継いでいるため、一つでも乗り換えを間違えたり間に合わなかったりすると13:27のバスに間に合わず、そこでmondai10へのチャレンジ終了となります。</p>

<p>ギリギリの乗り換えを迫られているがため、春日部駅で10:26発の久喜行きの電車が目の前で去った時は、乗り換え失敗をしたと勘違いし、焦ってこんなツイートをしていました（乗り換え案内によると10:36発の久喜行きに乗ればよいとのことでした）。</p>

<blockquote class="twitter-tweet" lang="ja"><p>あかん乗り換えミスったやばいぞ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 春日部駅 (Kasukabe Sta.) in 春日部市, 埼玉県) <a href="https://t.co/4d9tnWBHpQ">https://t.co/4d9tnWBHpQ</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584890215510192129">2015, 4月 6</a></blockquote>


<p>なんとか春日部駅での乗り換えを成功し、電車の中でこんなことを考えていました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>新幹線乗ればよかった感</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584891590436454400">2015, 4月 6</a></blockquote>


<p>運賃をできるだけ安く済ませようと、有料特急を乗り換え案内の検索条件から外していたのですが、埼玉県の大宮駅で新幹線に乗って群馬県の高崎駅へ行く経路をとれば、乗り換えも少なく、時間に余裕を持って前橋駅まで行くことができたのです。</p>

<p>続く2駅も、途中2分という短い乗り換え時間でありながらも、乗り遅れることなく無事乗り換えることに成功しました。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 久喜駅 (Kuki Sta.) in 久喜市, 埼玉県) <a href="https://t.co/Xm0SXXYVs7">https://t.co/Xm0SXXYVs7</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584895933697159168">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>乗り換え可能時間2分しかないぞ</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584903863565594624">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>乗り換え成功 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 館林駅 (Tatebayashi Sta.) in 館林市, 群馬県) <a href="https://t.co/zCyWnEyjHF">https://t.co/zCyWnEyjHF</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584905684585750528">2015, 4月 6</a></blockquote>


<p>さて、普通にプラットホームを移動して乗り換えするだけでよかったのはこの館林駅まで。次の乗り換え駅である足利市駅では時間との戦いが待っているのです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/running-connection.png" alt="running-connection" /></p>

<p>足利市駅での乗り換えでは、違う路線の駅間を歩いて移動しなければならないのです。この乗り換えの最大の難関は移動時間。足利市駅に11:47に到着し足利駅の発車時刻は12:05で、その間の時間は18分しかありません。徒歩での経路をiOSのマップで調べてみると、予想所要時間は18分となっています。迷ったり道を間違えたりしていたら乗り損ねてしまい、mondai10チャレンジ終了となります。</p>

<blockquote class="twitter-tweet" lang="ja"><p>東武鉄道遅延情報出てないのに遅延してるクズっぽい</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584910433590517760">2015, 4月 6</a></blockquote>


<p>追い討ちをかけるように、東武鉄道は2分ほど足利市駅への到着が遅れていました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>駅間ダッシュだっ！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 足利市駅 (Ashikagashi Sta.) in 足利市, 栃木県) <a href="https://t.co/nvG8VXUlrI">https://t.co/nvG8VXUlrI</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584910796683157504">2015, 4月 6</a></blockquote>


<p>11:49に駅に到着し、足利駅への移動を開始します。</p>

<blockquote class="twitter-tweet" lang="ja"><p>いきなり迷ってる <a href="https://twitter.com/hashtag/%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0CTF?src=hash">#エクストリームCTF</a> <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584911355313917953">2015, 4月 6</a></blockquote>


<p>駅の出口が2方向にあり、どちらに出ればいいかわからず、さらに出口から出たところで道らしき道が見当たらなかったため、2分ほど迷ってしまいました。</p>

<p>iPhoneの電子コンパスを使って方角を確かめ、正しい出口から出てマップを頼りに急いで移動を開始します。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/connection-map.png" alt="connection-map" /></p>

<p>駅間の移動中の風景はとてものどかで、ゆっくりとした時間が流れているようでした。ゆっくりと時間が流れて欲しいと思っていたからかもしれませんが。
橋を渡っている時に撮った渡良瀬川の風景は、特に面白みがなく自然な感じでした。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/v9Jca4uFE4">pic.twitter.com/v9Jca4uFE4</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584911834458689536">2015, 4月 6</a></blockquote>


<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2374.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2374_thumb.JPG" alt="IMG_2374.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2375.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2375_thumb.JPG" alt="IMG_2375.JPG" /></a></p>

<p>のんびりと写真を撮っていたからでしょうか、駅まで残り250mの地点ですでに電車出発まで残り2分を切ってしまいました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/last_250m.png" alt="last_250m" /></p>

<p>猛ダッシュするしかありません。幸い、信号のある道ではなかったので歩道を存分に走って駅に向かうことができました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>ギリッギリw <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 足利駅 (Ashikaga Sta.) in 足利市, 栃木県) <a href="https://t.co/tkic86CCmO">https://t.co/tkic86CCmO</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584914938298261504">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>最後猛ダッシュだったわw <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584915058506870784">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>あと30秒遅かったらリタイアだったわ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584915558820225025">2015, 4月 6</a></blockquote>


<p>駅の改札を通ると高崎行き方面のホームにはすでに電車が！ふくらはぎパンパンになりながらも階段を駆け上がり、なんとか電車に間に合い乗ることができました。</p>

<p>ちなみに足利駅には電車が飾ってありました。（こんなの撮影してないで急げというツッコミはなしで）</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2379.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2379_thumb.JPG" alt="IMG_2379.JPG" /></a></p>

<p>最後の乗り換えを終え、あとは前橋駅で降りるだけとなりました。なんとか電車で赤城山最寄駅までこぎつけることができる状態となり、これにて過酷な電車乗り換え編はおしまいとなります。</p>

<blockquote class="twitter-tweet" lang="ja"><p>とりあえず エクストリームCTF 午前の部 電車編 はクリアできたっぽいです</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584918614555238401">2015, 4月 6</a></blockquote>


<h3>昼の部　バス乗り換え編</h3>

<blockquote class="twitter-tweet" lang="ja"><p>エクストリームCTF 昼の部 バス編開始です <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 前橋駅 (Maebashi Sta.) in 前橋市, 群馬県) <a href="https://t.co/djgY3NCMZ9">https://t.co/djgY3NCMZ9</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584927608808288256">2015, 4月 6</a></blockquote>


<p>へとへとになりながらも降りそびれることなく、前橋駅に到着しました。</p>

<p>バスターミナルを回り、富士見温泉経由で赤城山に向かうバスを探します。</p>

<blockquote class="twitter-tweet" lang="ja"><p>この13:27で行けるはず… <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 前橋駅バスターミナル in 前橋市, 群馬県) <a href="https://t.co/zRGB3P2gof">https://t.co/zRGB3P2gof</a> <a href="http://t.co/utCcwl1PVN">pic.twitter.com/utCcwl1PVN</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584928918194540544">2015, 4月 6</a></blockquote>


<p>事前に（電車内で）調べてあった13:27発のバスがありました。しかし富士見温泉終点と書いてあるこのバスで本当に赤城山へ行けるか心配になり、バス案内所へ行きどの便でいけるのかを聞いてきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>心配になってバス案内所で聞いてきたら13:27の便であってた <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/s2Hfmuv4Jc">pic.twitter.com/s2Hfmuv4Jc</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584931886155239425">2015, 4月 6</a></blockquote>


<p>この13:27発の電車であっていたようです。一度富士見温泉で赤城山ビジターセンター行きのバスに乗り換えをする必要があるとのことでした。</p>

<p>案内所にあったバス停の停車場所の地図から、SDカードがある場所に一番近いバス停を探します。Google Mapによると、赤城山ビジターセンターまで行ってしまうと大回りとなってしまうとのことで、その一つ前の赤城山大洞で降りると、山道を通って最短経路で行けるとのことでした。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/bus-stop-route.png" alt="bus-stop-route" /></p>

<p>時間になり、バスが来たので乗車しました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>バス乗った　<a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584934452813365248">2015, 4月 6</a></blockquote>


<p>ここで想定していなかった事態が発生します。</p>

<blockquote class="twitter-tweet" lang="ja"><p>雨降ってきたし！！！</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584934838643195904">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>雨降るなんて聞いてないよ！！！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584934887217500160">2015, 4月 6</a></blockquote>


<p>天気予報では&#8221;晴れ&#8221;となっていたので雨具など用意していません。しかもバスに乗るまで20分ほど待ち時間があったので、乗車前に降りそうな予感がしていれば雨合羽を買うことすらできただけに、最悪のタイミングで雨が降ってきました。このままSDカードを見つけることができるのかと、とても不安になってきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>まんがタイムきららのドキドキビジュアルコミックス以上にドキドキしてる</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584937029898612736">2015, 4月 6</a></blockquote>


<p>ぼーっと外を眺めていても、雨粒と曇天とでかい鳥居くらいしかなく、ぜんぜん落ち着きませんでした。</p>

<blockquote class="twitter-tweet" lang="ja"><p>でかい鳥居だ <a href="http://t.co/9xRZJc8ODm">pic.twitter.com/9xRZJc8ODm</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584941636108451840">2015, 4月 6</a></blockquote>


<p>そうこうしていると富士見温泉バス停に着き、乗り換えをしました。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 富士見温泉バス停) <a href="https://t.co/NDft6XwqIr">https://t.co/NDft6XwqIr</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584943568017588224">2015, 4月 6</a></blockquote>


<p>赤城山ビジターセンター行きのバスに乗ると、風景に大きな山が見えてきました。たぶん赤城山です。たぶん。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2388.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2388_thumb.JPG" alt="IMG_2388.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2391.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2391_thumb.JPG" alt="IMG_2391.JPG" /></a></p>

<p>バスで揺られて眠くなる中、標高1000mを越えたあたりから車窓から覗く景色が明るくなっていることに気づきます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>標高1000m超えた</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584950108011110400">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>残雪があるぞ…</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584951262354939905">2015, 4月 6</a></blockquote>


<p>そう、残雪が景色を明るくしていたのです。また、赤城山大沼という湖は湖面が凍っていました。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2395.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2395_thumb.JPG" alt="IMG_2395.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2398.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2398_thumb.JPG" alt="IMG_2398.JPG" /></a></p>

<p>赤城山大洞バス停に到着し、降車します。降りるとき、バスの運転手にこう告げられました。</p>

<blockquote><p>バス停が雪に埋まってるから帰りは降りた位置辺りにいれば止まるよ</p></blockquote>

<p>嫌な予感しかしません。</p>

<p>ここから想像をはるかに超える過酷な登山が始まります。</p>

<h3>午後1　登山編</h3>

<blockquote class="twitter-tweet" lang="ja"><p>さぁ、登山開始だ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 赤城山第1スキー場 in 前橋市, 群馬県) <a href="https://t.co/tHRXadHe4S">https://t.co/tHRXadHe4S</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584954825294684160">2015, 4月 6</a></blockquote>


<p>バス停を降りてすぐのところで登山者向けの案内看板を見つけました。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2399.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2399_thumb.JPG" alt="IMG_2399.JPG" /></a></p>

<p>この看板の略図にある地蔵岳を越えてゆくコースを通ってSDカードの場所へと向かいます。看板の凡例にあるように、通る道は<strong>歩道</strong>となっているので比較的楽に登ることができると思いまいした。その歩道とやらはどこにあるのかとあたりを見渡すと、アスファルトで舗装された道がみつかりました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>どうすんだよこれ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/3DeQWYKK8V">pic.twitter.com/3DeQWYKK8V</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584955092714950656">2015, 4月 6</a></blockquote>


<p>かろうじてアスファルトの道であるとわかる雪に覆われた登山道を見つけます。100mほど先を見ると、アスファルトはすべて雪に覆われ見えなくなっています。
完全に想像していなかった事態です。春になり暖かくなってきていたので、こんなにも雪が積もっているなんて考えていませんでした。
前日の甘い考えがここで思い出されます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>ヤマノススメするぞといった気持ち</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584858646346989568">2015, 4月 5</a></blockquote>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=mzyy-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00L3NPW7E" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>何も下調べせずに来てしまったことを強く後悔しました。
事前にしっかりと下調べしていれば、1800m超級の山にはまだ雪が残っているというのは安易に想像がつきます。小爪アイゼン装備のブーツを持ってくることもできたのです。</p>

<p>よく滑る雪道を数十メートル進み、湖の方を眺めると大きな山がこちらを見守ってくれていました。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2403.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2403_thumb.JPG" alt="IMG_2403.JPG" /></a></p>

<p>刻々と帰りのバスの時間が迫ってきているので、後悔はほどほどに先に進みます。</p>

<blockquote class="twitter-tweet" lang="ja"><p>やばい(確信) <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/NsTmOr6ZL2">pic.twitter.com/NsTmOr6ZL2</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584956357419241472">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>なんで沢登りせにゃならんのだw <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/5c72fEWBQc">pic.twitter.com/5c72fEWBQc</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584958094637015040">2015, 4月 6</a></blockquote>


<p>膝上まで沈む深い雪があるところや、雪解け水で小川ができているところを水浸しになりながらかけ進んでいきます。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2405.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2405_thumb.JPG" alt="IMG_2405.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2410.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2410_thumb.JPG" alt="IMG_2410.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2412.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2412_thumb.JPG" alt="IMG_2412.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2413.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2413_thumb.JPG" alt="IMG_2413.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2414.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2414_thumb.JPG" alt="IMG_2414.JPG" /></a></p>

<blockquote class="twitter-tweet" lang="ja"><p>Googleさんの案内相当険しかったですね。。これマップの地点の画像です <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/OthdUPcczu">pic.twitter.com/OthdUPcczu</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584976426962530305">2015, 4月 6</a></blockquote>


<p>20分ほど登ったでしょうか、地蔵岳の登山道を抜け、車道に出てきました。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2415.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2415_thumb.JPG" alt="IMG_2415.JPG" /></a></p>

<p>やっと雪道から解放されました。</p>

<p>少し進むと小沼という湖がでてきました。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2416.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2416_thumb.JPG" alt="IMG_2416.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2417.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2417_thumb.JPG" alt="IMG_2417.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2418.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2418_thumb.JPG" alt="IMG_2418.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2419.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2419_thumb.JPG" alt="IMG_2419.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2420.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2420_thumb.JPG" alt="IMG_2420.JPG" /></a></p>

<p>標高1450m地点とのことです。あと一息で目的地周辺です。
凍った湖を左手に眺めながら車道脇をてくてくと歩き進んでいきます。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2422.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2422_thumb.JPG" alt="IMG_2422.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2424.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2424_thumb.JPG" alt="IMG_2424.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2425.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2425_thumb.JPG" alt="IMG_2425.JPG" /></a>
<img src="http://mzyy94.com/blog/resources/images/2015/04/16/route-to-dest.png" alt="route-to-dest.png" /></p>

<p>目的地周辺まで来ました。このときiPhoneの電波は圏外となっていました。</p>

<p>ここからは車道を外れて森の中へと捜索しに行きます。</p>

<h3>午後2　捜索編</h3>

<p>登山道が60cm超の雪まみれだったのにもかかわらず、SDカードが隠されている森は数cmの雪しかありませんでした。
不幸中の幸いというものですね。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2428.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2428_thumb.JPG" alt="IMG_2428.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2429.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2429_thumb.JPG" alt="IMG_2429.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2431.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2431_thumb.JPG" alt="IMG_2431.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2433.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2433_thumb.JPG" alt="IMG_2433.JPG" /></a></p>

<p>道無き道を突き進んでいたのですが、途中で道らしきものを見つけそちらを歩き始めました。
すると、看板とともに分岐点があらわれました。</p>

<p>GPSによると、血の池方面に行けばよさそうなので、そちらへ進んでいきます。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2435.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2435_thumb.JPG" alt="IMG_2435.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2437.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2437_thumb.JPG" alt="IMG_2437.JPG" /></a></p>

<p>血の池に着くと、血の池にまつわる伝説と池の由来が書かれた看板がありました。
この看板を読んでいると、すこし前に目にした単語を見つけました。
そう、hint7.txtに記載のあった<strong>ヤマヒゲナガケンミジンコ</strong>です。
なるほどがってん、あれはこの血の池を指していたんですね。</p>

<p>血の池の中心に来て辺りを見回すと、そこは静かな森でした。まぁ森に入って来たからあたりまえなのですが。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2441.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2441_thumb.JPG" alt="IMG_2441.JPG" /></a></p>

<p>地図を拡大し、GPSだけを頼りにSDカードの位置まで行くと、kanto1_1.jpgに写っているのと同じような岩がたくさんある場所へと来ました。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2445.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2445_thumb.JPG" alt="IMG_2445.JPG" /></a></p>

<p>よーくkanto1_1.jpgと目の前の岩岩を見比べ、それらしき岩を特定しました。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2446.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2446_thumb.JPG" alt="IMG_2446.JPG" /></a></p>

<p>mondai10.txtによると、<em>ヒント：石の下のミンティア</em>とのことなので、石をめくってみます。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2447.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2447_thumb.JPG" alt="IMG_2447.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2449.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2449_thumb.JPG" alt="IMG_2449.JPG" /></a></p>

<p>ありました！ミンティアアップルフィズ味です！</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=mzyy-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00MQE4MG6" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>気になる中身は&#8230;</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2451.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2451_thumb.JPG" alt="IMG_2451.JPG" /></a></p>

<p><strong>待望のSDカードでした！やっとみつかりました！</strong>
9:24につくば駅から電車に乗り、15:24に発見したのでかれこれ6時間の旅でした。
ものすごい達成感とSDカードの中身への興味から、岩場に腰を下ろしSDカードをマウントしてみてみました。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2452.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2452_thumb.JPG" alt="IMG_2452.JPG" /></a></p>

<pre style="border:none; color:inherit; background-color:inherit;">
＿人人人人人人人＿
＞ mondai10.tc ＜
￣Y^Y^Y^Y^Y^Y￣
</pre>


<p>またこの形式か！mondai9で解いたのと同じ、パスワード付きTrueCryptファイルです。
パスワードのヒントはSDカード内にあることは容易に想像がつくので解析しようと思いましたが、
帰りのバスが1本しかない上に、ここからバス停まで何分かかるか不明なため、解析は後回しにしてとりあえず森を抜けることにします。
岩場のすぐ近くに県道へ抜ける道の案内看板があったので、それに従って車道へと出ます。</p>

<h3>午後3　帰宅編</h3>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2454.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2454_thumb.JPG" alt="IMG_2454.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2455.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2455_thumb.JPG" alt="IMG_2455.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2457.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2457_thumb.JPG" alt="IMG_2457.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2458.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2458_thumb.JPG" alt="IMG_2458.JPG" /></a></p>

<p>看板の指示通りに歩いていたら、あっさりと県道へと抜けることができ、さらに県道から血の池までの最短ルートとなる登山道の入り口の案内板がありました。
hint7.txtのヤマヒゲナガケンミジンコから血の池が導けていれば、道無き道を進む必要もなく、この看板から血の池へ向かうことができていたかもしれません。</p>

<p>車道へと出たのであとは道なりにバス停へと向かうことにします。
行きに降車した赤城山大洞バス停へは、あの<strong>険しい登山道</strong>を再度通らないといけないため、少し遠回りになりますが、赤城山ビジターセンターへと向かいます。
行きとは逆で、右手に小沼を眺めながら下っていきます。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2461.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2461_thumb.JPG" alt="IMG_2461.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2462.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2462_thumb.JPG" alt="IMG_2462.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2465.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2465_thumb.JPG" alt="IMG_2465.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2466.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2466_thumb.JPG" alt="IMG_2466.JPG" /></a>
<a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2469.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2469_thumb.JPG" alt="IMG_2469.JPG" /></a></p>

<p>ただただ歩き進むだけだったので、何事もなく赤城山ビジターセンターに到着することができました。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 赤城公園ビジターセンター in 前橋市, 群馬県) <a href="https://t.co/UE7XCVkwDv">https://t.co/UE7XCVkwDv</a> <a href="http://t.co/9EkxDzo5hO">pic.twitter.com/9EkxDzo5hO</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584974440947183616">2015, 4月 6</a></blockquote>


<p>赤城山ビジターセンターは閉まっていたので外のベンチに腰掛けました。</p>

<p>ビジターセンター横に、赤城山公園に関するお得な掲示板がありました。</p>

<p><a href="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2477.JPG"><img src="http://mzyy94.com/blog/resources/images/2015/04/16/IMG_2477_thumb.JPG" alt="IMG_2477.JPG" /></a></p>

<p>急いで降りてきた会があってか、バスが来るまで1時間も余裕があったので、持って来たコーヒーと板チョコレートで休憩しました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>バスが来るまで1時間あるのでチョコとコーヒーで休憩 <a href="http://t.co/RfTO5ZNJA8">pic.twitter.com/RfTO5ZNJA8</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584980254445305856">2015, 4月 6</a></blockquote>


<p>標高1365mなため、16:00を過ぎたこの時期の山は寒くなり、ダウンジャケットを準備しておいて正解でした。</p>

<blockquote class="twitter-tweet" lang="ja"><p>標高1400mはやっぱり寒い&#10;ダウンジャケット持ってきて正解だったわ</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584977161729093632">2015, 4月 6</a></blockquote>


<p>チョコレートを食べ終わり、辺りを見回すと霞がかかってきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>あっやばい霞ががってきた <a href="http://t.co/BK7zs4m0L1">pic.twitter.com/BK7zs4m0L1</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584976787811119105">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>雲のなかにいる <a href="http://t.co/5KVkzmPEp8">pic.twitter.com/5KVkzmPEp8</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584980779408556033">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>雨も降ってきたし10m先見えないし怖い <a href="http://t.co/9mq61pmxK3">pic.twitter.com/9mq61pmxK3</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584987757157617664">2015, 4月 6</a></blockquote>


<p>雨も降ってきて、このままバスが来なかったらどうしようといった不安から、すこし怖くなりました。</p>

<p>バス到着予定時刻になり、赤城山ビジターセンターバス停で待っていると定刻通りにバスがきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>帰りのバス乗った！！！ これで少なくとも下山できる！！！ <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/584993731985551360">2015, 4月 6</a></blockquote>


<p>帰りのバスにも乗れ、あとは電車に乗って終電までに帰ることができれば、SDカードの捜索は無事終了となります。</p>

<p>しかしわざわざ群馬県まで来たからには、なにか群馬らしいことをして帰りたいなと思いました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>なぜかグンマーにいるのでGunmaっぽい夕食食べて帰ろうかな</p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585002417697099777">2015, 4月 6</a></blockquote>


<p>群馬の名産が何があるか知らなかったので有識者に聞いてみたところ、luminさんからアドバイスをいただきました。</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 焼きまんじゅう、ひもかわうどん（桐生）</p>&mdash; lumin (@lumin) <a href="https://twitter.com/lumin/status/585006039528972288">2015, 4月 6</a></blockquote>


<p><strong>あっ！！！</strong>
hint3.txtに記載のあったひもかわうどんをすっかり忘れてました！</p>

<p>前橋駅に着き、帰路の途中の駅である高崎駅付近のうどん屋さんへと向かうことを決めました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>駅ついたー 命があるぞー <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 前橋駅 (Maebashi Sta.) in 前橋市, 群馬県) <a href="https://t.co/8530G2c0RA">https://t.co/8530G2c0RA</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585014590695669760">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>mondai解いた時にあったひもかわうどんを食しに行かねば <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585015639519006720">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>よし、高崎のひもかわうどん屋へGo <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585017858687545344">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>食うぜひもかわうどん <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 高崎駅 (Takasaki Sta.) in 高崎市, 群馬県) <a href="https://t.co/tygSOrl8kj">https://t.co/tygSOrl8kj</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585022094821457920">2015, 4月 6</a></blockquote>


<p>高崎駅に到着した直後にまたも雨に降られてしまいましたが、20分ほどかけてひもかわうどんを扱ううどん屋さんへと歩きました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>ひもかわうどん！！ (@ めんいち in 高崎市, 群馬県) <a href="https://t.co/0C5suZrS3F">https://t.co/0C5suZrS3F</a> <a href="http://t.co/4D65OYc4G3">pic.twitter.com/4D65OYc4G3</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585027483772289026">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>hint3.txt kanto1 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> <a href="http://t.co/ATgu9JllWm">pic.twitter.com/ATgu9JllWm</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585029832964091904">2015, 4月 6</a></blockquote>


<p>名古屋県民の舌にはきしめんを思い出させる食感で、とてもなつかしい気分になりました。</p>

<p>さあ、これで群馬県に思い残すことはありません。
行きで使わなかった学割証を使って高崎駅からJRで南流山まで行き、そこからつくばエクスプレスに乗ってつくば駅に向かって、SDカードの捜索は終了となります。</p>

<blockquote class="twitter-tweet" lang="ja"><p>さらば群馬県 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ 高崎駅 (Takasaki Sta.) in 高崎市, 群馬県) <a href="https://t.co/gWMQTyhwoC">https://t.co/gWMQTyhwoC</a> <a href="http://t.co/zZ4UY6GnbL">pic.twitter.com/zZ4UY6GnbL</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585037725440565248">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>帰路のJR乗った <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585040578011762688">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>帰路の電車で原因不明の停止信号受信でパンダグラフ下ろしたそうで電車内真っ暗とかもう、もう <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585043902886846464">2015, 4月 6</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>我が家に帰ってきたような安心感 <a href="https://twitter.com/hashtag/SDcardFindingBattle?src=hash">#SDcardFindingBattle</a> (@ つくば駅 (Tsukuba Sta.) in つくば市, 茨城県) <a href="https://t.co/1RrtayjBUG">https://t.co/1RrtayjBUG</a></p>&mdash; えびと犬と柚子胡椒みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/585085754847719425">2015, 4月 6</a></blockquote>


<h2>費用</h2>

<p>SDカードがあった現地まで出向きたいという方のために、参考までにつくば駅から血の池までの往復でかかった運賃を記しておきます。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">区間          </th>
<th style="text-align:center;"> 種別  </th>
<th style="text-align:right;"> 運賃</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">つくば→流山おおたかの森 </td>
<td style="text-align:center;"> つくばエクスプレス </td>
<td style="text-align:right;"> 720</td>
</tr>
<tr>
<td style="text-align:center;">流山おおたかの森→足利市 </td>
<td style="text-align:center;"> 東武鉄道 </td>
<td style="text-align:right;"> 885</td>
</tr>
<tr>
<td style="text-align:center;">足利市→足利 </td>
<td style="text-align:center;"> 徒歩 </td>
<td style="text-align:right;"> 0</td>
</tr>
<tr>
<td style="text-align:center;">足利→前橋 </td>
<td style="text-align:center;"> JR </td>
<td style="text-align:right;"> 756</td>
</tr>
<tr>
<td style="text-align:center;">前橋駅→富士見温泉 </td>
<td style="text-align:center;"> 関越交通バス </td>
<td style="text-align:right;"> 600</td>
</tr>
<tr>
<td style="text-align:center;">富士見温泉→赤城山大洞</td>
<td style="text-align:center;"> 関越交通バス </td>
<td style="text-align:right;"> 1200</td>
</tr>
<tr>
<td style="text-align:center;">赤城山ビジターセンター→富士見温泉 </td>
<td style="text-align:center;"> 関越交通バス </td>
<td style="text-align:right;"> 1200</td>
</tr>
<tr>
<td style="text-align:center;">富士見温泉→前橋駅 </td>
<td style="text-align:center;"> 関越交通バス </td>
<td style="text-align:right;"> 600</td>
</tr>
<tr>
<td style="text-align:center;">前橋→高崎 </td>
<td style="text-align:center;"> JR </td>
<td style="text-align:right;"> 195</td>
</tr>
<tr>
<td style="text-align:center;">高崎→南流山 </td>
<td style="text-align:center;"> JR(学割) </td>
<td style="text-align:right;"> 1550</td>
</tr>
<tr>
<td style="text-align:center;">南流山→つくば</td>
<td style="text-align:center;"> つくばエクスプレス </td>
<td style="text-align:right;"> 822</td>
</tr>
</tbody>
</table>


<p>計8,528円でした。所要時間は、9:24につくば駅発の電車に乗って23:24につくば駅に戻ってくることから、
ギリギリの行程で行く場合は、14時間ほどかかる（＝ほぼ丸一日）ということになります。</p>

<h2>SDカードのmondai</h2>

<p>SDカードを手に入れておしまいではありません。SDカードの中にあるmondai10.tcを開かないことには最終面接へ挑むことができません。
とりあえずAutopsyにSDカードを読ませてみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/autopsy-mondai10.png" alt="autopsy-mondai10" /></p>

<p>以外と簡単に問題ファイルが浮上してきました。
削除された0バイトのファイルのファイル名が、「山名＋最高点の標高を英数字で9文字.txt」となっていました。</p>

<p>登山した赤城山は標高1828mなので、<strong>akagi1828</strong>がmondai10.tcのパスワードだと思われます。</p>

<p>TrueCryptでmondai10.tcを<strong>akagi1828</strong>をパスワードとしてマウントすると、見事イメージをマウントすることができました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/mount-mondai10.png" alt="mount-mondai10" /></p>

<p>マウントしたイメージには何があったでしょうか。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/16/final-mondai.png" alt="final-mondai" /></p>

<pre style="border:none; color:inherit; background-color:inherit;">
＿人人人人人人人＿
＞　答え.txt　＜
￣Y^Y^Y^Y^Y^Y￣
</pre>


<h1>感想</h1>

<p>mondai9までは日々の隙間時間を使い、少々躓きながらもなんとか時間をかけて解くことができました。
しかし、mondai10がここまで大変であるとは思っていませんでした。
同じ関東だからと舐めてかかっていたために、ギリギリの乗り換えや予想外の雪道に遭遇してつらい思いをしました。
しかし、マイナビに登録してエントリーするなどの就職活動をし、一次選考と二次選考を通過して最終面接に挑む方々と比べると、
雪道を這い上がるなど、苦労の量は比較的少ないようにも思えます。
このようなmondaiを通して就職の機会を与えてくれたネットエージェントさんに感謝するばかりです。</p>

<p>いろいろなmondaiに挑むことで、いろいろな答えを見つけるセンスを身につけられたかと思います。
このような問題を見つけることがあれば、みなさん是非とも挑戦して技量を高めてみてください。</p>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<script>
var a = document.querySelectorAll('a[href$=".JPG"]')
for(var i = 0; i < a.length; i++){a[i].target = "_blank"}
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネットエージェント最終面接問題 Write-up その3]]></title>
    <link href="http://mzyy94.com/blog/2015/04/15/netagent-mondai7-9/"/>
    <updated>2015-04-15T00:01:21+09:00</updated>
    <id>http://mzyy94.com/blog/2015/04/15/netagent-mondai7-9</id>
    <content type="html"><![CDATA[<p>あのネットエージェントのいきなり最終面接問題を解いたのでWrite-upを書きました。</p>

<ul>
<li><a href="http://www.netagent.co.jp/recruit/newgraduates_2016.html">2016年度 新卒採用｜ネットエージェント株式会社</a></li>
</ul>


<p>これまでのmondaiはLinuxやOS Xがあれば解くことができていましたが、mondai7からはWindowsの実行ファイル形式やMicrosoft Officeドキュメントが登場したりと、そろそろWindowsがない環境には手厳しい問題となってきました。
なので、今回の記事に掲載のmondaiはすべて（<code>file</code>コマンドでのファイル情報調査以外）、Windows上での解法となっております。</p>

<p>昨日の<a href="http://mzyy94.com/blog/2015/04/14/netagent-mondai5-6/">mondai6までの解法</a>に続いて本日はmondai7、mondai8、mondai9の解法を公開します。</p>

<!-- more -->


<h1>mondai7</h1>

<p>mondai7はnormal.exeというWIN/PE32実行ファイルを解析して答えを得る問題のようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file normal.exe
</span><span class='line'>normal.exe: PE32 executable <span class="k">for</span> MS Windows <span class="o">(</span>GUI<span class="o">)</span> Intel <span class="m">80386</span> 32-bit
</span></code></pre></td></tr></table></div></figure>


<p>今回はIDA Pro(demo)を使って解析してみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/normal-ida1.png" alt="normal-ida1.png" /></p>

<p>IDAに解析させて表示を見てみると、おもむろに正解を表示するらしい<em>aCorrectKeyIsS</em>がみつかります。
ここまで来る過程をアセンブリ表示で追っていくことにします。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/normal-ida2.png" alt="normal-ida2.png" /></p>

<p><em>aCorrectKeyIsS</em>はsprintfで渡されるテンプレート文字列で、そこにコマンドライン引数が埋め込められるようにいなっているようです。
このことから、normal.exeにキー候補の文字列をコマンドライン引数として渡して実行し、なにか判定があり、それが正しい場合に<strong>Correct! KEY is : </strong>に続いてその文字列が表示されるようになっていることがわかります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/normal-ida3.png" alt="normal-ida3.png" /></p>

<p>すこし遡ってみると、キーが表示される部分のサブルーチンへ来る前に、なにやら条件分岐があります。
コマンドライン第一引数の文字長をstrlenでチェックし、0x0A(=10)と比較し、合致しない場合に<strong>Try Again!</strong>と表示する処理がみつかりました。
このことから、キーは10文字長であることがわかります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/normal-ida4.png" alt="normal-ida4.png" /></p>

<p>キーが表示される直前に行われる処理を見てみると、サブルーチン<em>sub_4011C0</em>を呼んだ戻り値が0の場合、<strong>Try Again!</strong>の表示をさせるようになっています。
<em>sub_4011C0</em>にはコマンドライン引数を渡しているので、この引数が何か特定の文字列と比較されていると推測できます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/normal-ida5.png" alt="normal-ida5.png" /></p>

<p>サブルーチン<em>sub_4011C0</em>のはじめの方では、ループインデックス（以下、i）を0にしたりと、forループの初期化が行われている様子がつかめます。このループの中の処理を見てみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/normal-ida6.png" alt="normal-ida6.png" /></p>

<p>このforループでは、iが0x0A(=10)になるまでループが回れば1を、途中でbreakが発生すれば0をサブルーチン呼び出し元に返すような処理をしています。
途中でbreakが発生する条件は、ループ内で呼ばれる<em>sub_401170</em>の戻り値と謎の配列<em>dword_40C068</em>の比較が偽である場合となっています。
要するに、このループがi=10になるまで回らないと呼び出し元に0が返され、<strong>Try Again!</strong>が表示されるということです。</p>

<p>コマンドライン引数のi番目の文字が引数として渡されて呼び出されている<em>sub_401170</em>を見てみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/normal-ida7.png" alt="normal-ida7.png" /></p>

<p><em>sub_401170</em>はサブルーチンの引数で与えられた文字（＝コマンドライン引数のi番目の文字）が、謎の文字列<strong>&#8220;efyTUwxqrY&#8230;&#8221;</strong>の中の何番目に出てくるかを、forループを回して一つずつチェックしているようです。そしてサブルーチンの戻り値として、謎の文字列の何番目に引数の文字が現れたかを呼び出し元に返しています。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/normal-ida8.png" alt="normal-ida8.png" /></p>

<p>謎の配列<em>dword_40C068</em>の中身を見に行くと、unsignled long型の配列として、数値が格納されていました。
先のサブルーチン<em>sub_4011C0</em>のループ内では、コマンドライン引数のi番目の文字を<em>sub_401170</em>に渡し、謎の文字列の何番目に出現するかを取得し、その値とこの<em>dword_40C068</em>のi番目の数値を比較して、同じであればループを継続するという処理でした。</p>

<p>ここまでの調査を基にまとめると、このプログラムの処理は簡易的に以下のようになっていることがわかります。</p>

<ul>
<li>コマンドライン引数に与えられた文字列があり、</li>
<li>その文字列は10文字であり、</li>
<li>その文字列の1文字1文字が謎の文字列<strong>&#8220;efyTUwxqrY&#8230;&#8221;</strong>の何番目に位置するかを調べていて、</li>
<li>その位置がすべて謎の配列<em>dword_40C068</em>に定義されたもの同じであれば<strong>Correct! Key is :</strong>に続けて引数を表示する</li>
</ul>


<p>なので逆に考えると、謎の文字列の中の、謎の配列に定義されている場所の文字を抽出すればキーが見つかるということです。
パパッと以下のようなものを書いてキーを抽出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;efyTUwxqrYHEFmduCJAXQpgKLBnhiltINPGOoszkMDvcjabSZRVW&quot;</span>
</span><span class='line'><span class="n">indexes</span> <span class="o">=</span> <span class="o">[</span><span class="mh">0x03</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x2b</span><span class="p">,</span> <span class="mh">0x1b</span><span class="p">,</span> <span class="mh">0x0f</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0x2d</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x0f</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">indexes</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">key</span> <span class="o">+=</span> <span class="n">string</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure>




<!--
$ ruby mondai7.rb
"TochuKasou"
-->


<p>試しにnormal.exeの引数に、このコードを実行して得られたキーを与えて実行してみたところ、以下のようになりました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/TochuKasou.png" alt="TochuKasou.png" /></p>

<p>この文字列を与えてmondai8.zipを解凍してmondai7は終了です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; 7z.exe x mondai8.zip
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.35 beta  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2014 Igor Pavlov  2014-12-07
</span><span class='line'>
</span><span class='line'>Processing archive: mondai8.zip
</span><span class='line'>
</span><span class='line'>Extracting  mondai8.tc
</span><span class='line'>Enter password <span class="o">(</span>will not be echoed<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>Extracting  mondai8.txt
</span><span class='line'>Extracting  mondai9.zip
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Files: 3
</span><span class='line'>Size:       70339136
</span><span class='line'>Compressed: 70339594
</span><span class='line'>
</span><span class='line'>Kernel  <span class="nv">Time</span> <span class="o">=</span>     0.015 <span class="o">=</span>    0%
</span><span class='line'>User    <span class="nv">Time</span> <span class="o">=</span>     1.170 <span class="o">=</span>   21%
</span><span class='line'>Process <span class="nv">Time</span> <span class="o">=</span>     1.185 <span class="o">=</span>   22%    Virtual  <span class="nv">Memory</span> <span class="o">=</span>      <span class="m">2</span> MB
</span><span class='line'>Global  <span class="nv">Time</span> <span class="o">=</span>     5.379 <span class="o">=</span>  100%    Physical <span class="nv">Memory</span> <span class="o">=</span>      <span class="m">4</span> MB
</span></code></pre></td></tr></table></div></figure>




<!--
$ wine 7z x mondai8.zip -pTochuKasou

7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=utf8,Utf16=on,HugeFiles=on,4 CPUs)

Processing archive: mondai8.zip

Extracting  mondai8.tc
Extracting  mondai8.txt
Extracting  mondai9.zip

Everything is Ok

Files: 3
Size:       70339136
Compressed: 70339594
-->


<h1>mondai8</h1>

<p>なにやら怪しげなファイルmondai8.tcと問題文mondai8.txtがあります。mondai8.txtには以下のような記述がありました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>TrueCrypt pass:mondai8
</span><span class='line'>漢字８文字
</span></code></pre></td></tr></table></div></figure>


<p>mondai8.tcはTrueCryptファイルで、開くためのパスワードはmondai8であるとのことです。そしてこのmondai8の答えは漢字8文字ということでしょう。
TrueCryptでmondai8.tcをマウントして中を見てみました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/mondai8-files.png" alt="mondai8-files.png" /></p>

<p>こういったCTF系の問題でイメージファイルが配布されるときは、フォレンジック問題であると相場が決まっているので、TrueCryptでマウントしたらAutopsyで調査します。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/autopsy.png" alt="autopsy.png" /></p>

<p>マウントした際に表示されていたファイルになかった「今日の本.xlsx」という削除されたファイルが見つかりました。怪しいですね。
復元してファイルを開いてみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/todaysbook1.png" alt="todaysbook1.png" />
<img src="http://mzyy94.com/blog/resources/images/2015/04/15/todaysbook2.png" alt="todaysbook2.png" />
<img src="http://mzyy94.com/blog/resources/images/2015/04/15/todaysbook3.png" alt="todaysbook3.png" /></p>

<p>シート1にはアルファベットと2つの数字が書かれた行があり、シート2には、<a href="http://www.aozora.gr.jp/cards/001670/card56113.html">青空文庫の奇談クラブ</a>からコピーされたであろう本の内容が書かれていました。</p>

<p>シート3には、key:passwordに対応するanswerを入力するような空欄がありました。
このpasswordという文字列はきっとシート1のアルファベットと2つの数字に対応していて、1つ目の数字は行番号、2つ目の数字はその行の文字の位置を指しているだろうと思いました。
Excel Onlineの印刷機能でシート2をHTML形式にし、保存したのちテキストに変換して<a href="http://mzyy94.com/blog/resources/data/2015/04/15/kidanclub.txt">kidanclub.txt</a>を作成し、
シート1を基に、アルファベット<strong>&#8220;password&#8221;</strong>に対応する行から文字を抽出するコードを書きました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/print-book.png" alt="print-book.png" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">119</span><span class="p">,</span><span class="mi">161</span><span class="o">]</span><span class="p">,</span> <span class="c1"># p</span>
</span><span class='line'>  <span class="o">[</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">11</span><span class="o">]</span><span class="p">,</span> <span class="c1"># a</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">276</span><span class="p">,</span> <span class="mi">40</span><span class="o">]</span><span class="p">,</span> <span class="c1"># s</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">276</span><span class="p">,</span> <span class="mi">40</span><span class="o">]</span><span class="p">,</span> <span class="c1"># s</span>
</span><span class='line'>  <span class="o">[</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">58</span><span class="o">]</span><span class="p">,</span> <span class="c1"># w</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">239</span><span class="p">,</span> <span class="mi">44</span><span class="o">]</span><span class="p">,</span> <span class="c1"># o</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">236</span><span class="p">,</span>  <span class="mi">7</span><span class="o">]</span><span class="p">,</span> <span class="c1"># r</span>
</span><span class='line'>  <span class="o">[</span><span class="mi">185</span><span class="p">,</span>  <span class="mi">7</span><span class="o">]</span>  <span class="c1"># d</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">book</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">password</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># One-based numbering</span>
</span><span class='line'>  <span class="n">key</span> <span class="o">+=</span> <span class="n">book</span><span class="o">[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure>


<p>引数に先ほど作成した<a href="http://mzyy94.com/blog/resources/data/2015/04/15/kidanclub.txt">kidanclub.txt</a>を与えて実行してみると、漢字8文字のパスワードを得ることができました。</p>

<!--
$ ruby mondai8.rb kidanclub.txt
"意気揚揚明鏡止水"
-->


<p>mondai5同様、非ASCII文字のパスワードなので、<code>7z.exe</code>を利用してmondai9.zipを解凍しておしまいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt; 7z.exe x mondai9.zip
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.35 beta  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2014 Igor Pavlov  2014-12-07
</span><span class='line'>
</span><span class='line'>Processing archive: mondai9.zip
</span><span class='line'>
</span><span class='line'>Extracting  mondai10.tc
</span><span class='line'>Enter password <span class="o">(</span>will not be echoed<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>Extracting  mondai9.pkt
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Files: 2
</span><span class='line'>Size:       68517107
</span><span class='line'>Compressed: 68241943
</span><span class='line'>
</span><span class='line'>Kernel  <span class="nv">Time</span> <span class="o">=</span>     0.046 <span class="o">=</span>    1%
</span><span class='line'>User    <span class="nv">Time</span> <span class="o">=</span>     0.733 <span class="o">=</span>   16%
</span><span class='line'>Process <span class="nv">Time</span> <span class="o">=</span>     0.780 <span class="o">=</span>   17%    Virtual  <span class="nv">Memory</span> <span class="o">=</span>      <span class="m">2</span> MB
</span><span class='line'>Global  <span class="nv">Time</span> <span class="o">=</span>     4.536 <span class="o">=</span>  100%    Physical <span class="nv">Memory</span> <span class="o">=</span>      <span class="m">4</span> MB
</span></code></pre></td></tr></table></div></figure>




<!--
$ wine 7z.exe x mondai9.zip -p意気揚揚明鏡止水

7-Zip [64] 9.35 beta  Copyright (c) 1999-2014 Igor Pavlov  2014-12-07

Processing archive: mondai9.zip

Extracting  mondai10.tc
Extracting  mondai9.pkt

Everything is Ok

Files: 2
Size:       68517107
Compressed: 68241943

Kernel  Time =     0.046 =    5%
User    Time =     0.733 =   87%
Process Time =     0.780 =   93%    Virtual  Memory =      2 MB
Global  Time =     0.836 =  100%    Physical Memory =      4 MB
-->


<h1>mondai9</h1>

<p>mondai9.pktは<code>file</code>コマンドによると、little-endianなpcapファイルのようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file mondai9.pkt
</span><span class='line'>mondai9.pkt: tcpdump capture file <span class="o">(</span>little-endian<span class="o">)</span> - version 2.4 <span class="o">(</span>Ethernet, capture length 65535<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、拡張子pktはWindowsの関連付けでは、Wiresharkで開けるファイルとなっています。
早速Wiresharkで見てみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/mondai9-wireshark1.png" alt="mondai9-wireshark1.png" /></p>

<p>ざっと目を通した感じ、<code>tcpdump -f 'tcp port 80'</code>によって、fast-uploader.comにアクセスしている様子をキャプチャしたもののようです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/mondai9-wireshark2.png" alt="mondai9-wireshark2.png" /></p>

<p>httpリクエストで絞り込むと、POSTメソッドによってファイルを幾つかアップロードしているようです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/mondai9-wireshark3.png" alt="mondai9-wireshark3.png" /></p>

<p>アップロードしたファイルを抽出しようとメニューのHTTP objectから抽出を試みたのですが、Wiresharkでは<em>multipart/form-data</em>としてPOSTされたデータ中のファイルはうまく取り出せないようなので、NetworkMinerを使います。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/mondai9-networkminer.png" alt="mondai9-networkminer.png" /></p>

<p>NetworkMinerで4つのアップロードされたファイルを抽出したところ、文字化けした2つのExcelファイルと1つのWordファイル、パスワードのかかったzipファイルがありました。
パスワードをクラックするとWordファイルが出てきたので、4つのOfficeファイルを開いてみました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/office-files.png" alt="office-files.png" /></p>

<p>どのOfficeファイルにも文字の記入はなく、答えらしきものがみつかりません。
ファイル名で検索してみたりいろいろしたあと、ファイルのメタ情報を詮索してみることにしたところ、文字化けしたWordファイルにそれらしきものがあることに気づきました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/15/word-property.png" alt="word-property.png" /></p>

<p>これパスワードとしてmondai10.tcをTrueCryptでマウントしてみたところ、開くことができました。</p>

<p>明日は最終問題、mondai10のWrite-upを公開します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネットエージェント最終面接問題 Write-up その2]]></title>
    <link href="http://mzyy94.com/blog/2015/04/14/netagent-mondai5-6/"/>
    <updated>2015-04-14T00:05:14+09:00</updated>
    <id>http://mzyy94.com/blog/2015/04/14/netagent-mondai5-6</id>
    <content type="html"><![CDATA[<p>ネットニュースサイトにも取り上げられ、盛り上がりを見せていたネットエージェントのいきなり最終面接mondaiのWrite-upその2です。</p>

<ul>
<li><a href="http://nlab.itmedia.co.jp/nl/articles/1503/30/news143.html">「解けたらいきなり最終面接」 ネットエージェント、今年も新卒向けに“難問”出題 - ねとらぼ</a></li>
</ul>


<p>某所ではこれらのmondaiを10分で解けたとの声が上がっているようで、世の中にはこの記事とは比べ物にならないくらい効率のよい解き方をしている方がいるようです。それらの解法と比べると、この記事の解法は全部解くのに数日かかっているので、内容が無いも同然という位置付けとなります。
もし10分で解いた猛者たちの解法が公開されていたら、この記事ではなくそちらをご覧になることをお勧めします。</p>

<p>昨日の<a href="http://mzyy94.com/blog/2015/04/13/netagent-mondai1-4/">mondai1からmondai4までのWrite-upの記事</a>に続き、今日はmondai5とmondai6のWrite-upを公開します。</p>

<!-- more -->


<h1>mondai5</h1>

<p>mondai4.zipを解凍した際に出てきたファイル、mondai5は何だろうかと<code>file</code>コマンドを用いて調べると、ASCII textであるらしいことがわかります。テキストエディタで開いてみると、各行76文字で折り返されている、長いBASE64エンコードされた文字列が記載されていました。
そのまま<code>base64</code>に食べさせてデコードします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>base64 -D mondai5 -o mondai5-1
</span></code></pre></td></tr></table></div></figure>


<p>デコードしてできたmondai5-1を<code>file</code>コマンドで調べてみるとまたもASCII textで、内容も先ほどと同じように、各行76文字で折り返されたBASE64エンコード文字列が書かれています。
同じように<code>base64</code>でデコードしてmondai5-2を作成します。</p>

<p>作成したmondai5-2を調べると、なんとmondai5、mondai5-1と同じ形で、またもBASE64エンコード文字列が書かれてるASCII textでした。
これもまた<code>base64</code>でデコードしてmondai5-3を作成します。
できあがった<strong>mondai5-3も同じ形式</strong>なので、同様の手順でmondai5-4を作成します。</p>

<p>mondai5-4は<code>file</code>コマンドで調べると、以下のように返してきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file mondai5-4
</span><span class='line'>mondai5-4: uuencoded or xxencoded text
</span></code></pre></td></tr></table></div></figure>


<p>uuencodeされた文字列が格納されているようです。
<code>uudecode</code>コマンドでmondai5-5を作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>uudecode -o mondai5-5 mondai5-4
</span></code></pre></td></tr></table></div></figure>


<p>mondai5-5を調べてみるとgzip圧縮ファイルだということがわかります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file mondai5-5
</span><span class='line'>mondai5-5: gzip compressed data, from Unix, last modified: Thu Mar <span class="m">19</span> 17:31:56 2015
</span></code></pre></td></tr></table></div></figure>


<p><code>gunzip</code>で解凍してmondai5-6を作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gunzip -d mondai5-5 -c &gt; mondai5-6
</span></code></pre></td></tr></table></div></figure>


<p>mondai5-6を調査してみましょう。<code>file</code>コマンドによるとzip圧縮ファイルとのことなので、中身を調べてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file mondai5-6
</span><span class='line'>mondai5-6: Zip archive data, at least v1.0 to extract
</span><span class='line'><span class="nv">$ </span>7z l mondai5-6
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Listing archive: mondai5-6
</span><span class='line'>
</span><span class='line'>--
</span><span class='line'><span class="nv">Path</span> <span class="o">=</span> mondai5-6
</span><span class='line'><span class="nv">Type</span> <span class="o">=</span> zip
</span><span class='line'>Physical <span class="nv">Size</span> <span class="o">=</span> 1472
</span><span class='line'>
</span><span class='line'>   Date      Time    Attr         Size   Compressed  Name
</span><span class='line'>------------------- ----- ------------ ------------  ------------------------
</span><span class='line'>2015-03-18 18:50:16 ....A         <span class="m">1332</span>         <span class="m">1332</span>  nek
</span><span class='line'>------------------- ----- ------------ ------------  ------------------------
</span><span class='line'>                                  <span class="m">1332</span>         <span class="m">1332</span>  <span class="m">1</span> files, <span class="m">0</span> folders
</span></code></pre></td></tr></table></div></figure>


<p>nekというファイルが格納されているようです。<code>7z</code>コマンドで解凍してnekを取り出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>7z x mondai5-6
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Processing archive: mondai5-6
</span><span class='line'>
</span><span class='line'>Extracting  nek
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Size:       1332
</span><span class='line'>Compressed: 1472
</span></code></pre></td></tr></table></div></figure>


<p>nekを調べると、bzip圧縮ファイルとのことなので、<code>bzip2</code>コマンドで解凍します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file nek
</span><span class='line'>nek: bzip2 compressed data, block <span class="nv">size</span> <span class="o">=</span> 900k
</span><span class='line'><span class="nv">$ </span>bzip2 -d nek -c &gt; mondai5-8
</span></code></pre></td></tr></table></div></figure>


<p>mondai5-8は7z圧縮ファイルとのことなので、<code>7z</code>コマンドで解凍します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file mondai5-8
</span><span class='line'>mondai5-8: 7-zip archive data, version 0.3
</span><span class='line'><span class="nv">$ </span>7z x mondai5-8
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Processing archive: mondai5-8
</span><span class='line'>
</span><span class='line'>Extracting  n
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Size:       974
</span><span class='line'>Compressed: 1082
</span></code></pre></td></tr></table></div></figure>


<p>これによって、nというファイルが展開されます。このファイルはrar圧縮ファイルとのことなので<code>unrar</code>で解凍します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file n
</span><span class='line'>n: RAR archive data, v1d, os: Win32
</span><span class='line'><span class="nv">$ </span>unrar x n
</span><span class='line'>
</span><span class='line'>UNRAR 5.20 beta <span class="m">1</span> freeware      Copyright <span class="o">(</span>c<span class="o">)</span> 1993-2014 Alexander Roshal
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Extracting from n
</span><span class='line'>
</span><span class='line'>Extracting  ne                                                        OK
</span><span class='line'>All OK
</span></code></pre></td></tr></table></div></figure>


<p>neというファイルが出てきましたね。neはlha圧縮されたファイルとのことなので、<code>lha</code>コマンドで解凍します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file ne
</span><span class='line'>ne: LHarc 1.x/ARX archive data <span class="o">[</span>lh0<span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>lha x ne
</span><span class='line'>nex     - Melted   :  o
</span></code></pre></td></tr></table></div></figure>


<p>nexファイルが出来上がりました。はい。調べるとxz圧縮なので<code>xz</code>で解凍します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file nex
</span><span class='line'>nex: xz compressed data
</span><span class='line'><span class="nv">$ </span>xz -d nex -c &gt; mondai5-12
</span></code></pre></td></tr></table></div></figure>


<p>ちょっと疲れたのでコーヒーを飲みます。</p>

<p>mondai5-12を<code>file</code>コマンドで調べると、なんと、判定してくれません！（貧弱なfileめ）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file mondai5-12
</span><span class='line'>mondai5-12: data
</span></code></pre></td></tr></table></div></figure>


<p>マジックナンバーを見てみると、MSWIMとなってることが確認出ました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>xxd mondai5-12 <span class="p">|</span> head -2
</span><span class='line'>0000000: 4d53 <span class="m">5749</span> 4d00 <span class="m">0000</span> d000 <span class="m">0000</span> 000d <span class="m">0100</span>  MSWIM...........
</span><span class='line'>0000010: <span class="m">8000</span> <span class="m">0000</span> <span class="m">0000</span> <span class="m">0000</span> 4ef7 dcb4 6e01 bfe4  ........N...n...
</span></code></pre></td></tr></table></div></figure>


<p>Googleで「&#8221;MSWIM&#8221; magic number」として調べると、1番目に次のページがヒットします。</p>

<p><a href="http://en.wikipedia.org/wiki/Windows_Imaging_Format">Windows Imaging Format - Wikipedia, the free encyclopedia</a></p>

<p>このWikipediaの記事の最後に、<em>LZX圧縮だし7zとかで開けるよ（意訳）</em>と書いてあるので、<code>7z</code>で展開を試みてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>7z x mondai5-12
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Processing archive: mondai5-12
</span><span class='line'>
</span><span class='line'>Extracting  QRcode
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Size:       16052
</span><span class='line'>Compressed: 17310
</span></code></pre></td></tr></table></div></figure>


<p>あっさりと展開でき、QRcodeという名のファイルが出てきました。
このファイルの形式はSun raster image dataとのことです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file QRcode
</span><span class='line'>QRcode: Sun raster image data, <span class="m">123</span> x 123, 8-bit, RGB colormap
</span></code></pre></td></tr></table></div></figure>


<p>画像データらしいですが、開けるアプリケーションを持ち合わせていないので、ImageMagickに投げ込んでみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>convert QRcode qrcode.png
</span><span class='line'><span class="nv">$ </span>file qrcode.png
</span><span class='line'>qrcode.png: PNG image data, <span class="m">123</span> x 123, 4-bit grayscale, non-interlaced
</span></code></pre></td></tr></table></div></figure>


<p>さすがImageMagick難なく変換できたすごい！
簡単に開ける形式の画像ファイルができたので開いてみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/14/qrcode.png" alt="qrcode.png" /></p>

<p><a href="http://mzyy94.com/blog/2014/12/07/seccon2014-online/">半分食べられてしまったパンケーキ</a>ではなく、普通のQRコードでした。</p>

<p>適当なQRコードリーダーで読み込むと、以下のような文字列が得られます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>+BCcENQQxBEMEQAQwBEgEOgQw-
</span></code></pre></td></tr></table></div></figure>


<p>+で始まり-で終わる文字列、そう、UTF-7エンコード文字列です。
+と-の間はUTF-16のBASE64エンコード文字列（ただしパッディングの=が省略されている）なので、<code>nkf</code>で変換してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span>BCcENQQxBEMEQAQwBEgEOgQw <span class="p">|</span> nkf -mB -W16B
</span></code></pre></td></tr></table></div></figure>




<!--
Чебурашка
-->


<p>何やらロシア語らしきものが出てきます。意味を調べると、ロシアの絵本のキャラクターとのことです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/14/Cheburashka.jpg" alt="Cheburashka.jpg" /></p>

<p>これ以上解くものがなくなったので、これがmondai5の答えのようです。しかし<code>7z</code>コマンドで解凍を試みても、パスワードが違うと言われる始末です。</p>

<p>p7zipの<code>7z</code>コマンドによる非ASCII文字パスワード付き7zipの解凍・圧縮は、環境によって正しく処理されないということを、以前日本語パスワードをセットしたときに経験したのを思い出し、本家7zipの<code>7z.exe</code>を使って解凍をしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>wine 7z.exe x mondai6.zip
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.35 beta  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2014 Igor Pavlov  2014-12-07
</span><span class='line'>
</span><span class='line'>Processing archive: mondai6.zip
</span><span class='line'>
</span><span class='line'>Extracting  hint6.txt
</span><span class='line'>Enter password <span class="o">(</span>will not be echoed<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>Extracting  mondai6.txt
</span><span class='line'>Extracting  mondai7.zip
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Files: 3
</span><span class='line'>Size:       70362410
</span><span class='line'>Compressed: 70373511
</span><span class='line'>
</span><span class='line'>Kernel  <span class="nv">Time</span> <span class="o">=</span>     0.046 <span class="o">=</span>    1%
</span><span class='line'>User    <span class="nv">Time</span> <span class="o">=</span>     0.780 <span class="o">=</span>   17%
</span><span class='line'>Process <span class="nv">Time</span> <span class="o">=</span>     0.826 <span class="o">=</span>   18%    Virtual  <span class="nv">Memory</span> <span class="o">=</span>      <span class="m">2</span> MB
</span><span class='line'>Global  <span class="nv">Time</span> <span class="o">=</span>     4.394 <span class="o">=</span>  100%    Physical <span class="nv">Memory</span> <span class="o">=</span>      <span class="m">4</span> MB
</span></code></pre></td></tr></table></div></figure>




<!--
$ wine 7z.exe x mondai6.zip -pЧебурашка

7-Zip [64] 9.35 beta  Copyright (c) 1999-2014 Igor Pavlov  2014-12-07

Processing archive: mondai6.zip

Extracting  hint6.txt
Extracting  mondai6.txt
Extracting  mondai7.zip

Everything is Ok

Files: 3
Size:       70362410
Compressed: 70373511

Kernel  Time =     0.046 =    5%
User    Time =     0.811 =   89%
Process Time =     0.858 =   94%    Virtual  Memory =      2 MB
Global  Time =     0.909 =  100%    Physical Memory =      4 MB
-->


<p>解凍できました！（やっと終わった。。）</p>

<h1>mondai6</h1>

<p>mondai6.txtには以下のように記載がありました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>http://49.212.84.208/cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi
</span></code></pre></td></tr></table></div></figure>


<p>実際にこのURLにアクセスしに行くと、次のようなレスポンスを得られました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -v http://49.212.84.208/cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi
</span><span class='line'>* Hostname was NOT found in DNS cache
</span><span class='line'>*   Trying 49.212.84.208...
</span><span class='line'>* Connected to 49.212.84.208 <span class="o">(</span>49.212.84.208<span class="o">)</span> port <span class="m">80</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi HTTP/1.1
</span><span class='line'>&gt; User-Agent: curl/7.37.1
</span><span class='line'>&gt; Host: 49.212.84.208
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>&lt; Date: Tue, <span class="m">07</span> Apr <span class="m">2015</span> 08:20:21 GMT
</span><span class='line'>* Server Apache/2.2.3 <span class="o">(</span>CentOS<span class="o">)</span> is not blacklisted
</span><span class='line'>&lt; Server: Apache/2.2.3 <span class="o">(</span>CentOS<span class="o">)</span>
</span><span class='line'>&lt; Connection: close
</span><span class='line'>&lt; Transfer-Encoding: chunked
</span><span class='line'>&lt; Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>&lt;
</span><span class='line'><span class="o">{</span> <span class="o">[</span>data not shown<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>* Closing connection 0
</span><span class='line'>&lt;HTML&gt;&lt;BODY&gt;use R4000
</span><span class='line'>&lt;/BODY&gt;&lt;/HTML&gt;
</span></code></pre></td></tr></table></div></figure>


<p>なにやらR4000を使えとの文字だけが返ってきました。
R4000でGoogle検索すると、MIPSのプロセッサ情報がいくつか引っかかります。
MIPS R4000を搭載したデバイスでアクセスすればいいのかな？と思ったので、
Googleで「MIPS R4000 デバイス」で検索し、MIPS R4000搭載のデバイスを探してみました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/14/mips-r4000-search.png" alt="mips-r4000-search.png" /></p>

<p>検索結果1ページ目によると、PSPに搭載されているとの情報がいくつかヒットしていました。
早速PSPのブラウザからアクセスする際に送られるUser-Agentを調べてみます。</p>

<p><a href="http://www.openspc2.org/userAgent/">userAgent一覧/ユーザーエージェント一覧</a></p>

<p>このサイトによると、PSPのUAは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Mozilla/4.0 <span class="o">(</span>PSP PlayStation Portable<span class="o">)</span><span class="p">;</span> 2.00<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>となっているようです。</p>

<p>早速このUAで先ほどのURLにアクセスしてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -v -A <span class="s1">&#39;Mozilla/4.0 (PSP PlayStation Portable); 2.00)&#39;</span> http://49.212.84.208/cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi
</span><span class='line'>* Hostname was NOT found in DNS cache
</span><span class='line'>*   Trying 49.212.84.208...
</span><span class='line'>* Connected to 49.212.84.208 <span class="o">(</span>49.212.84.208<span class="o">)</span> port <span class="m">80</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi HTTP/1.1
</span><span class='line'>&gt; User-Agent: Mozilla/4.0 <span class="o">(</span>PSP PlayStation Portable<span class="o">)</span><span class="p">;</span> 2.00<span class="o">)</span>
</span><span class='line'>&gt; Host: 49.212.84.208
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>&lt; Date: Tue, <span class="m">07</span> Apr <span class="m">2015</span> 08:31:47 GMT
</span><span class='line'>* Server Apache/2.2.3 <span class="o">(</span>CentOS<span class="o">)</span> is not blacklisted
</span><span class='line'>&lt; Server: Apache/2.2.3 <span class="o">(</span>CentOS<span class="o">)</span>
</span><span class='line'>&lt; Content-Length: 42
</span><span class='line'>&lt; Connection: close
</span><span class='line'>&lt; Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>&lt;
</span><span class='line'>* Closing connection 0
</span><span class='line'>&lt;HTML&gt;&lt;BODY&gt;de la Bucure?ti
</span><span class='line'>&lt;/BODY&gt;&lt;/HTML&gt;
</span></code></pre></td></tr></table></div></figure>


<p>レスポンスが変わりました。知らない国の言葉で書かれていたのでGoogle翻訳にタイプしてみると、ルーマニア語であるとの情報を得ました。</p>

<p>先ほどのレスポンスの一部文字が&#8221;?&#8221;となっているので、ルーマニア語を許容するヘッダーを付加すると表示が変わるかもしれないと思い、Accept-Languageにルーマニア語を指定してアクセスしてみました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl -v -H <span class="s1">&#39;Accept-Language: ro-RO&#39;</span> -A <span class="s1">&#39;Mozilla/4.0 (PSP PlayStation Portable); 2.00)&#39;</span> http://49.212.84.208/cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi
</span><span class='line'>* Hostname was NOT found in DNS cache
</span><span class='line'>*   Trying 49.212.84.208...
</span><span class='line'>* Connected to 49.212.84.208 <span class="o">(</span>49.212.84.208<span class="o">)</span> port <span class="m">80</span> <span class="o">(</span><span class="c">#0)</span>
</span><span class='line'>&gt; GET /cgi-bin/hode7hb376dgeas6df783gr4/mondai6.cgi HTTP/1.1
</span><span class='line'>&gt; User-Agent: Mozilla/4.0 <span class="o">(</span>PSP PlayStation Portable<span class="o">)</span><span class="p">;</span> 2.00<span class="o">)</span>
</span><span class='line'>&gt; Host: 49.212.84.208
</span><span class='line'>&gt; Accept: */*
</span><span class='line'>&gt; Accept-Language: ro-RO
</span><span class='line'>&gt;
</span><span class='line'>&lt; HTTP/1.1 <span class="m">200</span> OK
</span><span class='line'>&lt; Date: Tue, <span class="m">07</span> Apr <span class="m">2015</span> 08:35:33 GMT
</span><span class='line'>* Server Apache/2.2.3 <span class="o">(</span>CentOS<span class="o">)</span> is not blacklisted
</span><span class='line'>&lt; Server: Apache/2.2.3 <span class="o">(</span>CentOS<span class="o">)</span>
</span><span class='line'>&lt; Connection: close
</span><span class='line'>&lt; Transfer-Encoding: chunked
</span><span class='line'>&lt; Content-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
</span><span class='line'>&lt;
</span><span class='line'>* Closing connection 0
</span><span class='line'>&lt;HTML&gt;&lt;BODY&gt;key: Minesweeper1990
</span><span class='line'>&lt;/BODY&gt;&lt;/HTML&gt;
</span></code></pre></td></tr></table></div></figure>


<p>表示が変わり、mondai6の答えが出てきました。mondai7.zipのパスワードに指定して解凍してmondai6はおしまいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>7z x mondai7.zip
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Processing archive: mondai7.zip
</span><span class='line'>
</span><span class='line'>Extracting  hint7.txt
</span><span class='line'>Enter password <span class="o">(</span>will not be echoed<span class="o">)</span> :
</span><span class='line'>
</span><span class='line'>Extracting  mondai8.zip
</span><span class='line'>Extracting  normal.exe
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Files: 3
</span><span class='line'>Size:       70383731
</span><span class='line'>Compressed: 70362268
</span></code></pre></td></tr></table></div></figure>




<!--
$ 7z x mondai7.zip -pMinesweeper1990

7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 (locale=utf8,Utf16=on,HugeFiles=on,4 CPUs)

Processing archive: mondai7.zip

Extracting  hint7.txt
Extracting  mondai8.zip
Extracting  normal.exe

Everything is Ok

Files: 3
Size:       70383731
Compressed: 70362268
-->


<p>明日はmondai7からmondai9までのWrite-upを公開する予定です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネットエージェント最終面接問題 Write-up その1]]></title>
    <link href="http://mzyy94.com/blog/2015/04/13/netagent-mondai1-4/"/>
    <updated>2015-04-13T14:08:49+09:00</updated>
    <id>http://mzyy94.com/blog/2015/04/13/netagent-mondai1-4</id>
    <content type="html"><![CDATA[<p>恒例のネットエージェントのいきなり最終面接問題が3月末に公開されました。</p>

<ul>
<li><a href="http://www.netagent.co.jp/recruit/newgraduates_2016.html">2016年度 新卒採用｜ネットエージェント株式会社</a></li>
</ul>


<p>ネットニュースサイトにも取り上げられ（<a href="http://nlab.itmedia.co.jp/nl/articles/1503/30/news143.html">「解けたらいきなり最終面接」 ネットエージェント、今年も新卒向けに“難問”出題 - ねとらぼ</a>）、盛り上がりを見せていたあのmondaiです。
2016年新卒として、書類審査や2次選考を飛ばして最終面接を受けられるということなので本腰を入れて取り組んでみました。
このいきなり最終面接問題に関しては、全問正解しなければ回答の公開をしてはいけないとのことだったので察しがつくと思いますが、なんとかすべての問題をクリアできました。
これらmondaiを解いてきた過程をWrite-upとして残すことにしたので、興味がある方はご覧ください。</p>

<p>この記事ではmondai1からmondai4までの回答を掲載しています。</p>

<!-- more -->


<h1>mondai1</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>選考過程を縮めたい方に問題を用意いたしました。問題に答えると最終面接から始められます。 
</span><span class='line'>※２０１６年３月卒業予定の方以外も挑戦していただけますが、採用対象とはなりません。
</span><span class='line'>問題：LzYxMDIvcGouaGJwLy86cHR0aA==
</span></code></pre></td></tr></table></div></figure>


<p>BASE64でエンコードされた文字列を渡されるので、ちょちょっとコマンドを打つと逆さまになったURLがでてきます。</p>

<p>なので<code>rev</code>コマンドを噛ませて逆順にしてアクセス可能なURLが表示されたらmondai1はおしまいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="nv">LzYxMDIvcGouaGJwLy86cHR0aA</span><span class="o">==</span> <span class="p">|</span> base64 -D <span class="p">|</span> rev
</span></code></pre></td></tr></table></div></figure>


<!--
http://pbh.jp/2016/
-->


<h1>modai2</h1>

<p>mondai1の答えのURLにアクセスするとzip圧縮されたファイルを入手でき、そのファイルを展開するとmondai2.txtとzip形式の圧縮ファイルがあります。mondai2.txtの内容は以下の通りでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>2016の平方根の小数点以下2016桁目から20桁をパスワードにしました。
</span></code></pre></td></tr></table></div></figure>


<p>大きな有効数字の平方根を扱えるコマンドが*nix系システムには存在します。そう<code>bc</code>コマンドです。</p>

<p>この<code>bc</code>コマンドを用いて小数点以下2035桁(2015番目から20桁)の2016の平方根を計算させます。
<code>bc</code>コマンドによる出力は、適当な桁数で折り返しがあるので<code>perl</code>の正規表現を用いて削り、<code>tail</code>で終端から20バイトを取り出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;scale=2015+20;sqrt(2016)&#39;</span> <span class="p">|</span> bc <span class="p">|</span> perl -pe<span class="s1">&#39;s/\\?\n//&#39;</span> <span class="p">|</span> tail -c20
</span></code></pre></td></tr></table></div></figure>




<!--
74571026133060730881
-->


<p>これをパスワードとして入力すればmondai3.zipを解凍できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>7z x mondai3.zip
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Processing archive: mondai3.zip
</span><span class='line'>
</span><span class='line'>Extracting  hint3.txt
</span><span class='line'>Enter password <span class="o">(</span>will not be echoed<span class="o">)</span> :
</span><span class='line'>
</span><span class='line'>Extracting  mondai3.txt
</span><span class='line'>Extracting  mondai4.zip
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Files: 3
</span><span class='line'>Size:       70392202
</span><span class='line'>Compressed: 70392736
</span></code></pre></td></tr></table></div></figure>




<!--

$ 7za x mondai3.zip -p74571026133060730881

7-Zip (a) [64] 9.38 beta  Copyright (c) 1999-2014 Igor Pavlov  2015-01-03
p7zip Version 9.38.1 (locale=ja_JP.UTF-8,Utf16=on,HugeFiles=on,4 CPUs)

Processing archive: mondai3.zip

Extracting  hint3.txt
Extracting  mondai3.txt
Extracting  mondai4.zip

Everything is Ok

Files: 3
Size:       70392202
Compressed: 70392736

-->


<h1>mondai3</h1>

<p>mondai3.txtの中身は以下の通り。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ハッシュパスワード問題
</span><span class='line'>答え：３つの答えをつなげて
</span><span class='line'>
</span><span class='line'>0f1aae8b8398c20f81e1c36e349a7880c9234c63
</span><span class='line'>01821f5469967540a5a774197463e8c4d658f588
</span><span class='line'>264f39cab871e4cfd65b3a002f7255888bb5ed97
</span></code></pre></td></tr></table></div></figure>


<p>パスワードを3つに分割してSHA1ハッシュを生成したものが記されており、それらの元の文字列を探し出せばいいというもの。広いWebの世界には単純な単語のハッシュ化前後のテーブルが存在し、手軽に利用できるものに
<a href="http://www.hashkiller.co.uk/sha1-decrypter.aspx">SHA1 Decrypter - SHA1 Decryption, Free SHA1 Decryptor, Online SHA1 Cracker, SHA1 Security</a>などがあります。このサイトに問題のハッシュ値をペーストして探索をかけると1秒足らずでハッシュ化前の数値を返してくれます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/13/hashkiller.png" alt="hashkiller.png" /></p>

<p>ここで得られた単語をそのままくっつけてパスワードに指定すると、mondai4.zipが解凍できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>7z x mondai4.zip
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Processing archive: mondai4.zip
</span><span class='line'>
</span><span class='line'>Extracting  hint4.txt
</span><span class='line'>Enter password <span class="o">(</span>will not be echoed<span class="o">)</span> :
</span><span class='line'>
</span><span class='line'>Extracting  mondai4.png
</span><span class='line'>Extracting  mondai5.zip
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Files: 3
</span><span class='line'>Size:       70391846
</span><span class='line'>Compressed: 70391891
</span></code></pre></td></tr></table></div></figure>




<!--
$ 7za x mondai4.zip -ptokyouenoline

7-Zip (a) [64] 9.38 beta  Copyright (c) 1999-2014 Igor Pavlov  2015-01-03
p7zip Version 9.38.1 (locale=ja_JP.UTF-8,Utf16=on,HugeFiles=on,4 CPUs)

Processing archive: mondai4.zip

Extracting  hint4.txt
Extracting  mondai4.png
Extracting  mondai5.zip

Everything is Ok

Files: 3
Size:       70391846
Compressed: 70391891

-->


<h1>mondai4</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/13/mondai4.png" alt="mondai4.png" />
mondai4.pngはヒエログリフが書かれた画像です。ヒエログリフを読解できなければ問題文すら読めない状況なので、ヒエログリフ学習サイトを探して学びます。以下のサイトを参考に3分ほどで学びました。</p>

<ul>
<li><a href="http://www004.upp.so-net.ne.jp/anubis/j50/jp50.html">日本語五十音をヒエログリフで表現</a></li>
</ul>


<p>ヒエログリフを学び終わると、すらすらと画像の文字が読めるようになるので、日本語に起こします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>のらかちいくち　てちのちんちもちみら　もにみちもにみら　もにとちのにみちもちい　のらもらま
</span></code></pre></td></tr></table></div></figure>


<p>ぱっと見で平仮名で換字式暗号化された英文もしくはローマ字の文だと想像がつきます。ここで適当な文節として二言目の「てちのちんちもちみら」をGoogleで検索してみると、上位にヒットしたものにこの暗号の手がかりがでてきます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/13/techinochi-search.png" alt="techinochi-search.png" /></p>

<p>日本語キーボードのかな入力モードにしてローマ字の文を打った文は、母音に位置する「ら」や「ち」が多く登場することから、この暗号方式はカナ入力のままのローマ字打ちだと断定しました。
しかし英字キーボードユーザーなので、かなが印刷されたキーボードを持っていません。仕方なしにWikimediaでそれっぽい画像を拾ってきて、平仮名⇆アルファベット変換を行うと、上記の平仮名文字列は以下のように変換できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kotaeha wakayamano minamino misakinamae komoji
</span></code></pre></td></tr></table></div></figure>


<p>「答えは和歌山の南の岬名前小文字」とのことです。早速Googleマップを開いて和歌山県の南にある岬を探します。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/04/13/wakayama-map.png" alt="wakayama-map.png" /></p>

<p>探すと潮岬（読み：しおのみさき）が和歌山の南部にある岬なので、これをアルファベット小文字にしてパスワードにして回答終了…だとおもってました。
<strong>shionomisaki</strong>としてタイプしてもパスワードが間違っていると言われ、解凍できません。「もしや違う岬なのかな？」と思い、和歌山の岬をいろいろ調べて同じように入力しても開きません。もうだめ&#8230;と心折れそうになってしまったので、あとはBruteForceに任せようと、次のような適当なスクリプトを書いて放置しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># kana 50 components</span>
</span><span class='line'><span class="n">vowel5</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;u&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">consonant5</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;k&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;sh&#39;</span><span class="p">,</span> <span class="s1">&#39;t&#39;</span><span class="p">,</span> <span class="s1">&#39;ch&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">,</span> <span class="s1">&#39;j&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;p&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">vowel3</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;u&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">consonant3</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;ky&#39;</span><span class="p">,</span> <span class="s1">&#39;sy&#39;</span><span class="p">,</span> <span class="s1">&#39;ts&#39;</span><span class="p">,</span> <span class="s1">&#39;ny&#39;</span><span class="p">,</span> <span class="s1">&#39;hy&#39;</span><span class="p">,</span> <span class="s1">&#39;by&#39;</span><span class="p">,</span> <span class="s1">&#39;gy&#39;</span><span class="p">,</span> <span class="s1">&#39;py&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># kana list</span>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">v</span> <span class="k">in</span> <span class="n">vowel5</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">list</span><span class="o">.</span><span class="n">push</span> <span class="n">v</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">c</span> <span class="k">in</span> <span class="n">consonant5</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">v</span> <span class="k">in</span> <span class="n">vowel5</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">list</span><span class="o">.</span><span class="n">push</span> <span class="n">c</span> <span class="o">+</span> <span class="n">v</span>
</span><span class='line'>      <span class="n">list</span><span class="o">.</span><span class="n">push</span> <span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="n">v</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">c</span> <span class="k">in</span> <span class="n">consonant3</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">v</span> <span class="k">in</span> <span class="n">vowel3</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">list</span><span class="o">.</span><span class="n">push</span> <span class="n">c</span> <span class="o">+</span> <span class="n">v</span>
</span><span class='line'>      <span class="n">list</span><span class="o">.</span><span class="n">push</span> <span class="n">c</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="n">v</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">push</span> <span class="s1">&#39;nn&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">locker</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">::</span><span class="kp">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Wordlist generator</span>
</span><span class='line'><span class="n">queue</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="no">Thread</span><span class="o">.</span><span class="n">start</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">q</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">p0</span> <span class="k">in</span> <span class="n">list</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">for</span> <span class="n">p1</span> <span class="k">in</span> <span class="n">list</span> <span class="k">do</span>
</span><span class='line'>          <span class="k">for</span> <span class="n">p2</span> <span class="k">in</span> <span class="n">list</span> <span class="k">do</span>
</span><span class='line'>              <span class="k">for</span> <span class="n">p3</span> <span class="k">in</span> <span class="n">list</span> <span class="k">do</span>
</span><span class='line'>                  <span class="k">for</span> <span class="n">p4</span> <span class="k">in</span> <span class="n">list</span> <span class="k">do</span>
</span><span class='line'>                      <span class="k">for</span> <span class="n">p5</span> <span class="k">in</span> <span class="n">list</span> <span class="k">do</span>
</span><span class='line'>                          <span class="n">q</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="n">p5</span>
</span><span class='line'>                          <span class="n">qq</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>                          <span class="k">unless</span> <span class="n">qq</span> <span class="o">=~</span> <span class="sr">/^(.)\1/</span> <span class="k">then</span>
</span><span class='line'>                              <span class="n">locker</span><span class="o">.</span><span class="n">synchronize</span> <span class="p">{</span> <span class="n">queue</span><span class="o">.</span><span class="n">push</span> <span class="n">qq</span> <span class="p">}</span>
</span><span class='line'>                          <span class="k">end</span>
</span><span class='line'>                      <span class="k">end</span>
</span><span class='line'>                      <span class="n">q</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="n">p4</span>
</span><span class='line'>                  <span class="k">end</span>
</span><span class='line'>                  <span class="n">q</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="n">p3</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>              <span class="n">q</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">p2</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="n">q</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">p1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">q</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">p0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Password cracker</span>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;Cracking...&#39;</span>
</span><span class='line'><span class="n">thread_count</span> <span class="o">=</span> <span class="mi">128</span>
</span><span class='line'><span class="n">threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">found</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="n">thread_count</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="n">threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span> <span class="p">{</span>
</span><span class='line'>      <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>          <span class="k">break</span> <span class="k">if</span> <span class="n">found</span>
</span><span class='line'>          <span class="k">break</span> <span class="k">unless</span> <span class="n">queue</span>
</span><span class='line'>          <span class="n">pass</span> <span class="o">=</span> <span class="n">locker</span><span class="o">.</span><span class="n">synchronize</span> <span class="p">{</span> <span class="n">queue</span><span class="o">.</span><span class="n">shift</span> <span class="p">}</span> <span class="o">+</span> <span class="s2">&quot;misaki&quot;</span>
</span><span class='line'>          <span class="n">t</span> <span class="o">=</span> <span class="nb">system</span> <span class="s2">&quot;7za x -p</span><span class="si">#{</span><span class="n">pass</span><span class="si">}</span><span class="s2"> -so mondai5.zip &gt; /dev/null 2&gt; /dev/null&quot;</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">t</span> <span class="k">then</span>
</span><span class='line'>              <span class="n">found</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>              <span class="nb">puts</span> <span class="s1">&#39;## PASS FOUND ##&#39;</span>
</span><span class='line'>              <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;pass.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">puts</span> <span class="n">pass</span> <span class="p">}</span>
</span><span class='line'>              <span class="nb">puts</span> <span class="s1">&#39;pass saved.&#39;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">threads</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">th</span><span class="o">|</span> <span class="n">th</span><span class="o">.</span><span class="n">join</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>1時間ほどお風呂に入って放置していたら、答えが吐き出されていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">time</span> ./solver.rb
</span><span class='line'>Cracking...
</span><span class='line'><span class="c">## PASS FOUND ##</span>
</span><span class='line'>pass saved.
</span><span class='line'>
</span><span class='line'>real    16m44.573s
</span><span class='line'>user    30m36.171s
</span><span class='line'>sys     18m7.269s
</span></code></pre></td></tr></table></div></figure>


<p>潮岬（読み：しおのみさき）の「潮」の字を「うしお」と読み違えて（？）パスワードに設定していたようです。</p>

<p>このパスワードを入力することでmondai5.zipを展開することができました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>7z x mondai5.zip
</span><span class='line'>
</span><span class='line'>7-Zip <span class="o">[</span>64<span class="o">]</span> 9.20  Copyright <span class="o">(</span>c<span class="o">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span><span class='line'>p7zip Version 9.20 <span class="o">(</span><span class="nv">locale</span><span class="o">=</span>utf8,Utf16<span class="o">=</span>on,HugeFiles<span class="o">=</span>on,4 CPUs<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Processing archive: mondai5.zip
</span><span class='line'>
</span><span class='line'>Extracting  hint5.txt
</span><span class='line'>Enter password <span class="o">(</span>will not be echoed<span class="o">)</span> :
</span><span class='line'>
</span><span class='line'>Extracting  mondai5
</span><span class='line'>Extracting  mondai6.zip
</span><span class='line'>
</span><span class='line'>Everything is Ok
</span><span class='line'>
</span><span class='line'>Files: 3
</span><span class='line'>Size:       70380412
</span><span class='line'>Compressed: 70378640
</span></code></pre></td></tr></table></div></figure>


<!--

$ 7za x mondai5.zip -pushiomisaki

7-Zip (a) [64] 9.38 beta  Copyright (c) 1999-2014 Igor Pavlov  2015-01-03
p7zip Version 9.38.1 (locale=ja_JP.UTF-8,Utf16=on,HugeFiles=on,4 CPUs)

Processing archive: mondai5.zip

Extracting  hint5.txt
Extracting  mondai5
Extracting  mondai6.zip

Everything is Ok

Files: 3
Size:       70380412
Compressed: 70378640

-->


<p>mondai5以降のWrite-upは明日公開します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X向けmikutterパッケージ(Homebrew)作ったよ]]></title>
    <link href="http://mzyy94.com/blog/2015/03/13/mikutter-brew-formula/"/>
    <updated>2015-03-13T10:48:00+09:00</updated>
    <id>http://mzyy94.com/blog/2015/03/13/mikutter-brew-formula</id>
    <content type="html"><![CDATA[<p>3月13日ですがミクの日です。</p>

<p>mikutterをご存知ない方はいないと思いますが、簡単に説明すると、日本で一番有名なツイッタークライアントのことです。
このmikutter、Linuxの幾つかのメジャーなディストリビューションにはパッケージが用意されているのですが、
革新的なOSであるOS Xにはパッケージが存在せず、導入する際には各自ちまちまと依存関係をクリアしていかなければいけないのです。</p>

<p>新しいMacBookが発表されて世のOS Xユーザーも0.1‰ほど増えるだろうというこの時期に、mikutterがパッケージ管理されない状態が続いていていいのでしょうか。</p>

<p>そんな自問自答からOS X用パッケージマネージャーの<a href="http://brew.sh/index_ja.html">Homebrew</a>向けにパッケージを作ったのでご報告です。</p>

<!-- more -->


<h1>Brew formulae</h1>

<p>Homebrewでは、パッケージをformulaという形で管理しています。
このformulaは、パッケージの依存関係とソースコードやバイナリの場所、そしてインストール処理を行うスクリプトが書かれているRubyのコードでできています。
新しいパッケージを追加したい場合などはこのformulaを作成し、HomebrewのリポジトリにPull-Requestを行う事で大元のパッケージ群に追加してもらうことができます。
この新しいformulaの作成はbrewコマンドで行うことができます。
詳しくは<a href="https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Formula-Cookbook.md">homebrew/Formula-Cookbook.md at master · Homebrew/homebrew</a>を参考にしてください。</p>

<h1>mikutter formula</h1>

<p>前節のようにしてPull-Requestを行っている状態のBrewパッケージとして、mikutter formulaを作成しました。
mikutterを動作させる上で必要なライブラリ等の依存関係も解決してインストールするようにできています。</p>

<p><a href="https://github.com/Homebrew/homebrew/pull/37642">mikutter 3.2.2 (new formula) by mzyy94 · Pull Request #37642 · Homebrew/homebrew</a></p>

<p>このformulaがHomebrewのリポジトリにマージされればコマンド1行打ち込むだけでmikutterのインストールが完了するのですが、
まだマージされていないので2行のコマンドを打つ必要があります。
今までは、 tar-ballをダウンロードしてGTK+インストールしてgemインストールして&#8230; と、10行近くコマンドを打ち込まなければいけなかったので2行でも大きな進歩と言えます。</p>

<h1>#mikutterInstallBattle</h1>

<p>皆さん大好き#mikutterInstallBattleの時間です。</p>

<p>まず、最低限必要なものは以下の2つです。</p>

<ul>
<li><a href="http://brew.sh">Homebrew</a></li>
<li><a href="https://xquartz.macosforge.org">Xquartz.app</a></li>
</ul>


<p>パッケージマネージャーのHomebrewとX11アプリケーションのためのX Window SystemであるXquartzを導入しておくだけでいいです。</p>

<p>あとはHomebrewのコマンドを叩くだけ。
執筆時点(2015/3/13 10:24:33+JST)ではまだPull-Requestはマージされていないので、まずPull-Requestからformulaを引っ張ってきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew pull 37642</span></code></pre></td></tr></table></div></figure>


<p>無事formulaが取得できたらあとは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install mikutter</span></code></pre></td></tr></table></div></figure>


<p>でインストールができます。</p>

<p>そして、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mikutter</span></code></pre></td></tr></table></div></figure>


<p>で起動します。
以上です。</p>

<h1>日本語入力</h1>

<p>日本語入力はインストールしたての状態ではできないので各自ぐぐってがんばってください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[無印良品で買えるRaspberry Pi2にぴったりのケース]]></title>
    <link href="http://mzyy94.com/blog/2015/03/09/muji-raspberry-pi-enclosure/"/>
    <updated>2015-03-09T12:09:04+09:00</updated>
    <id>http://mzyy94.com/blog/2015/03/09/muji-raspberry-pi-enclosure</id>
    <content type="html"><![CDATA[<p>Raspberry Pi2を発売日に2つ注文したものの、ケースを準備していなかったので手軽に買えるRaspberry Piにぴったりの入れ物はないかと
近所のショッピングモールを回ったところ、無印良品に寸法ぴったりのケースがいつくか売られていたので購入してみました。</p>

<!-- more -->


<h1>ポリプロピレンフタ付石けん置き・大</h1>

<p>無印良品ネットストア価格：税込350円</p>

<p><a href="http://www.muji.net/store/cmdty/detail/4548718640850">http://www.muji.net/store/cmdty/detail/4548718640850</a></p>

<ul>
<li>寸法：約７０×１０５×３５ｍｍ</li>
<li>素材：ポリプロピレン</li>
</ul>


<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-soapcase-1.jpg" alt="muji-soapcase-1" /></p>

<p>1つ目は寸法がRaspberry Piのために作られたかと感じるほどにピッタリサイズの石鹸ケース。本当にピッタリサイズです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-soapcase-2.jpg" alt="muji-soapcase-2" /></p>

<p>スポンジ付きで、ケース内に収めた時の安定性・可搬性は抜群です。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-soapcase-3.jpg" alt="muji-soapcase-3" />
<img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-soapcase-4.jpg" alt="muji-soapcase-4" /></p>

<p>ただ、エッジが尖っているRaspberry Pi 1 model B（プラスではない）は引っかかってしまい、格納できませんでした。</p>

<h1>ポリプロピレンペンケース（横型）　大</h1>

<p>無印良品ネットストア価格：税込263円</p>

<p><a href="http://www.muji.net/store/cmdty/detail/4547315371297">http://www.muji.net/store/cmdty/detail/4547315371297</a></p>

<ul>
<li>寸法：約１７０×５１×２０ｍｍ</li>
<li>素材：ポリプロピレン</li>
</ul>


<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-pencase-1.jpg" alt="muji-pencase-1" /></p>

<p>奥行きがRaspberry Piにピッタリで横幅がRaspberry Pi 二台分のケース。2台同時に持ち運んだり格納する際に利用したいケースです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-pencase-2.jpg" alt="muji-pencase-2" />
<img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-pencase-3.jpg" alt="muji-pencase-3" /></p>

<h1>ポリプロピレン救急用品ケース</h1>

<p>無印良品ネットストア価格：税込231円</p>

<p><a href="http://www.muji.net/store/cmdty/detail/4945247506822">http://www.muji.net/store/cmdty/detail/4945247506822</a></p>

<ul>
<li>寸法：約７５×１１０×４６ｍｍ</li>
<li>素材：ポリプロピレン</li>
</ul>


<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-facase-1.jpg" alt="muji-facase-1" /></p>

<p>奥行き・幅・高さともにゆとりのあるケース。いろいろな部品を装着したRaspberry Piに適しています。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-facase-2.jpg" alt="muji-facase-2" />
<img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-facase-3.jpg" alt="muji-facase-3" /></p>

<p>ちなみに石鹸ケースがぴったりおさまります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-facase-4.jpg" alt="muji-facase-4" /></p>

<h1>アクリルケース用・ベロア内箱仕切・縦・グレー</h1>

<p>無印良品ネットストア価格：税込600円</p>

<p><a href="http://www.muji.net/store/cmdty/detail/4945247381009">http://www.muji.net/store/cmdty/detail/4945247381009</a></p>

<ul>
<li>寸法：約幅１６×奥行１２×高さ２．５ｃｍ</li>
<li>素材：？？</li>
</ul>


<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-innercase-1.jpg" alt="muji-innercase-1" /></p>

<p>平置きで2台格納できるケース。蓋がないので可搬性はゼロですがポンと置いておく分には手軽で机の上に一つ置いておくとよい品です。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-innercase-2.jpg" alt="muji-innercase-2" /></p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/03/09/muji-innercase-3.jpg" alt="muji-innercase-3" /></p>

<h1>まとめ</h1>

<table>
<thead>
<tr>
<th style="text-align:center;">商品名</th>
<th style="text-align:center;">サイズ</th>
<th style="text-align:center;">加工</th>
<th style="text-align:center;">可搬性</th>
<th style="text-align:right;">価格</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">石けん置き・大</td>
<td style="text-align:center;">ぴったり</td>
<td style="text-align:center;">容易</td>
<td style="text-align:center;">◎スポンジ付き</td>
<td style="text-align:right;">350</td>
</tr>
<tr>
<td style="text-align:center;">ペンケース・大</td>
<td style="text-align:center;">2個分</td>
<td style="text-align:center;">容易</td>
<td style="text-align:center;">○2個で安定</td>
<td style="text-align:right;">263</td>
</tr>
<tr>
<td style="text-align:center;">救急用品ケース</td>
<td style="text-align:center;">余裕あり</td>
<td style="text-align:center;">容易</td>
<td style="text-align:center;">△上下に動く</td>
<td style="text-align:right;">231</td>
</tr>
<tr>
<td style="text-align:center;">ベロア内箱仕切</td>
<td style="text-align:center;">2個分</td>
<td style="text-align:center;">厳しい</td>
<td style="text-align:center;">×蓋なし</td>
<td style="text-align:right;">600</td>
</tr>
</tbody>
</table>


<p>どれも電源やLANケーブル用を接続するには加工が必要となりますが、上3つの素材はポリプロピレンなので加工は意外と簡単です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[柚子胡椒でサーバーを壊さないために]]></title>
    <link href="http://mzyy94.com/blog/2015/03/06/yuzu-trouble/"/>
    <updated>2015-03-06T18:05:49+09:00</updated>
    <id>http://mzyy94.com/blog/2015/03/06/yuzu-trouble</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet" lang="ja"><p>【急募】PCIスロットに詰まった柚子胡椒を取り除く方法</p>&mdash; えびみっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/573719000464556033">2015, 3月 6</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>柚子胡椒を部屋中にぶちまけたところ、メンテナンス中だったサーバーのマザーボードに降りかかり、あろうことか柚子胡椒がPCIeスロットに入り込んでいました。
すでにそのような経験のある人には不要な記事かもしれませんが、Twitter経由で得られた、柚子胡椒とサーバーをお持ちのみなさまによる解決案と対策をまとめました。</p>

<!-- more -->


<h1>事の経緯</h1>

<blockquote class="twitter-tweet" lang="ja"><p>柚子胡椒のチューブの出が悪い&#10;↓&#10;振って出やすくする&#10;↓&#10;キャップ閉め忘れる&#10;↓&#10;部屋中に柚子胡椒が飛び散る&#10;↓&#10;メンテナンス中のサーバーに降りかかってる&#10;↓&#10;PCIスロットに詰まってる</p>&mdash; えびみっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/573719406284398592">2015, 3月 6</a></blockquote>


<p>柚子胡椒を出したかっただけなのです。</p>

<p>追記：ここにまとめられているようです。</p>

<p><a href="http://togetter.com/li/791586">柚子胡椒スロット - Togetterまとめ</a></p>

<h1>解決案</h1>

<p>柚子胡椒を取り除く解決案がいくつか寄せられたのでご紹介します。</p>

<h2>吹き付ける</h2>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> ふつうにエアダスターとかでは</p>&mdash; 日替わりデトックス (@polamjag) <a href="https://twitter.com/polamjag/status/573721418392727552">2015, 3月 6</a></blockquote>


<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> マジレスすると逆さまにして下からブレーキクリーナーを吹いて流すくらいですかねー&#10;ある程度は爪楊枝や紙で取っておくといいでしょう</p>&mdash; タモ＝サーン (@tamosan) <a href="https://twitter.com/tamosan/status/573721435580956672">2015, 3月 6</a></blockquote>


<p>エアダスターは手持ちを切らしていてトライできず。ブレーキクリーナーは持ってなかったので試せなかったのですが、油分の多い調味料がスロットに入った場合は効果的かもしれません。</p>

<h2>吸う</h2>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 単なる思い付きで確証はないですがハンダ吸い取り器とか使えませんかね</p>&mdash; ゆーいちろー@沈降中 (@Yuichiro_S) <a href="https://twitter.com/Yuichiro_S/status/573721963736096768">2015, 3月 6</a></blockquote>


<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 掃除機で吸えば……</p>&mdash; 堀石 廉 (@Holyithylene) <a href="https://twitter.com/Holyithylene/status/573720291160944641">2015, 3月 6</a></blockquote>


<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 「急いで口で吸え！」とか自分が知らないネタを言ってみる</p>&mdash; 赤井太一 (@CM_cube) <a href="https://twitter.com/CM_cube/status/573720661647982592">2015, 3月 6</a></blockquote>


<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 電源入れてあっためたらとんでも無いことになりそう・・・！　うーん、、掃除機で吸い出して、その後なんとか拭き取るってのもあるけど錆びちゃいそうですよね・・・吹かないと。</p>&mdash; salexkidd (@salexkidd) <a href="https://twitter.com/salexkidd/status/573722031193116673">2015, 3月 6</a></blockquote>


<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> まず大きな塊はストローで吸い取れませんか</p>&mdash; Koike (@kichi_robo) <a href="https://twitter.com/kichi_robo/status/573721080570888194">2015, 3月 6</a></blockquote>


<!--blockquote class="twitter-tweet" lang="ja"><p>水吸うパーツもあるからなあ。掃除機で吸う→乾かす→エアダスターアンド掃除機でさらに吸う とかでよかった気もする <a href="https://twitter.com/hashtag/%E6%9F%9A%E5%AD%90%E8%83%A1%E6%A4%92?src=hash">#柚子胡椒</a></p>&mdash; \m (@m43net) <a href="https://twitter.com/m43net/status/573743610425815041">2015, 3月 6</a></blockquote-->


<p>一番多かった解決案です。吸引力でなんとかなる調味料もあるかもしれませんが、PCIスロットに潜む柚子胡椒はあの半固体感と適度な粘性によって、半田吸い取り機での吸引は効果ゼロでした。あと手元にある掃除機はルンバだけなので、掃除機チャレンジはできませんでした。</p>

<h2>洗い流す</h2>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> もう、マザーボードはずして水洗いしか。バックアップバッテリーはずすの忘れないように。</p>&mdash; 堀石 廉 (@Holyithylene) <a href="https://twitter.com/Holyithylene/status/573721583505661952">2015, 3月 6</a></blockquote>


<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> <a href="https://twitter.com/takauke">@takauke</a> 純アルコールに漬け込んでみてはいかがですかね？</p>&mdash; いとー@東京 (@transistor) <a href="https://twitter.com/transistor/status/573723431113334784">2015, 3月 6</a></blockquote>


<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 最終手段としては、CMOS電池外す⇒中性洗剤で洗う⇒水道水でよくすすぐ&#10;⇒純水ですすぐ⇒エタノール漬けで脱水⇒よく乾燥させるくらいですかね？</p>&mdash; 桜庭ねむ＠醤油屋L０L1エンジニア (@sakuraba_nemu) <a href="https://twitter.com/sakuraba_nemu/status/573724225879441409">2015, 3月 6</a></blockquote>


<p>今回採用したケースです。塩分と油分の含まれる柚子胡椒には中性洗剤を溶いた純水（純水の定義については後述）が効果的であるという目論見のもと、この解決案を採用しました。乾燥にはアルコール（エタノール）を使用するというのがマザボ水洗い界隈には定石のようです。</p>

<h1>トラブル対処の図</h1>

<blockquote class="twitter-tweet" lang="ja"><p>TLの皆様からの貴重な解決法の提供を受け&#10;・純水使用&#10;・中性洗剤使用&#10;・歯ブラシは危険&#10;・エタノールで水分揮発&#10;を実践してみます。各位貴重な情報ありがとうございます。 <a href="http://t.co/z6TDweZYOL">pic.twitter.com/z6TDweZYOL</a></p>&mdash; PCI柚子胡椒職人 (@mzyy94) <a href="https://twitter.com/mzyy94/status/573728196991918080">2015, 3月 6</a></blockquote>


<h1>注意点</h1>

<h2>純水と精製水は違う</h2>

<blockquote class="twitter-tweet" lang="ja"><p>純水と超純水はちがうっすよ，PCI柚胡椒氏．．．</p>&mdash; じとめすきー (@jitomesky) <a href="https://twitter.com/jitomesky/status/573729225326247936">2015, 3月 6</a></blockquote>


<p>手元にあった純水は、サーバーで飼っていたえびの汽水濃度を調節するものです。また、純水≠精製水であり、電子機器の洗浄に用いられるのは超純水というものであるそうです。慌てふためいていたのですっかり「純水＝純水という名の水」と勘違いしてしまい、純水(精製水ではない)を使ってしまいました。</p>

<blockquote class="twitter-tweet" lang="ja"><p>&gt;&gt; 半導体などの電子部品や電子回路の基板、更には液晶パネルに使うガラスなどの製造工程で使う洗浄水には、ごく微量の不純物が残っていても製品の品質に重大な影響を及ぼすため、純水から純度を更に上げた超純水を用いる必要がある。</p>&mdash; じとめすきー (@jitomesky) <a href="https://twitter.com/jitomesky/status/573728845771071488">2015, 3月 6</a></blockquote>


<p>薬局で「精製水」と記載のあるあるものを利用するのが、一般家庭での基板洗浄には最適だそうです。</p>

<h2>歯ブラシでこする</h2>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> マジレスすると歯ブラシはやめておいたほうがいいっす。ホコリとろうとしてやったら中のピンが大変なことに…（AGPスロットだったけど）</p>&mdash; salexkidd (@salexkidd) <a href="https://twitter.com/salexkidd/status/573720752198840320">2015, 3月 6</a></blockquote>


<p>確かに細かいピンが並んでるPCIeスロットは下手に歯ブラシでこすると傷つけたりピン折れたりしそうなので、たとえ柚子胡椒が入り込んでもおっしゃる通りやめておきましょう。</p>

<h2>つけ置き</h2>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 失礼します。精製水の方が良いのはその通りですが、水道水で洗う人もいて、通常なんてことはないのでこの際気にしないで良いのでは。柚子胡椒はちゃんと落とさないと腐蝕の原因になると思いますが。買い出しに行って水に漬けっぱなしの方が心配。</p>&mdash; アキ (@Jaguaimo) <a href="https://twitter.com/Jaguaimo/status/573741851758366720">2015, 3月 6</a></blockquote>


<p>密かに隠れている柚子胡椒成分が染み出している場合なども考えると、つけ置きは良くないということですね。常識的に考えてもマザーボードをつけ置きするなんてこと聞いたことないですし、やめておくのが得策です。</p>

<h1>先駆者の言葉</h1>

<blockquote class="twitter-tweet" lang="ja"><p>PCIもPCIeもそんなチャチな節点じゃないよ。LGAも</p>&mdash; ふぁるす (@sushi514) <a href="https://twitter.com/sushi514/status/573738766453473280">2015, 3月 6</a></blockquote>


<h1>対策</h1>

<blockquote class="twitter-tweet" lang="ja"><p>俺も柚子胡椒を振る時はちゃんとキャップ閉めよう</p>&mdash; やまじゅん (@MtJune11) <a href="https://twitter.com/MtJune11/status/573737721786593280">2015, 3月 6</a></blockquote>


<p>以上です。</p>

<h1>おすすめ柚子胡椒</h1>

<h2>瓶入り</h2>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 柚子胡椒はびん入りのがあるので、アキバの日本百貨店あたりでGetできるかと。あっちのほーが色々便利かもよ？</p>&mdash; タモ＝サーン (@tamosan) <a href="https://twitter.com/tamosan/status/573781580545593345">2015, 3月 6</a></blockquote>


<p>瓶入りなので振ってPCIスロットに詰まるという事故が防げます。</p>

<h2>ゆずすこ</h2>

<blockquote class="twitter-tweet" lang="ja"><p>福岡土産でもらった覚えがあるけど、柚子胡椒にお酢を加えてタバスコ風にしたYUZUSCO（ゆずすこ）っていう調味料があるよ</p>&mdash; mzsm (@mzsm_j) <a href="https://twitter.com/mzsm_j/status/573736798838484992">2015, 3月 6</a></blockquote>


<blockquote class="twitter-tweet" lang="ja"><p>液体の柚子胡椒「ゆずすこ」 ゆずすこ [楽天] <a href="http://t.co/dRvymRSKzH">http://t.co/dRvymRSKzH</a> <a href="https://twitter.com/hashtag/RakutenIchiba?src=hash">#RakutenIchiba</a> <a href="http://t.co/2xHIh09Xpe">pic.twitter.com/2xHIh09Xpe</a></p>&mdash; mzsm (@mzsm_j) <a href="https://twitter.com/mzsm_j/status/573738420742193152">2015, 3月 6</a></blockquote>


<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/tamosan">@tamosan</a> <a href="https://twitter.com/mzyy94">@mzyy94</a> <a href="http://t.co/juLQl708Lx">http://t.co/juLQl708Lx</a>　あとはゆずすこ なんてものも…</p>&mdash; greenz(修験者) (@greenz_greenz) <a href="https://twitter.com/greenz_greenz/status/573782317505757185">2015, 3月 6</a></blockquote>


<p>酢が入った液体の柚子胡椒もあるようです。これなら粘性が低そうなので取り除きやすいかもしれません。</p>

<h2>赤いゆずこしょう</h2>

<blockquote class="twitter-tweet" lang="ja"><p>赤もありました：高山物産 の 高山さんの赤いゆずごしょう（柚子胡椒赤）120g を Amazon でチェック！ <a href="http://t.co/MOULMnZQO8">http://t.co/MOULMnZQO8</a></p>&mdash; 対テロ戦争 (@syuu1228) <a href="https://twitter.com/syuu1228/status/573740978680393728">2015, 3月 6</a></blockquote>


<p>赤い柚子胡椒もあるそうです。これならマザーボードに詰まっても見つけやすく、取り残しの心配が減りますね。</p>

<h2>S&amp;B柚子こしょう40g</h2>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=mzyy-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B0084J95W8" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>今回登場した柚子胡椒です。PCIスロットに入りやすいのでご注意ください。</p>

<h1>まとめ</h1>

<blockquote class="twitter-tweet" lang="ja"><p>柚子胡椒のためになんで野口3枚も飛ばさにゃならんのだ。。</p>&mdash; PCI柚子胡椒職人 (@mzyy94) <a href="https://twitter.com/mzyy94/status/573765816887345152">2015, 3月 6</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="ja"><p>@各位&#10;&#10;届きましたのでご報告です <a href="http://t.co/NEzVslGQpf">pic.twitter.com/NEzVslGQpf</a></p>&mdash; PCI柚子胡椒職人 (@mzyy94) <a href="https://twitter.com/mzyy94/status/573999511258861569">2015, 3月 7</a></blockquote>




<blockquote class="twitter-tweet" lang="ja"><p>@贈り物をして下さった方々&#10;&#10;最高の調味料各種を確認いたしました。 <a href="http://t.co/P5rxR8xkkP">pic.twitter.com/P5rxR8xkkP</a></p>&mdash; PCI柚子胡椒職人 (@mzyy94) <a href="https://twitter.com/mzyy94/status/574001187554390016">2015, 3月 7</a></blockquote>




<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KodiでChinachuの録画を観るAdd-on作った]]></title>
    <link href="http://mzyy94.com/blog/2015/02/24/kodi-chinachu-addon/"/>
    <updated>2015-02-24T19:28:35+09:00</updated>
    <id>http://mzyy94.com/blog/2015/02/24/kodi-chinachu-addon</id>
    <content type="html"><![CDATA[<p>Raspberry Pi2でKodi（旧：XBMC)が快適に動き、地デジのLIVE視聴環境として優れているので、
Chinachuの本領である録画した動画の視聴したみが高まってきました。</p>

<p>Kodiには簡単にAdd-onが作れる仕組みがあり、動画や音楽のコンテンツを独自で配信・管理する仕組みがつくれます。
Chinachuには録画ファイルの情報とストリーミング視聴ができるREST APIが搭載されているので、
これを叩いてKodiで動画コンテンツを視聴できるAdd-onを作ったのでお知らせいたします。</p>

<!-- more -->


<h1>Kodi/XBMC Add-on</h1>

<p>KodiではPythonを用いてGUIやコンテンツを操るAdd-onを作成できるようになっています。
Add-on作成に関する情報は<a href="http://kodi.wiki/view/Add-on_development">Add-on development - Kodi</a>にあるので、作成はそこまで難しくないです。
コンテンツ管理プラグインの他にも、スキンやバックグラウンドサービスも同じAdd-onの構造で作成できるので興味がある人は作ってみてください。</p>

<h1>Chinachu client add-on</h1>

<p>ChinachuのREST APIを叩いて動画を取得してコンテンツ一覧に表示、再生、そしてChinachuサーバー上の録画データを削除できるAdd-onを作成しました。</p>

<p><strong><a href="https://github.com/mzyy94/plugin.video.chinachu">https://github.com/mzyy94/plugin.video.chinachu</a></strong></p>

<p>Releaseのページからダウンロードして設定のアドオンからzipファイルからインストールでインストールしてください。
その後、有効なアドオンの一覧からビデオアドオンにあるChinachu clientを探し、設定を開いてChinachuの動くサーバーのアドレスとその他オプションを設定すると利用できるようになります。</p>

<h2>使い方</h2>

<p>利用方法は、Kodiトップにあるビデオメニューの中のビデオアドオンからChinachu clientを起動するだけです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/24/launch-chinachu-client.png" alt="Launch Chinachu client" /></p>

<p>一覧の動画を選択した状態で右クリックを押すかメニューを表示すると、メニュー中に削除の項目があります。
これを選択すると、確認ダイアログ表示の後、Chinachuで管理されている<strong>録画ファイルと録画情報の両方を削除</strong>します。
キャンセルはできないのでご注意を。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/24/deletion-dialog.png" alt="File deletion" /></p>

<h2>設定</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/24/configuration-window.png" alt="Configuratoin window" /></p>

<p>Chinachu clientには幾つか設定を設けてあります。</p>

<h3>基本</h3>

<p>基本となるChinachuのURLの設定は必須です。Chinachu-WUIのAPIを叩くので、プロトコルとポート番号を含めたURLを設定してください。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/24/general-configuration.png" alt="General configuratoin" /></p>

<h3>ストリーミング</h3>

<p>ストリーミングカテゴリにはChinachu WUIでストリーミングする際に指定するものと同じ感覚で設定してください。
MPEG-2 ハードウェアデコーダーを導入してあるRasPi2ではこのオプションは未設定の方が良いと思います。</p>

<h3>サムネイル</h3>

<p>サムネイルカテゴリには、Chinachu APIのpreview.jpgを取得してKodiのサムネイルフォルダにキャッシュするオプションがあります。
avconvで生成している都合上、取得には時間がかかるので必要でなければ無効のままにしておくことをお勧めします。
また、一度サムネイルを取得し始めるとKodiを終了するまでバックグラウンドで取得し続けます。さらに、未取得のサムネイルは毎囘取得しに行きます。
この点ご注意ください。</p>

<p>サムネイルが不要になった際は、キャッシュのクリアもできます。</p>

<h3>動画情報</h3>

<p>動画情報カテゴリでは、動画情報に関する細かなオプションがあります。</p>

<p>エピソード番号を強制的に指定オプションは、一部のテーマ向けの設定です。
放送日がエピソード番号が指定されていないと表示されないテーマがあるため、放送日が表示されない動画がある場合は有効にしてください。
このオプションが有効の場合、バラエティ番組など連続したエピソードがない放送にエピソード番号に1を指定します。</p>

<p>チャンネル名を表示する場所を選択するオプションも、一部のテーマ向けの設定です。
通常、チャンネル名はスタジオとして動画情報に登録されている場合、動画の詳細情報に表示されるのですが、テーマによってはスタジオを表示しないものがあるようです。
チャンネル名が表示されないなと思ったらこのオプションをいじってみてください。</p>

<h2>動作してる図</h2>

<p>こんなかんじです。
スキンは一番上はConfluenceで他はTitanです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/24/preview1.png" alt="Preview1" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/24/preview2.png" alt="Preview2" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/24/preview3.png" alt="Preview3" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/24/preview4.png" alt="Preview4" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/24/preview5.png" alt="Preview5" /></p>

<h1>まとめ</h1>

<p>Raspberry Pi2は買いである</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KodiとChinachuで地デジLive視聴 on Raspberry Pi2 w/ OSMC]]></title>
    <link href="http://mzyy94.com/blog/2015/02/21/kodi-livetv-chinachu/"/>
    <updated>2015-02-21T07:02:43+09:00</updated>
    <id>http://mzyy94.com/blog/2015/02/21/kodi-livetv-chinachu</id>
    <content type="html"><![CDATA[<p>どうも、Raspberry Pi2で遊ぶ毎日が続いております。
Raspberry Pi model B（2ではない）にRaspbmcを入れて昨年の夏頃からChinachu経由で地上デジタル放送を視聴する環境を構築していたのですが、
いかんせんスペックが低く、チャンネル切り替え時などにもたついていました。</p>

<p>Raspberry Pi2が発売され、従来の6倍のパフォーマンスが発揮できるようになり、もたつきがなく不便しなくなってきたので、
Raspbmc改めOSMCで地デジ視聴をする方法をまとめます。</p>

<!-- more -->


<h1>PVRクライアント</h1>

<p>Kodi(旧:XBMC)にはテレビ放送を視聴するためのPVRクライアントという機能があります。
テレビ放送の配信携帯に合わせていくつかPVRクライアントがAdd-onとして提供されていますが、汎用的につかえるものに
<a href="https://github.com/afedchin/xbmc-addon-iptvsimple/">XBMC IPTV Simple Client</a>というものがあります。</p>

<p>XBMCからKodiに名称変更した際に、Kodi本体にこれらのPVRクライアントはあらかじめバンドルされるようになり、
これまでは各自ビルドしてインストールしていたのが、設定して有効化するだけで使えるようになっています。
もちろんこのIPTV Simple Clientもバンドルされています。これを使って地デジを視聴する環境を構築します。</p>

<h2>IPTV Simple Client</h2>

<p>このAdd-onは、m3u形式で配信されているチャンネル配信情報と、<a href="http://wiki.xmltv.org/index.php/XMLTVFormat">XMLTV形式</a>で配信されている番組表情報を用いてネットワーク経由でテレビを視聴することができるPVRクライアントです。
数あるプレイリストフォーマットの中でも一般的な形式であるm3uと、<a href="http://www.mythtv.org/">MythTV</a>などのテレビ視聴・録画クライアントがサポートするEPG番組表形式であるXMLTVを用いているため、テレビ放送配信側となるサーバーがサポートしていれば簡単に地デジをKodiで視聴できます。
G
今回テレビ放送を配信するサーバーとしてはChinachuを使いますが、残念ながら上記のm3u形式のチャンネル情報とXMLTV形式の番組表情報は提供されていません。
なので、Chinachuに2つのファイルを追加して機能を追加することで対応するようにしました。</p>

<h1>Chinachu</h1>

<p>数ある地デジ録画管理ソフトウェアの中でもモダンなデザインで、使い勝手がよくREST APIを提供している素敵なソフトウェアです。
Chinachuは番組の録画・再生が主な機能とされていますが、現在放送中の番組の視聴にも対応しており、APIを経由することでいろいろなクライアントから再生することができます。
しかし、前途の通りChinachuが提供するAPIでは、IPTV Simple Clientが対応するm3u形式のプレイリストやXMLTV形式の番組表情報は取得できません。
幸いなことに、ChinachuへのAPIの追加は難しくなく、Chinachuが動作するディレクトリ直下にある<strong>api</strong>ディレクトリにAPIリソース情報とスクリプトを配置することで必要なAPIを追加することができます。</p>

<p>IPTV Simple Clientに必要な、</p>

<ul>
<li>m3u形式でのチャンネル配信情報</li>
<li>XMLTV形式での番組表情報</li>
</ul>


<p>の二つをAPIで提供するファイルを作りました。
以下からダウンロードしてapiディレクトリのファイルをChinachuのapiディレクトリに放り込んでください。</p>

<p><em><a href="https://github.com/mzyy94/Chinachu-IPTV-API-addon">https://github.com/mzyy94/Chinachu-IPTV-API-addon</a></em></p>

<p>これを導入すると、</p>

<ul>
<li><code>/api/iptv/channel.m3u8</code>にチャンネル配信情報</li>
<li><code>/api/iptv/epg.xml</code>にXMLTV情報</li>
</ul>


<p>が提供されるようになります。</p>

<h1>KodiでSimple IPTV Clientの設定</h1>

<p>サーバー側の準備は整ったのでKodiの方の設定をします。前回の記事で日本語化したRaspberry Pi2で動くOSMC上のKodiでの設定方法になります。</p>

<p>上記の通り、KodiにはPVRクライアントが導入されているので、Add-on管理から設定をして有効化するだけで準備ができます。</p>

<p>まず、設定のAdd-onの中にある無効なアドオンからPVR Simple IPTV Clientを探して選択し、設定画面を開きます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/disabled-addons.png" alt="Disabled add-ons" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/21/iptv-simple-client-addon.png" alt="IPTV Simple client" /></p>

<p>設定画面にあるM3UプレイリストのURLとXMLTV URLにChinachuのWUIが動作するURLに続けて、下図のように設定します。
各自環境に合わせて<code>chinachu:10772</code>の部分を書き換えてください。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/addon-configure1.png" alt="Add-on configure1" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/21/addon-configure2.png" alt="Add-on configure2" /></p>

<p>設定を終えたらSimple IPTV Clientの<strong>有効</strong>を選択して有効にし、Kodiの全体の設定にあるLive TV設定に移動してLCD有効(誤訳？)すると、
トップの画像のようにライブTVの項目が現れ、PVRが利用できるようになります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/enable-pvr.png" alt="Enable PVR" /></p>

<p>m3uプレイリストとしてAPIが提供するチャンネルは、Chinachuの設定ファイルに記載の通りの順番でサブチャンネル含め配信しているので、
後日紹介するであろうリモコンを使ってチャンネル切り替えを行う場合は、Live TV設定のチャンネルマネージャーからグループ管理を行って、
不要なチャンネルを隠すことでリモコンでの操作に適したチャンネルのみを切り替え可能にできます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/channel-manager1.png" alt="Channel Manager1" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/21/channel-manager2.png" alt="Channel Manager2" />
<img src="http://mzyy94.com/blog/resources/images/2015/02/21/channel-manager3.png" alt="Channel Manager3" /></p>

<p>ここまで終わった状態で、Kodiのトップに移動するとライブTVの項目が増えているはずです。これを選択すると、デフォルトではEPG番組表が表示されます。
Kodi上でキーボードのEを押すと同じようにEPG番組表が表示されます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/pvr-epg.png" alt="PVR EPG view" /></p>

<p>ここで、バックスペースキーを押すとチャンネル一覧を表示するメニューが現れるので、そちらに切り替えると現在放送中の番組情報が表示されます。
もしくはキーボードのHを押すことでチャンネル一覧が表示できます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/21/pvr-channel.png" alt="PVR Channel view" /></p>

<p>ここで好きなようにチャンネルを切り替え、地デジを観ることができます。</p>

<h1>まとめ</h1>

<p>MPEG-2ライセンスを導入してあるRaspberry Pi2だとサクサク地デジが見られる。</p>

<blockquote class="twitter-tweet"><p>Raspberry Pi 2での地デジ視聴時の負荷&#10;HWデコーダー有効にするとフレームドロップなしでCPU負荷はほぼゼロ <a href="http://t.co/rAzv7eCTGW">pic.twitter.com/rAzv7eCTGW</a></p>&mdash; 犬みっきー (@mzyy94) <a href="https://twitter.com/mzyy94/status/565610656809091072">February 11, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi2にOSMC入れてKodi(旧:XBMC)日本語化するまで]]></title>
    <link href="http://mzyy94.com/blog/2015/02/16/raspberry-pi2-osmc-jp/"/>
    <updated>2015-02-16T20:05:56+09:00</updated>
    <id>http://mzyy94.com/blog/2015/02/16/raspberry-pi2-osmc-jp</id>
    <content type="html"><![CDATA[<p>今月頭の発表で一気に盛り上がりを見せた<a href="http://www.raspberrypi.org/products/raspberry-pi-2-model-b/">Raspberry Pi 2 Model B</a>。もちろん発売日に購入しました。
手元にはRaspberry Pi BとGalileo Gen2の2つのLinuxが動く小型ボードがあるんですが、主にメディアセンター用途で使おうとしていたRaspberry Pi Bに性能面で不満を抱いていたため、今回この新バージョン購入は即決しました。</p>

<p>Raspberry Piでのメディアセンター用途で代表的なのは<a href="http://www.raspbmc.com/">Raspbmc</a>ですが、
このプロジェクトは<a href="https://osmc.tv/about/">OSMC</a>に移行するようで、2015年2月2日のFinalリリースの配布をもって終了となりました。</p>

<p>ということで、Raspberry Pi 2 Model B(以下、RPi2B)にOSMCを導入して日本語化するまでのメモを残します。</p>

<!-- more -->


<h1>OSMCインストール</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/16/osmc-installer.png" alt="OSMC Installer" /></p>

<p>OSMCは<a href="https://osmc.tv/download/">https://osmc.tv/download/</a>からインストーラーがダウンロードできるので、自分の使ってるOSにあったインストーラーをダウンロード・実行して、microSDHCにイメージを書き込むだけです。2015/2/16時点での最新版であるAlpha 4をインストールしました。</p>

<h1>日本語化</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/16/osmc-mainmenu.png" alt="OSMC main menu" /></p>

<p>起動するとこんな感じです。OSMCテーマ標準のフォントは流行りのLightなウェイトを持つRobotoとOpenSansが利用されているため、もちろんのこと日本語は表示できません。
テーマのデザインを損ねることなく、日本語でも美しい細字のフォントで表示したく思い、<a href="http://mplus-fonts.sourceforge.jp/mplus-outline-fonts/index.html">M+ FONT</a>を利用することにしました。</p>

<p>M+ FONTはJIS第一水準までの漢字を網羅し、極細から極太まで7種のウェイトを収録した美しいフリーフォントです。
LightウェイトフォントでJIS第二水準まで含むオープンなフォントはAdobeとGoolgeが共同で開発・公開している<a href="https://www.google.com/get/noto/cjk.html">Noto Sans CJK</a>/<a href="https://github.com/adobe-fonts/source-han-sans/tree/release">Source Han Sans</a>があります。しかし、OpenTypeフォントとしての配布である上に、TrueTypeに変換しても18MB前後のフォントファイルとなってしまい、Kodiで読み込めないことを確認したのでM+ FONTを利用します。</p>

<p>M+ FONTを利用するため、OSMC上で以下のスクリプトを実行するか、<code>curl -L http://git.io/pjg5 | sh -</code>とするとデフォルトフォントをM+ FONTに差し替えられます。
OSMCへはSSHで（USER/PASSともに<code>osmc</code>）ログインしてください。※パスワードの変更をお忘れなく。</p>

<script src="https://gist.github.com/mzyy94/15ee1b3880107e9d7ece.js"></script>


<p>このあと、Settings->Appearance->International->Japaneseとすることで、以下のような美しい日本語メニューが表示されるようになります。</p>

<p>（本当は日本語化したくてやったんじゃなく、次の記事で紹介する地デジの番組表情報が表示されるようにするために日本語フォントが必要で導入したので、表示確認後英語表記に戻しました。）</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/02/16/osmc-mainmenu-jp.png" alt="OSMC JP" /></p>

<h1>MPEG-2ライセンス購入</h1>

<p>メディアプレイヤー用途として使うにはMPEG-2のハードウェアデコードを有効化して、快適に動画（地デジ）再生ができるようにしたいと思い、ライセンスを購入しました。</p>

<p>Raspberry PiはMPEG-2ハードウェアデコーダーの利用にライセンス料を課しているので、£2.40支払ってキーを入手します。
<a href="http://www.raspberrypi.com/mpeg-2-license-key/">ライセンスキーストア</a>にシリアル番号を入力してカートに入れ購入手続きし、深夜にでも送られてくるであろうシリアルキーを、
<code>echo decode_MPG2=0xdeadbeef | sudo tee -a /boot/config.txt</code>のようにしてハードウェア設定ファイルに追記し再起動してハードウェアデコーダーを有効にします。</p>

<p>これで快適に地デジなどの動画が再生できるようになります。</p>

<h1>次回予告</h1>

<p>Raspberry Pi 2で地デジ視聴する</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinuxでQSVとH.264のエンコード対決]]></title>
    <link href="http://mzyy94.com/blog/2015/01/31/qsv-x264-linux-battle/"/>
    <updated>2015-01-31T19:23:04+09:00</updated>
    <id>http://mzyy94.com/blog/2015/01/31/qsv-x264-linux-battle</id>
    <content type="html"><![CDATA[<p>先日の記事、でLinuxでH.264の動画をエンコードできることを紹介しました。
そのベンチマークをとってみました。QSVでのエンコードとlibx264を用いたエンコードの比較となります。</p>

<p>今回エンコード時間の比較に用いた動画は以下のものを利用しました。</p>

<p><em><a href="http://www.bigbuckbunny.org">Big Buck Bunny</a></em></p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/big-buck-bunny.png" alt="Big Buck Bunny" /></p>

<p>ここの、<code>big_buck_bunny_1080p_surround.avi</code>を以下の表のオプションでLibx264とQSVでのエンコードで変換し、比較をしてみました。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">項目 </th>
<th style="text-align:center;"> 値</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">音声コーデック</td>
<td style="text-align:center;"> コピー</td>
</tr>
<tr>
<td style="text-align:center;">ビットレート</td>
<td style="text-align:center;">2000kbps</td>
</tr>
<tr>
<td style="text-align:center;">サイズ</td>
<td style="text-align:center;"> 1280x720</td>
</tr>
<tr>
<td style="text-align:center;">フレームレート</td>
<td style="text-align:center;"> 29.97</td>
</tr>
</tbody>
</table>


<p>このオプションで起動すると、<strong>ffmpeg -i big_buck_bunny_1080p_surround.avi -acodec copy -vcodec コーデック -b:v 2000k -s 1280x720 -r 30000/1001 -y 出力ファイル</strong>という起動オプションになります。</p>

<!-- more -->


<h1>仮想8コアでx264エンコード</h1>

<p>Xeon搭載マシンで動かしているKVMに仮想8コアを割り当てた環境でエンコードしてみました。
FFmpegの粋な計らいによって、エンコード中は以下のようにたくさんのスレッドが立ちがあり、マシンはエンコードに専念していました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/x264-8core-encode.png" alt="x264 8core encode" /></p>

<p>CPUはエンコード中、全コア90%前後の使用率を維持していました。そんなエンコードにかかった時間は以下の通りでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real    2m50.118s
</span><span class='line'>user    20m15.617s
</span><span class='line'>sys     0m7.375s</span></code></pre></td></tr></table></div></figure>


<p>10分の動画を3分足らずでエンコードしてしまいました。恐るべきコア数の暴力。</p>

<h1>仮想8コアでQSVエンコード</h1>

<p>先ほどと同じ環境でQSVを用いたエンコードをしてみました。
こちらもFFmpegによって複数のスレッドによる処理がされるのですが、CPUの負荷は多くて各コア10%程度となる非常に省エネなエンコードとなっていました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/qsv-8core-encode.png" alt="QSV 8core encode" /></p>

<p>こんな省エネでもエンコードに要する時間はそれほどかかりませんでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real    3m6.697s
</span><span class='line'>user    2m56.301s
</span><span class='line'>sys     0m4.871s</span></code></pre></td></tr></table></div></figure>


<p>3分とちょっとでエンコードが完了しています。さすがにXeon 8コアにはかなわないようです。</p>

<h1>仮想1コアでx264エンコード</h1>

<p>KVMで割り当てコア数を1コアに設定し、x264を用いたエンコードをしてみました。
負荷はほぼ100%、まれに90%前後になる程度でした。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/x264-1core-encode.png" alt="x264 1core encode" /></p>

<p>じっくりエンコードしてかかった時間は以下のとおりです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real    10m56.739s
</span><span class='line'>user    10m54.374s
</span><span class='line'>sys     0m1.070s</span></code></pre></td></tr></table></div></figure>


<p>動画再生時間+10%程度の時間がかかっていました。</p>

<h1>仮想1コアでQSVエンコード</h1>

<p>QSVとコア数の関係性は不明ながら、比較のために同じ環境でQSVでもエンコードしてみました。
負荷はほとんどないかと思ってたのですが、エンコーダに渡す前処理などで少々CPUを使うようで、90%前後まで達したり0%付近をうろうろしたりと、不安定な負荷がかかっていました。また、なぜか2スレッドで処理していました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/qsv-1core-encode.png" alt="qsv 1core encode" /></p>

<p>要した時間は以下のとおりです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real    3m0.692s
</span><span class='line'>user    2m35.944s
</span><span class='line'>sys     0m0.972s</span></code></pre></td></tr></table></div></figure>


<p>予想はついていましたが、QSVでは8コアでも1コアでもほとんど時間は変わらないようです。</p>

<h1>仮想1コアで複数のQSVエンコード&#8230;?</h1>

<p>記事公開直後にこのような気になる意見をいただきました。</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/mzyy94">@mzyy94</a> 一コア使用QSVで複数同時エンコしたらどうなるか実験してもらえるとうれしいです</p>&mdash; の (@polamjag) <a href="https://twitter.com/polamjag/status/561469823561920513">January 31, 2015</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>早速、QSVでの同時エンコードを試してみました。
tmuxで分割し、上下のコンソールで同時にエンコードを開始してみた結果が以下の画像のとおりになります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/31/qsv-1core-multi-encode.png" alt="qsv 1core multi encode" /></p>

<p>ライブラリがIGPへアクセスできないようでアクセス違反起こして終了してしまうため、QSVでの同時エンコードはダメでした。</p>

<h2>ファイルサイズ比較</h2>

<p>ビットレート固定なのでそれほど違いはありませんが、ファイルサイズは以下のようになっています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ls -l
</span><span class='line'>total 1261812
</span><span class='line'>-rw-rw-r--. 1 ninniku ninniku 928670754 May  6  2008 big_buck_bunny_1080p_surround.avi
</span><span class='line'>-rw-rw-r--. 1 ninniku ninniku 179373021 Jan 31 02:27 big_buck_bunny_qsv.mp4
</span><span class='line'>-rw-rw-r--. 1 ninniku ninniku 184045287 Jan 31 02:23 big_buck_bunny_x264.mp4</span></code></pre></td></tr></table></div></figure>


<p>QSVでエンコードしたほうが4MBほどファイルサイズが小さくなっていました。</p>

<h1>品質について</h1>

<p>x264とQSVの比較では目立った差異は見受けられなかったです。視力の問題かもしれませんが。</p>

<h1>まとめ</h1>

<p>動画再生時間の3分の1程度でエンコードができるQSVはLinuxでもすごい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intel QSVのH.264エンコードをLinuxで！]]></title>
    <link href="http://mzyy94.com/blog/2015/01/30/intel-qsv-on-linux/"/>
    <updated>2015-01-30T22:22:03+09:00</updated>
    <id>http://mzyy94.com/blog/2015/01/30/intel-qsv-on-linux</id>
    <content type="html"><![CDATA[<p><a href="http://mzyy94.com/blog/2014/12/12/kvm-intel-hd-graphics-passthrough/">前回の記事</a>から1ヶ月以上空いてしまいました。遅ればせながらで申し訳ありません。続編です。
Intel QSVは高速にある程度の画質のエンコードできてよいです。とても。</p>

<p>今回はKVMでIntel HD Graphicsをパススルーした仮装マシン上に、SDKのインストールとカーネルモジュールのインストール、そしてffmpegでのQSVによるH.264エンコードができる環境づくりまでの手順をご紹介します。
<del>これが意外と骨が折れる作業だったので同じような思いをせぬよう、ご熟読ください。</del>（書き直す前の文章です。書き直した理由は後述。）</p>

<!-- more -->


<h1>Intel Media Server Studio (Intel Media SDK)</h1>

<p>前回の記事で紹介したIntel Media Server Studio(以下、IMSS。旧Intel Media SDK)のインストールをします。
IMSSはIntel Developer Zoneのメンバーになってから、<a href="https://software.intel.com/en-us/intel-media-server-studio">こちら</a>へアクセスすることでダウンロードできます。
メンバー登録時と同じメールアドレスを指定するとダウンロードリンクが送られてくるので、アクセスしてfor Linuxの方をダウンロードします。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-download.png" alt="IMSS donwload page" /></p>

<p>執筆時点での最新版は2015 R3です。この2015 R3を対象にインストールを進めていきます。(12月中旬に2015 R2を対象にした記事を書き終わっていたのだけれど、公開し損ねてる間にバージョンアップがあったため最初から書き直してるなんて言えない。。)</p>

<p>IMSS 2015 R3から対応OSはCentOSとSLESの2種類のみとなったので、どちらか好きな方を選んでインストールしてください。以下にはCentOS 7での様子を載せます。</p>

<h2>Intel Media SDK Install</h2>

<p>IMSSをダウンロードし回答すると、下図のように幾つかアーカイブの入ったディレクトリが展開されます。そこにあるSDKをインストールすることでQSVを利用することができるようになります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-1.png" alt="IMSS step 1" /></p>

<p>このSDKのアーカイブを展開すると下図のように、インストール手順の書かれたPDFファイルとOSごとにディレクトリで分けられたドライバがでてきます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-2.png" alt="IMSS step 2" /></p>

<p>今回はCentOS 7なので、CentOSディレクトリに移動し、PDFに記載のインストール手順を踏むだけでいいはずなんですが、幾つか依存関係にあるパッケージが必要になります。これがなくてインストールコケまくったので下表にまとめておきます。<code>yum install</code>などでインストールしてください。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">パッケージ名 </th>
<th style="text-align:left;"> 簡易説明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">mesa-dri-drivers </td>
<td style="text-align:left;"> グラフィックデバイスドライバ</td>
</tr>
<tr>
<td style="text-align:center;">redhat-lsb </td>
<td style="text-align:left;"> lsb_releaseでOS情報取得したいらしい</td>
</tr>
<tr>
<td style="text-align:center;">wget </td>
<td style="text-align:left;"> あのダウンロードするやつ</td>
</tr>
<tr>
<td style="text-align:center;">net-tools </td>
<td style="text-align:left;"> ネットワーク設定するアレ</td>
</tr>
</tbody>
</table>


<p>そしてあとは手順通りにインストールすればいいだけ。だと思ってたんですが、そのままインストールすると、ファイルやディレクトリが足りない（？）というエラーで怒られてしまいます。
見た感じインストールスクリプトのバグのようですが、一般環境向けのGeneric SDKが用意されているので、これを先にインストールしてからOS SpecificなSDKで上書きすることで、正常にインストールすることができるようです。</p>

<p>なので、SDKのディレクトリにあるGenericディレクトリに移動し、ぽつりと存在するアーカイブを展開します。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-3.png" alt="IMSS step 3" /></p>

<p>展開されたファイルの中にあるシェルスクリプトを管理者権限で実行し、Generic SDKをインストールします。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-4.png" alt="IMSS step 4" /></p>

<p>この作業で必要なディレクトリとファイルが作成されるので、次にOS固有のドライバとSDKをインストールします。</p>

<p>SDKのディレクトリに戻り、さらにCentOSのディレクトリに移動しファイルを確認すると、以下のようになっているはずです。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-5.png" alt="IMSS step 5" /></p>

<p>　
ここではファイルの展開等は行わず、PDF記載の通りにユーザーをvideoグループに追加して、<code>/MSS</code>ディレクトリを作成してそこにファイルをコピーしてカレントディレクトリも移動し、インストール関連ファイルの入ったアーカイブを展開してでてくるSDKのインストールスクリプトを実行します。下図のninnikuはカレントユーザー名なので適当に<code>$(whoami)</code>に置換してください。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-6.png" alt="IMSS step 6" /></p>

<p>SDKのインストールが成功すると、下図のようになり、再起動を促されるのでひとまず再起動します。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-7.png" alt="IMSS step 7" /></p>

<p>再起動後、再度<code>/MSS</code>へ移動して、下図のようにドライバの組み込まれたカーネルをビルドします。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-8.png" alt="IMSS step 8" /></p>

<p>正常に終了すると以下のようになります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-9.png" alt="IMSS step 9" /></p>

<p>指定された場所<code>./rpmbuild/RPMS/</code>に移動すると<code>x86_64</code>ディレクトリがさらにあるのでそこに移動し、ここにあるQSVドライバが組み込まれたカーネルカーネルをインストールします。しかし今回使用しているCentOS 7では、QSVドライバが組み込まれたカーネルより新しいカーネルがインストールされていたため、QSVドライバ付きカーネルのインストールを拒否されてしまいました。
古いバージョンであることを重々承知した上でインストールするため、<code>--oldpackage</code>オプションを追加してインストールし、再起動してドライバのインストールは終了です。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-10.png" alt="IMSS step 10" /></p>

<p>再起動後、<code>lsmod | grep i915</code>として、以下のように幾つか該当があれば、ドライバが動作していることを確認できます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2015/01/30/IMSS-step-11.png" alt="IMSS step 11" /></p>

<p>これで終わりかと思いきや、インストールスクリプトのバグなのか、ライブラリのリンク先が間違っており、実際にSDKを利用するときにリンクできずにプログラムが起動しない、などが発生してしまいます。</p>

<p>なので、下記スクリプトを実行してライブラリのパスを再設定してください。</p>

<p><code>sudo bash -c '(ldconfig -p -N | grep intel.mediasdk) || echo "/opt/intel/mediasdk/lib64" &gt;&gt; /etc/ld.so.conf.d/intel-mediasdk.conf &amp;&amp; ldconfig'</code></p>

<h1>H264_QSV codec for FFmpeg</h1>

<p>さて、IMSSのインストールができたのでSDKを利用する代表的なプログラムとして、QSVによるH.264エンコードをしましょう。</p>

<p>前回の記事で紹介した<a href="https://github.com/shenhailuanma/qsv-ffmpeg-codec">qsv_ffmpeg_codec</a>はIntel Media SDKの対応バージョンが古く、導入に手間がかかるのでIMSS 2014 R3対応版としてフォークしました。下記リポジトリに置いてあります。</p>

<p><em><a href="https://github.com/mzyy94/qsv_h264-ffmpeg">mzyy94/h264_qsv-ffmpeg</a></em></p>

<p>ここからクローンし、ディレクトリ下にある<code>./setup.sh</code>を実行して、FFmpeg-2.2ディレクトリに移動して<code>make</code>して、インストールください。</p>

<p>このコーデック、QSVによるH.264へのエンコードはしっかりとできるのですが、<strong>MPEG-TSファイルのエンコードはエラーになります</strong>。原因は、TSの仕組みゆえの、ライブラリの関数<code>MFXVideoENCODE_EncodeFrameAsync</code>に渡される引数によるものというところまではわかったのですが、修正にはほぼ全ての処理を書き換えないといけない手間がかかるので、MPEG-TSから一度RAWファイルを抽出し、パイプ等を使ってQSVコーデックに渡してエンコードしてください。</p>

<p>実行方法の例としては、
<code>ffmpeg -i in.avi -acodec copy -vcodec h264_qsv -b:v 2000k -y -sar 16:9 -s 1280x720 -r 30000/1001 -bufsize 20000k -maxrate 25000k out.mp4</code>
のようにHDサイズにリサイズして変換することができます。</p>

<p>せっかくなのでベンチマークとして、<a href="http://www.bigbuckbunny.org">Big Buck Bunny</a>をエンコードしようと思ったのですが、残念ながら執筆中にダウンロードが終わらなかったのでまたの機会に追記する形で公開しようと思います。</p>

<h1>まとめ</h1>

<p>LinuxでもQSVできる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVMでQSVするためIntel HD Graphicsパススルーするー]]></title>
    <link href="http://mzyy94.com/blog/2014/12/12/kvm-intel-hd-graphics-passthrough/"/>
    <updated>2014-12-12T23:59:49+09:00</updated>
    <id>http://mzyy94.com/blog/2014/12/12/kvm-intel-hd-graphics-passthrough</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://qiita.com/advent-calendar/2014/linux">Linux Advent Calendar 2014</a> 12日目の記事です。</p>

<p>12月も中頃となり寒い日が続きますね。みなさん体調はいかがでしょうか。</p>

<p>先日の<a href="http://mzyy94.com/blog/2014/12/10/kotatsu-heating/">こたつを温める実験</a>で十分な熱を得られることを知ってしまい、つい調子に乗って動画のエンコードをこたつの中でやってしまって、40℃超の高温になるという経験を得るなど、新しい発見のある毎日です。</p>

<p>こたつ温め実験で使った録画サーバーはCPUがIntel Celeron 847はとても貧弱で、動画をH.264にエンコードしようものなら30分のアニメで8時間かかってしまうほどです。
なんとか短時間で動画エンコードできないかと悩んでいたところ、Intel QuickSync Video(以下QSV、詳細は後述)がLinuxもサポートされていることを思い出し、LinuxでQSVエンコードをしてみようと思い立ちました。</p>

<p>QSVを利用できるベアメタルマシンは我が家に2台あり、より新しいものはCPUにXeon E3v3を搭載しています。
このマシンではKVMで仮想マシンを複数立ち上げていて、カーネルコンパイルなどのCIを回したり、クロスコンパイル環境を構築しているものです。
今回はそのマシンに録画用仮想マシンを立て、録画に必要なUSBデバイスとPCI ExpressのレーンとQSVエンコードのためにIntel HD Graphicsのパススルーを試みる記録の第1章となります。</p>

<!-- more -->


<h1>Intel QuickSync Video</h1>

<p><a href="http://www.intel.co.jp/content/www/jp/ja/architecture-and-technology/quick-sync-video/quick-sync-video-general.html">IntelのQSV公式サイト</a>に情報が載っていますが簡単にまとめます。</p>

<p>Intel Quick Sync Videoとは、Sandy Bridge世代のCore iシリーズのIntel CPUに搭載されているIntel HD Graphicsによる、動画のハードウェアエンコード・デコード技術のことです。
対象となるコーデックはH.264とH.262のみですが、エンコードに関してはソフトウェアで行うものよりもQSVを利用したものの方が圧倒的に高速（ただし品質は低下する模様）です。</p>

<p>QSVをオープンソースな動画エンコードソフトウェアで利用する動きは近頃活発であり、有名どころとしては<a href="https://handbrake.fr">Handbrake</a>が最新版である<a href="https://handbrake.fr/news.php?article=27">バージョン0.10.0でQSVエンコードをサポート</a>し始めました。
<a href="http://www.videolan.org">VLC</a>も<a href="http://www.videolan.org/vlc/releases/2.1.0.html">バージョン2.10からQSVエンコードをサポート</a>しています。</p>

<p>ただ、これらのオープンソースソフトウェア(OSS)によって、QSVによるH.264エンコード高速化の恩恵を受けられるのは、両者ともいまのところWindows版のみとなっています。</p>

<h1>QSV on Linux</h1>

<p>Windows向けにしかOSSのQSVエンコーダーがないからって、なにもLinuxでQSVでエンコードできないわけではないのです。
ffmpegのエンコードコーデックとして、LinuxでもQSVエンコードができる<a href="https://github.com/shenhailuanma/qsv-ffmpeg-codec">qsv-ffmpeg-codec</a>なるものがあるのです。
これを利用するには、Intel Media SDKを導入する必要がありますが、これによってOSSでのQSVエンコードがLinuxでもできるのです。</p>

<h1>Intel Media SDK</h1>

<p>Intel HD GraphicsをLinuxで利用するためにはSDKが必要となります。そのSDKがこれ、Intel Media SDKです。これは現在、<a href="https://software.intel.com/en-us/intel-media-server-studio">Intel(r) Medoa Server Studio 2015</a>(以下IMSS)に含まれる形で提供されています。IMSS 2015 R2ではUbuntuとSUSE Linuxがサポートされています。</p>

<h1>Intel HD Graphics pass-through</h1>

<p>いろいろなシステムの説明を終えたのでここからが本題です。
KVMでIntel HD Graphicsをpass-throughする方法を手順を追って説明していきます。</p>

<p>仮想マシンでのPCIデバイスのパススルーはよく行われており、XenにおいてはGPUパススルーによって<a href="http://www.slideshare.net/zgock/203o">家庭内VDIサーバーを作る</a>というような例があります。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/25982988" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/zgock/203o" title="Xenとzfsで作る家庭内VDIサーバ" target="_blank">Xenとzfsで作る家庭内VDIサーバ</a> </strong> from <strong><a href="http://www.slideshare.net/zgock" target="_blank">zgock</a></strong> </div></p>

<p>XenによるPCIパススルーの記事はたくさん見つかるものの、KVMによるPCIパススルーに関するものは少なく、ましてやCPU内臓GPUのパススルーは皆無と言ってもいいほどです。
これは、KVMにおいてPCIパススルーをするにはIntel VT-dテクノロジーが必要なので、ユーザーが限られてしまうのも影響しているかもしれません。</p>

<p>KVMでPCIパススルーするための手がかりを<code>make menuconfig</code>で調べたところ、次の2つのオプションを有効化することでIntel HD GraphicsをKVMにパススルーできそうだということがわかりました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/12/Intel-IOMMU-option.png" alt="Intel IOMMU" />
<img src="http://mzyy94.com/blog/resources/images/2014/12/12/VFIO-option.png" alt="Intel VFIO" /></p>

<p>Intel IOMMUはIntel VT-dの機能をカーネルで有効にするものです。
また、VFIOはIOMMUによるデバイスへのアクセスを提供するものです。</p>

<p>これらを有効にしてコンパイル &amp;&amp; インストールしカーネルをKVMでPCIデバイスパススルーできるようにします。</p>

<p>その次はqemuの起動オプションです。
まず、ベアメタルマシン上ではどのようにIntel HD Graphicsが認識されているのかを調べます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/12/Intel-HD-Graphics-Host.png" alt="Intel HD Graphics host" /></p>

<p>バス00:02.0にIntel HD Graphicsが認識されています。</p>

<p>このバス 00:02.0をPCIデバイスとしてパススルーするため、kvmの起動オプションに<code>-device vfio-pci,host=00:02.0,id=hostpci0,bus=ich9-pcie-port-1,addr=0x0,x-vga=on -machine type=q35</code>を追加します。</p>

<p><strong> !&#8211; 追記(2015/1/30) &#8211; </strong></p>

<p>このとき、CPUタイプのオプションを<code>-cpu Haswell,kvm=off,+x2apic</code>とすることを忘れないでください。</p>

<p><strong> !&#8211; 追記ここまで &#8211; </strong></p>

<p>すると、ゲストLinuxにしっかりとIntel HD Graphicsが渡されていることがわかります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/12/Intel-HD-Graphics-Guest.png" alt="Intel HD Graphics guest" /></p>

<h1>Intel Media SDK Install</h1>

<p>この先の記事が長くなってしまったのでIMSSのインストール以降は後ほど別記事に書きます。。</p>

<h1>まとめ</h1>

<p>KVMでもPCIパススルーして幸せになろう！</p>

<p>明日はmasami256さんです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[サーバーの発熱でこたつを温める]]></title>
    <link href="http://mzyy94.com/blog/2014/12/10/kotatsu-heating/"/>
    <updated>2014-12-10T00:02:35+09:00</updated>
    <id>http://mzyy94.com/blog/2014/12/10/kotatsu-heating</id>
    <content type="html"><![CDATA[<p>この記事は<a href="http://www.adventar.org/calendars/443">coins Advent Calendar</a>の一部です。</p>

<p>寒い日が続きますね。昨夜の外気温は摂氏2度でした。みなさんいかがお過ごしでしょうか。</p>

<p>我が家は先月下旬にこたつを出しました。こたつから出られない生活が続いております。
故に、こんなスライドをLTで発表しました。</p>

<p><a href="http://www.slideshare.net/mzyy94/kotatsu">こたつ - coinsLT #1</a></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/42258069" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/mzyy94/kotatsu" title="こたつ - coinsLT #1" target="_blank">こたつ - coinsLT #1</a> </strong> from <strong><a href="http://www.slideshare.net/mzyy94" target="_blank">Yuki Mizuno</a></strong> </div></p>

<p>ITによってこたつ生活のQoLが向上したのですが、まだ改善の余地はあります。
そう、<strong>熱源の有効利用</strong>です。</p>

<p>みなさんご存知の通り、PC機器は熱を持ちます。この熱、せっかくなので有効活用したくありませんか？
ということで、実際にサーバー・デスクトップPCを熱源にしてこたつを温めてみる実験をしてみました。</p>

<!-- more -->


<h1>どのように熱源として活用するか</h1>

<p>冒頭に掲載したスライドにあるように、すでにすべてのサーバーはLANケーブルと電源さえあれば動作し利用できるようになっています。
なので、我が家では電源とLANをこたつまで引っ張り、設置場所をこたつのなかに変えるだけで熱源として利用することができます。</p>

<p><strong>※熱を持つマシンは火災の危険があり、その危険度はアパートを燃やしてVPSを借りるという炎上マーケティングに利用されるほどです。真似する際は十分に注意してください。</strong></p>

<h1>実験環境</h1>

<table>
<thead>
<tr>
<th style="text-align:center;">        日時      </th>
<th style="text-align:center;">             場所           </th>
<th style="text-align:center;"> 外気温 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">2014/12/9 19:04:22</td>
<td style="text-align:center;">学園都市内のマンションの一室</td>
<td style="text-align:center;">  2  ℃  </td>
</tr>
</tbody>
</table>


<p>LTで発表した2つのシステムをこたつ内で動作させて、熱の有効利用ができるかどうかを検証してみます。</p>

<h1>録画サーバー</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/recording-server.jpg" alt="Recording Server" /></p>

<p>まずは録画サーバーを熱源としてこたつを温めてみたいと思います。
主な熱源となりうるパーツは以下の通りです。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">種類</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> CPU  </td>
<td style="text-align:center;"> Intel Celeron 847 </td>
</tr>
<tr>
<td style="text-align:center;"> GPU  </td>
<td style="text-align:center;"> n/a </td>
</tr>
<tr>
<td style="text-align:center;"> HDD  </td>
<td style="text-align:center;"> 3x WD Green 3TB </td>
</tr>
<tr>
<td style="text-align:center;"> SSD  </td>
<td style="text-align:center;"> 1x SanDisk 128GB </td>
</tr>
<tr>
<td style="text-align:center;">Power </td>
<td style="text-align:center;"> 200W FlexATX </td>
</tr>
</tbody>
</table>


<p>24時間稼働を前提に構成したサーバーなので低消費電力のパーツが多いですが、HDD3台の発熱は結構なものであると思います。</p>

<h2>実験</h2>

<p>いつもの利用方法を想定して、電源を入れてアニメを2本、計50分ストリーミング再生して温度上昇がどれほどかを実験してみます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/recording-server-temperature1.jpg" alt="temperature1" /></p>

<p>電源をいれる直前のこたつ内の温度は16.0℃でした。アニメを再生しているときの録画サーバーの消費電力は平均40.4Wでした。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/recording-server-power.jpg" alt="power1" /></p>

<h2>結果</h2>

<p>体温が熱源となることがないよう、寒いこたつの外でアニメを2本みた後のこたつ内の温度はどうなったでしょうか。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/recording-server-temperature2.jpg" alt="temperature2" /></p>

<p>1時間の録画サーバーの稼働でなんとこたつ内の温度は21.2℃になりました。5.2℃の上昇です。
なんとなく温もりを感じられますが、まだまだこたつとしては物足りなさを感じてしまう温度です。</p>

<h1>ゲームストリームサーバー</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/gamestream-server.jpg" alt="GameStream Server" />
そこで、ゲームストリームサーバーを追加してあらたな熱源としてこたつを温めてみたいと思います。
主な熱源となりうるパーツは以下の通りです。</p>

<table>
<thead>
<tr>
<th style="text-align:center;">パーツ</th>
<th style="text-align:center;">種類</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> CPU  </td>
<td style="text-align:center;"> Intel Core i5-2405S </td>
</tr>
<tr>
<td style="text-align:center;"> GPU  </td>
<td style="text-align:center;"> ZOTAC GeForce 750Ti</td>
</tr>
<tr>
<td style="text-align:center;"> HDD  </td>
<td style="text-align:center;"> n/a</td>
</tr>
<tr>
<td style="text-align:center;"> SSD  </td>
<td style="text-align:center;"> 1x Transcend 128GB </td>
</tr>
<tr>
<td style="text-align:center;">Power </td>
<td style="text-align:center;"> 200W FlexATX </td>
</tr>
</tbody>
</table>


<p>ゲーミングマシンとあって、発熱の多いGPUを搭載しているのが特長です。</p>

<h2>実験</h2>

<p>先ほどの録画サーバーによって温まったこたつに、ゲームストリームサーバーを追加して、2台のマシンでどれほどこたつを温められるかを実験してみます。
こちらもいつもの利用方法を想定して、電源を入れてゲームを1チャプター、約30分プレイしてこたつ内を温めます。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/gamestream-server-temperature1.jpg" alt="temperature1" /></p>

<p>電源をいれる直前のこたつ内の温度は20.8℃でした。アニメを再生した直後より少し下がっていますが、これはこたつ内にサーバーを搬入した際に、こたつ外の冷えた空気が入ったためです。
ゲームをプレイしているときの2台のマシンの消費電力は平均120Wでした。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/gamestream-server-power.jpg" alt="power2" /></p>

<h2>結果</h2>

<p>1回死んでしまいましたが、なんとかチャプターをクリアできました。透明なハンターは強い。
さて、こたつ内の温度はどうなったでしょうか。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/10/gamestream-server-temperature2.jpg" alt="temperature2" /></p>

<p>30分間のゲームプレイで、温度はなんと26.1℃になりました。2台のマシンで16.0℃から26.1℃にまで暖かくなりました。10℃も！！
こたつに入ってみると、眠りを誘う温もりを感じられるほどでした。普通にあったかい。</p>

<h1>まとめ</h1>

<p>いくらサーバーの発熱がすごいからと、室温を劇的に上げることはできませんが、こたつの中なら10℃ほど温められることがわかりました。寒い冬にはもってこいのお得情報です。
しかし、こたつの中は埃が多く、炎上してVPSを借りる羽目になることもあるので、くれぐれも真似する際は十分に注意をはらって行ってください。</p>

<p>明日のcoins Advent Calendarは<a href="https://twitter.com/azuma962">カブさん</a>です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON2014 Online英語版予選 Write-up]]></title>
    <link href="http://mzyy94.com/blog/2014/12/07/seccon2014-online/"/>
    <updated>2014-12-07T17:59:06+09:00</updated>
    <id>http://mzyy94.com/blog/2014/12/07/seccon2014-online</id>
    <content type="html"><![CDATA[<p>昨日12月6日午前9時（日本時間）から12月7日午後5時までの32時間耐久CTFが行われたので参加してみました。
あまり活躍できずでしたがチャレンジしたもののまとめを記します。</p>

<!-- more -->


<h1>Get the key (Network 100)</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/NW100-1.png" alt="Get the key pcap file opened" />
配布されたパケットからキーの手がかりを探すというもの。
これはNWの基本問題だったので解説することはほとんどないです。
Wiresharkで開いてWebサイトのログイン情報が出るのでそれでアクセスしておしまい。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/NW100-2.png" alt="Get the key WebSite login" />
<img src="http://mzyy94.com/blog/resources/images/2014/12/7/NW100Flag.png" alt="NW100Flag" /></p>

<h1>Reverseit (Bin 100)</h1>

<p>なにやら配られたファイルを反転しろというもの。
バイト列反転、ビット反転いろいろな反転方法を試したところ、
4bitごとに反転してあげるとJPEG画像に早変わり。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/BIN100Flag.jpg" alt="BIN100Flag" /></p>

<p>画像中のFLAGも左右反転してるので眼で見て脳内反転しておしまい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">in</span><span class="p">,</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">in</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;Reverseit&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;reversed&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="o">|</span><span class="n">O_CREAT</span><span class="p">,</span> <span class="mo">0666</span><span class="p">);</span>
</span><span class='line'>      <span class="n">stat</span><span class="p">(</span><span class="s">&quot;Reverseit&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">lseek</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
</span><span class='line'>          <span class="n">read</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0x0f</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xf0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>          <span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>SECCON Wars: The Flag Awakens (QR 300)</h1>

<iframe width="459" height="344" src="http://www.youtube.com/embed/1pC56S17-_A?feature=oembed" frameborder="0" allowfullscreen></iframe>


<p>新ジャンルQRからの出題。
<a href="http://youtu.be/1pC56S17-_A">YouTubeの動画</a>を見ろとの指令のみが与えられた問題。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/QR300-1.png" alt="SECCON Wars QR code movie" /></p>

<p>よーく見るとSECCONのバナーが出るときに動画の下の方にQRコードが流れているのでそれをスキャンすればよさそう。</p>

<p>手順としては動画をまずローカルに引っ張り出して、QRコードの出現する54秒の時点から7秒間を16fpsで連番画像として抜き出します。
ファイル情報を確認すると320x240ピクセルなので、目視で下部3ピクセルに表示されてると仮定して、320x3ピクセルの画像に切り出します。
あとはこれを連結してノイズを減らして色反転すると、</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/QR300Flag.jpg" alt="QR300 Flag" /></p>

<p>このようなQRコードが得られ、スキャンしてFLAGをゲットできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">ffmpeg</span> <span class="o">-</span><span class="n">i</span> <span class="n">SECCON_WARS</span><span class="p">.</span><span class="n">mp4</span> <span class="o">-</span><span class="n">ss</span> <span class="mi">54</span> <span class="o">-</span><span class="n">t</span> <span class="mi">7</span> <span class="o">-</span><span class="n">r</span> <span class="mi">16</span> <span class="o">-</span><span class="n">f</span> <span class="n">image2</span> <span class="o">%</span><span class="mo">04</span><span class="n">d</span><span class="p">.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">identify</span> <span class="mf">0001.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">convert</span> <span class="o">*</span><span class="p">.</span><span class="n">jpg</span> <span class="o">-</span><span class="n">crop</span> <span class="err">&#39;</span><span class="mi">320</span><span class="n">x3</span><span class="o">+</span><span class="mi">0</span><span class="o">+</span><span class="mi">237</span><span class="err">&#39;</span> <span class="n">qr_</span><span class="o">%</span><span class="mo">04</span><span class="n">d</span><span class="p">.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">convert</span> <span class="o">-</span><span class="n">append</span> <span class="n">qr_</span><span class="o">*</span><span class="p">.</span><span class="n">jpg</span> <span class="n">qr_appended</span><span class="p">.</span><span class="n">jpg</span>
</span><span class='line'><span class="n">convert</span> <span class="o">-</span><span class="n">median</span> <span class="mi">3</span> <span class="o">-</span><span class="n">negate</span> <span class="n">qr_appended</span><span class="p">.</span><span class="n">jpg</span> <span class="n">qr</span><span class="p">.</span><span class="n">jpg</span>
</span></code></pre></td></tr></table></div></figure>


<h1>The Golden Gate (Programming 400)</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/GoldenGate.jpg" alt="The Golden Gate" /></p>

<p>自作ハードウェアエンコーダーの写真があって、それによってエンコードされた文字<code>BQDykmgZ0I6SaQnq4o/iEONudetXdPJdpl1UVSlU69oZOtvqnHfinOpcEfIjXy9okkVpsuw2kpKS==</code>をデコードしてくれとのこと。
このハードウェアエンコーダーはユニーバーサル基板上に作られていて、絡み合うジャンパ線がどう繋がっているのかをしっかり把握できれば回路図を起こすのは以外と簡単。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/TGG-1.jpg" alt="Handwriting Circuit" /></p>

<p>7400のNANDゲートによって入力から出力までの間は、2入力NANDの結果をさらにその2入力でそれぞれNANDし、それらをNANDするという、何度もNANDする処理が入ってるだけでした。
要するにXORです。</p>

<p>よって、プログラムは簡潔にできあがり、難なくFLAGを手に入れることができると思いました。</p>

<p>&#8230;思いました。</p>

<p>残念ながら時間中にFLAGは得られませんでした。</p>

<p>一点、デコードすべき文がなんなのかがわからなかったことがあります。BASE64にしては文字数が合わないのです。
そして、どのタクトスイッチがどのbitをさしているのか、アノード・カソードどちらなのか写真からよくわからない、など、躓く点が多かったのです。</p>

<p>SECCONは終わってしまいましたが、ヒントが出され、入力と出力とが対応付けられるようになりました。</p>

<iframe width="480" height="270" src="http://www.youtube.com/embed/kaDjypSndMk?feature=oembed" frameborder="0" allowfullscreen></iframe>


<p>タクトスイッチによる入力が一部反転できてなかったようです。</p>

<p>入力文を正規のBASE64にして実行してみると、しっかりとgzipのデータとなり、フラッグを得られました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="n">echo</span> <span class="s">&quot;BQDykmgZ0I6SaQnq4o/iEONudetXdPJdpl1UVSlU69oZOtvqnHfinOpcEfIjXy9okkVpsuw2kpKS&quot;</span> <span class="o">|</span> <span class="n">openssl</span> <span class="n">base64</span> <span class="o">-</span><span class="n">d</span> <span class="o">&gt;</span> <span class="n">input</span>
</span><span class='line'><span class="n">gcc</span> <span class="n">goldengate</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">gg</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">gg</span> <span class="n">input</span>
</span><span class='line'><span class="n">file</span> <span class="n">out</span>
</span><span class='line'><span class="n">gzip</span> <span class="o">-</span><span class="n">S</span> <span class="p">.</span><span class="n">gz</span> <span class="o">-</span><span class="n">d</span> <span class="o">-</span><span class="n">c</span> <span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#define B(y) ((*buf &gt;&gt; (y)) &amp; 1)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">nand</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">xor</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nand</span><span class="p">(</span><span class="n">nand</span><span class="p">(</span><span class="n">nand</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">),</span> <span class="n">a</span><span class="p">),</span> <span class="n">nand</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">nand</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">encoder</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a4</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">,</span> <span class="n">B</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a6</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="n">B</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a5</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">a6</span><span class="p">,</span> <span class="n">B</span><span class="p">(</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">g1</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="n">B</span><span class="p">(</span><span class="mi">7</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a0</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">g1</span><span class="p">,</span> <span class="n">B</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a2</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">g2</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">B</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a1</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">g2</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a3</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">g1</span><span class="p">,</span> <span class="n">g2</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a7</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">B</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">^</span><span class="mi">1</span><span class="p">,</span> <span class="n">g2</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a7</span> <span class="o">&lt;&lt;</span> <span class="mi">7</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">128</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a6</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">64</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a5</span> <span class="o">&lt;&lt;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">32</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a4</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a3</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a2</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a1</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">|</span>
</span><span class='line'>      <span class="p">((</span><span class="n">a0</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="n">t</span> <span class="o">^</span> <span class="mh">0xff</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">in</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">table</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create table</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">256</span><span class="p">;</span> <span class="n">c</span> <span class="o">=</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">encoder</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>      <span class="n">table</span><span class="p">[(</span><span class="kt">int</span><span class="p">)</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">in</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">O_RDONLY</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">stat</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">);</span>
</span><span class='line'>      <span class="n">out</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;out&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="o">|</span><span class="n">O_CREAT</span><span class="p">,</span> <span class="mo">0666</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">read</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>          <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>          <span class="n">write</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">out</span><span class="p">);</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>QR (Easy) (QR 100)</h1>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/QRCake.jpg" alt="QR Cake" /></p>

<p>昨年のSECCON 2013オンライン予選でも出題された、データビットの部分だけ残ってるQRコードを解析するという問題。
今回はパンケーキに焼いて食べてしまったようです。</p>

<p>おなじみ<a href="http://en.wikipedia.org/wiki/QR_code">英語版WikipediaのQRコード解説ページ</a>のデータ配置図を元にデータビットを埋めていくだけです。
今回のフラッグの形式は<code>SECCON{XXXXXXX}</code>なので、最初の6文字が&#8221;SECCON&#8221;になるようなマスクを<a href="http://www.swetake.com/qrcode/qr5.html">QRコードの解説サイト</a>を見ながら特定すると、マスクパターンは001であることがわかります。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/12/7/QR100-1.png" alt="QR Cake" /></p>

<p>あとは淡々とビットを解析して行って得たFLAGは、</p>

<pre>
0010 : 英数モード
000000110 : 6文字
10011111010 : 'SE'
01000101000 : 'CC'
10001001111 : 'ON'
0100 : 8bitバイトモード
00010010 : 18文字
01111011 : '{'
01010000 : 'P'
01010011 : 'S'
01110111 : 'w'
01011101 : ']'
01010001 : 'Q'
00111001 : '9'
01100100 : 'd'
00111001 : '9'
01000111 : 'G'
01101010 : 'j'
01001011 : 'K'
01010100 : 'T'
01100100 : 'd'
01000100 : 'D'
00111000 : '8'
01001000 : 'H'
01111101 : '}'
0101
11
</pre>


<p><code>SECCON{PSw]Q9d9GjKTdD8H}</code>
しかし<strong>Incorrect.</strong></p>

<p>骨の折れる作業で再度トライする気にはならなかったのですが、
今になって見返してみると間違ってるビットを発見。
正解は<code>SECCON{PSwIQ9d9GjKTdD8H}</code>;</p>

<h2>おしまい</h2>

<p>チーム合計で2500点でした(´Д` )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SECCON 2014 横浜大会NW予選 Write-up]]></title>
    <link href="http://mzyy94.com/blog/2014/09/03/seccon2014-yokohama-2nd-day/"/>
    <updated>2014-09-03T14:40:47+09:00</updated>
    <id>http://mzyy94.com/blog/2014/09/03/seccon2014-yokohama-2nd-day</id>
    <content type="html"><![CDATA[<p>SECCON 2014 横浜大会に参加してきました。
NW,BIN,WEBと３部門の予選がありましたが、ネットワーク大好き♡なのでNWにチャレンジしました。</p>

<p>ネットワーク部門は10問ある問題を解いて答えを紙に書いて提出して採点された点数によって順位付けされ、成績優秀者10人が予選突破という選抜形式で行われました。</p>

<p>CTFにおけるネットワーク問題は年々減少傾向にある上、難易度を上げることが難しいとのことなので、今回は少し特殊なファイル形式で出題されていました。
例えば以下が問題1の出題ファイルです。</p>

<pre><code>Find the Key!

0000  00 00 00 00 00 00 00 00  00 00 00 00 08 00 45 00   ........ ......E.
0010  00 34 f3 ed 00 00 40 01  88 d9 7f 00 00 01 7f 00   .4....@. ........
0020  00 01 08 00 bd c8 18 18  00 00 5a 6d 78 68 5a 33   ........ ..ZmxhZ3
0030  74 7a 5a 57 4e 6a 62 32  35 7a 5a 57 4e 6a 62 32   tzZWNjb2 5zZWNjb2
0040  35 39 
</code></pre>

<p>そう、いいままでのpcapファイルでの出題ではなくテキストファイルでの出題となっていたのです。</p>

<p>このままでは今まで愛用してきたWiresharkおよび、tsharkでの解析ができません。
バイナリエディタにコピペして目grepしてもいいですが、ここはpcapファイルに変換してしまいましょう。</p>

<p>世の中には便利なソフトウェアが沢山あります。こんなときにもOSSが活躍します。
テキストファイルをpcapファイルに変換するソフトウェア、その名も<code>text2pcap</code>です。
これ、Wiresharkに付属してるんです。</p>

<p>使い方は簡単、例えば問題1の出題ファイルでは、1行目の問題文を削除してHEX部分だけにしたファイル、question-01.txtを作成し、
<code>text2pcap question-01.txt q01.pcap</code>などとすれば、Wiresharkで解析できるpcapファイルが作成されます。</p>

<p>さて、このようにしてさくさくと解けるファイルが作成できればあとは画面を凝視するのみ、順々に解いていきます。</p>

<!-- more -->


<h1>問題1</h1>

<pre><code>Find the Key!

0000  00 00 00 00 00 00 00 00  00 00 00 00 08 00 45 00   ........ ......E.
0010  00 34 f3 ed 00 00 40 01  88 d9 7f 00 00 01 7f 00   .4....@. ........
0020  00 01 08 00 bd c8 18 18  00 00 5a 6d 78 68 5a 33   ........ ..ZmxhZ3
0030  74 7a 5a 57 4e 6a 62 32  35 7a 5a 57 4e 6a 62 32   tzZWNjb2 5zZWNjb2
0040  35 39 
</code></pre>

<p>簡単ですね。
tsharkでパケットをチェックしてみると、
      1   0.000000    127.0.0.1 -> 127.0.0.1    ICMP 66 Echo (ping) request  id=0x1818, seq=0/0, ttl=64
と出力されるので、ICMPメッセージにフラッグが隠されてるんだろうなーっと想像つきます。
上記のファイルを見ると、目nkfで簡単に答えが出てきます。
目nkf力が無い人は、<code>echo ZmxhZ3tzZWNjb25zZWNjb259|nkf -mB</code>とでもやるとよいでしょう。</p>

<p>ということでフラッグは<code>secconseccon</code>でした。</p>

<h1>問題2</h1>

<pre><code>開いてるTCPポートを列挙せよ
</code></pre>

<p><a href="http://mzyy94.com/blog/resources/data/2014/9/3/nmaped.pcap">nmaped.pcap</a></p>

<p>これはpcapファイルが添付されていました。
nmapでポートスキャンをしたときのログが残っているようです。
ポートが空いているということは、TCP FlagのSYNとACKが帰ってくるはずなので、SYN/ACKを返しているポートを列挙する適当なスクリプトを書きました。
node.js + node_pcapです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">filter</span> <span class="o">=</span> <span class="s2">&quot;tcp&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">pcap</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pcap&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">pcap_session</span> <span class="o">=</span> <span class="nx">pcap</span><span class="p">.</span><span class="nx">createOfflineSession</span><span class="p">(</span><span class="s2">&quot;./nmaped.pcap&quot;</span><span class="p">,</span> <span class="nx">filter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">pcap_session</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;packet&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">raw_packet</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">packet</span> <span class="o">=</span> <span class="nx">pcap</span><span class="p">.</span><span class="nx">decode</span><span class="p">.</span><span class="nx">packet</span><span class="p">(</span><span class="nx">raw_packet</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">packet</span><span class="p">.</span><span class="nx">link</span><span class="p">.</span><span class="nx">ip</span><span class="p">.</span><span class="nx">tcp</span><span class="p">.</span><span class="nx">flags</span><span class="p">.</span><span class="nx">syn</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="nx">packet</span><span class="p">.</span><span class="nx">link</span><span class="p">.</span><span class="nx">ip</span><span class="p">.</span><span class="nx">tcp</span><span class="p">.</span><span class="nx">flags</span><span class="p">.</span><span class="nx">ack</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">packet</span><span class="p">.</span><span class="nx">link</span><span class="p">.</span><span class="nx">ip</span><span class="p">.</span><span class="nx">tcp</span><span class="p">.</span><span class="nx">sport</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これを02-solver.jsとして保存し、<code>npm install pcap &amp;&amp; node 02-solver.js | sort -n | uniq</code>としてあげれば答えのポートが出てきます。</p>

<h1>問題3</h1>

<pre><code>このパケットデータのアプリケーションプロトコルは何でしょう？
英字でお答えください。

0000   00 1a a0 89 a3 7f 44 94 fc 7e 1a ba 08 00 45 00  ......D..~....E.
0010   00 4c 00 00 40 00 36 11 11 2c d2 ad a0 1b c0 a8  .L..@.6..,......
0020   00 04 00 7b 00 7b 00 38 6d 96 1c 02 11 e8 00 00  ...{.{.8m.......
0030   06 8b 00 00 02 9e ac 1d 02 32 d7 ad 09 99 d8 db  .........2......
0040   8b 49 d7 ad 0a 44 7a a8 0f 7e d7 ad 0a 46 42 28  .I...Dz..~...FB(
0050   23 a6 d7 ad 0a 46 42 2b 5a b3                    #....FB+Z.
</code></pre>

<p>目grepで答えはすぐにわかるんですが、確認のためにtext2pcapを用いてpcapファイルにしてtsharkに食わせてみると、以下のように出力されます。</p>

<pre><code>$ tshark -r q03.pcap
  1   0.000000 210.173.160.27 -&gt; 192.168.0.4  NTP 90 NTP Version 3, server
</code></pre>

<p>NTPですね。</p>

<h1>問題4</h1>

<pre><code>サーバの名前は何？
FQDNでお答えください。

0000   00 1a a0 89 a3 7f 44 94 fc 7e 1a ba 08 00 45 00  ......D..~....E.
0010   00 4c 00 00 40 00 36 11 11 2c d2 ad a0 1b c0 a8  .L..@.6..,......
0020   00 04 00 7b 00 7b 00 38 6d 96 1c 02 11 e8 00 00  ...{.{.8m.......
0030   06 8b 00 00 02 9e ac 1d 02 32 d7 ad 09 99 d8 db  .........2......
0040   8b 49 d7 ad 0a 44 7a a8 0f 7e d7 ad 0a 46 42 28  .I...Dz..~...FB(
0050   23 a6 d7 ad 0a 46 42 2b 5a b3                    #....FB+Z.
</code></pre>

<p>先ほどと同じパケットデータなので、全問でtsharkを動かしたときの出力にあるIPアドレスに向けてnslookupしてあげれば答えがでます。</p>

<pre><code>$ nslookup 210.173.160.27
Server:     192.168.128.1
Address:    192.168.128.1#53

Non-authoritative answer:
27.160.173.210.in-addr.arpa name = ntp1.jst.mfeed.ad.jp.

Authoritative answers can be found from:
</code></pre>

<p>答えは、ntp1.jst.mfeed.ad.jp.です。</p>

<h1>問題5</h1>

<pre><code>このパケットによると、日本時間で今何月何日何時何分何秒？

0000   00 1a a0 89 a3 7f 44 94 fc 7e 1a ba 08 00 45 00  ......D..~....E.
0010   00 4c 00 00 40 00 36 11 11 2c d2 ad a0 1b c0 a8  .L..@.6..,......
0020   00 04 00 7b 00 7b 00 38 6d 96 1c 02 11 e8 00 00  ...{.{.8m.......
0030   06 8b 00 00 02 9e ac 1d 02 32 d7 ad 09 99 d8 db  .........2......
0040   8b 49 d7 ad 0a 44 7a a8 0f 7e d7 ad 0a 46 42 28  .I...Dz..~...FB(
0050   23 a6 d7 ad 0a 46 42 2b 5a b3                    #....FB+Z.
</code></pre>

<p>これも先ほどと同じパケットです。<code>tshark -r 03.pcap -V</code>とすると、Timestampの情報が現れるので時差と到達遅延を計算してあげれば答えが出ます。</p>

<h1>問題6</h1>

<pre><code>空欄となっている箇所の２バイトの値は？

00 66 77 88  99 AA 00 11  22 33 44 55  08 00 45 00
00 54 03 76  00 00 40 01  F3 DF C0 A8  01 01 C0 A8
01 02 08 00  48 FD 3B 04  00 6F 54 01  8D C5 00 0C
A6 B9 08 09  0A 0B 0C 0D  0E 0F 10 11  12 13 14 15
16 17 18 19  1A 1B 1C 1D  1E 1F 20 21  22 23 24 25
26 27 28 29  2A 2B 2C 2D  2E 2F 30 31  32 33 34 35
36 37

00 11 22 33  44 55 00 66  77 88 99 AA  08 00 45 00
00 54 1E 0A  00 00 40 01  D9 4B C0 A8  01 02 C0 A8
01 01 00 00  -- -- 3B 04  00 6F 54 01  8D C5 00 0C
A6 B9 08 09  0A 0B 0C 0D  0E 0F 10 11  12 13 14 15
16 17 18 19  1A 1B 1C 1D  1E 1F 20 21  22 23 24 25
26 27 28 29  2A 2B 2C 2D  2E 2F 30 31  32 33 34 35
36 37
</code></pre>

<p>目wiresharkするとわかると思いますが、求めるフラッグはICMPのChecksumです。
計算してもいいのですが、wireshark/tsharkのチェック機能を使ってさっくりと解いてしまいます。
&#8211;の部分に00を埋めてわざと間違っているであるだろうChecksumを入力してpcapファイルを作成し、
tsharkで詳細情報を見ると、以下のように出力されます。</p>

<pre><code>$ tshark -r q06.pcap -V
Frame 1: 98 bytes on wire (784 bits), 98 bytes captured (784 bits)
    Encapsulation type: Ethernet (1)
    Arrival Time: Sep  3, 2014 12:48:01.000000000 JST
    [Time shift for this packet: 0.000000000 seconds]
    Epoch Time: 1409716081.000000000 seconds
    [Time delta from previous captured frame: 0.000000000 seconds]
    [Time delta from previous displayed frame: 0.000000000 seconds]
    [Time since reference or first frame: 0.000000000 seconds]
    Frame Number: 1
    Frame Length: 98 bytes (784 bits)
    Capture Length: 98 bytes (784 bits)
    [Frame is marked: False]
    [Frame is ignored: False]
    [Protocols in frame: eth:ethertype:ip:icmp:data]
Ethernet II, Src: 00:66:77:88:99:aa (00:66:77:88:99:aa), Dst: 00:11:22:33:44:55 (00:11:22:33:44:55)
    Destination: 00:11:22:33:44:55 (00:11:22:33:44:55)
        Address: 00:11:22:33:44:55 (00:11:22:33:44:55)
        .... ..0. .... .... .... .... = LG bit: Globally unique address (factory default)
        .... ...0 .... .... .... .... = IG bit: Individual address (unicast)
    Source: 00:66:77:88:99:aa (00:66:77:88:99:aa)
        Address: 00:66:77:88:99:aa (00:66:77:88:99:aa)
        .... ..0. .... .... .... .... = LG bit: Globally unique address (factory default)
        .... ...0 .... .... .... .... = IG bit: Individual address (unicast)
    Type: IP (0x0800)
Internet Protocol Version 4, Src: 192.168.1.2 (192.168.1.2), Dst: 192.168.1.1 (192.168.1.1)
    Version: 4
    Header Length: 20 bytes
    Differentiated Services Field: 0x00 (DSCP 0x00: Default; ECN: 0x00: Not-ECT (Not ECN-Capable Transport))
        0000 00.. = Differentiated Services Codepoint: Default (0x00)
        .... ..00 = Explicit Congestion Notification: Not-ECT (Not ECN-Capable Transport) (0x00)
    Total Length: 84
    Identification: 0x1e0a (7690)
    Flags: 0x00
        0... .... = Reserved bit: Not set
        .0.. .... = Don't fragment: Not set
        ..0. .... = More fragments: Not set
    Fragment offset: 0
    Time to live: 64
    Protocol: ICMP (1)
    Header checksum: 0xd94b [validation disabled]
        [Good: False]
        [Bad: False]
    Source: 192.168.1.2 (192.168.1.2)
    Destination: 192.168.1.1 (192.168.1.1)
    [Source GeoIP: Unknown]
    [Destination GeoIP: Unknown]
Internet Control Message Protocol
    Type: 0 (Echo (ping) reply)
    Code: 0
    Checksum: 0x0000 [incorrect, should be 0x50fd]
    Identifier (BE): 15108 (0x3b04)
    Identifier (LE): 1083 (0x043b)
    Sequence number (BE): 111 (0x006f)
    Sequence number (LE): 28416 (0x6f00)
    Data (56 bytes)

0000  54 01 8d c5 00 0c a6 b9 08 09 0a 0b 0c 0d 0e 0f   T...............
0010  10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f   ................
0020  20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f    !"#$%&amp;'()*+,-./
0030  30 31 32 33 34 35 36 37                           01234567
        Data: 54018dc5000ca6b908090a0b0c0d0e0f1011121314151617...
        [Length: 56]
</code></pre>

<p>ICMPの項目を見てみると、
<code>   Checksum: 0x0000 [incorrect, should be 0x50fd]</code>
とあるので、答えにコレを記入して乙です。</p>

<h1>問題7</h1>

<pre><code>通信相手のIPアドレスは？次の4つのパケットを見て答えよ。

-- 1 --
000000: FF FF FF FF  FF FF 00 66  77 88 99 AA  08 06 00 01 : .......f w.......
000010: 08 00 06 04  00 01 00 66  77 88 99 AA  C0 A8 01 02 : .......f w.......
000020: 00 00 00 00  00 00 C0 A8  01 01                    : ........ ..
==
-- 2 --
000000: 00 66 77 88  99 AA 00 11  22 33 44 55  08 06 00 01 : .fw..... "3DU....
000010: 08 00 06 04  00 02 00 11  22 33 44 55  C0 A8 01 01 : ........ "3DU....
000020: 00 66 77 88  99 AA C0 A8  01 02 00 00  00 00 00 00 : .fw..... ........
000030: 00 00 00 00  00 00 00 00  00 00 00 00              : ........ ....
==
-- 3 --
000000: 00 11 22 33  44 55 00 66  77 88 99 AA  08 00 45 00 : .."3DU.f w.....E.
000010: 00 54 00 00  40 00 40 01  50 C3 C0 A8  01 02 0A 14 : .T..@.@. P.......
000020: 1E 28 08 00  D0 C0 7A 07  00 01 EA 6C  02 54 C9 72 : .(....z. ...l.T.r
000030: 0C 00 08 09  0A 0B 0C 0D  0E 0F 10 11  12 13 14 15 : ........ ........
000040: 16 17 18 19  1A 1B 1C 1D  1E 1F 20 21  22 23 24 25 : ........ .. !"#$%
000050: 26 27 28 29  2A 2B 2C 2D  2E 2F 30 31  32 33 34 35 : &amp;'()*+,- ./012345
000060: 36 37                                              : 67
==
-- 4 --
000000: 00 66 77 88  99 AA 00 11  22 33 44 55  08 00 45 00 : .fw..... "3DU..E.
000010: 00 54 02 95  40 00 40 01  4E 2E 0A 14  1E 28 C0 A8 : .T..@.@. N....(..
000020: 01 02 00 00  D8 C0 7A 07  00 01 EA 6C  02 54 C9 72 : ......z. ...l.T.r
000030: 0C 00 08 09  0A 0B 0C 0D  0E 0F 10 11  12 13 14 15 : ........ ........
000040: 16 17 18 19  1A 1B 1C 1D  1E 1F 20 21  22 23 24 25 : ........ .. !"#$%
000050: 26 27 28 29  2A 2B 2C 2D  2E 2F 30 31  32 33 34 35 : &amp;'()*+,- ./012345
000060: 36 37                                              : 67
==
</code></pre>

<p>pcapファイルを作成して、<code>tshark -r q07.pcap</code>とするだけです。それだけです。やってみてください。</p>

<h1>問題8</h1>

<pre><code>間違っているのは何バイト目？次の二つのパケットを見て答えよ。

-- 1 --
000000: FF FF FF FF  FF FF 00 11  22 33 44 55  08 06 00 01 : ........ "3DU....
000010: 08 00 08 04  00 01 00 11  22 33 44 55  C0 A8 01 01 : ........ "3DU....
000020: 00 00 00 00  00 00 C0 A8  01 02                    : ........ ..      
==
-- 2 --
000000: 00 11 22 33  44 55 00 66  77 88 99 AA  08 06 00 01 : .."3DU.f w.......
000010: 08 00 08 04  00 02 00 66  77 88 99 AA  C0 A8 01 02 : .......f w.......
000020: 00 11 22 33  44 55 C0 A8  01 01 00 00  00 00 00 00 : .."3DU.. ........
000030: 00 00 00 00  00 00 00 00  00 00 00 00              : ........ ....    
==
</code></pre>

<p>ぱっと見で大体予想はつくのですが、今回もpcapファイルを作成して見てみます。
tsharkの出力は以下のようになりました。
    $ tshark -r q08.pcap
      1   0.000000              ->              Ethernet 2 [Malformed Packet]
      2   0.000001 00:66:77:88:99:aa -> 00:11:22:33:44:55 ARP 60 1.2.0.17 is at 0066778899aac0a8</p>

<p>1パケット目が壊れてるようです。
この通信はARPの問い合わせの様子を示しているようで、ARPの構造を知っていればすぐに解ける問題です。
ARPのPDUは以下のようになっています。</p>

<pre><code> 0                               1
 0 1 2 3 4 5 6 7 8 9 a b c d e f 0 1 2 3 4 5 6 7 8 9 a b c d e f 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Hardware type         |           Protocol type       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  HW addr len  | Proto addr len|              OP Code          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  Sender Hardware Address                      |
+                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |   Sender Protocol Address     
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   Sender Protocol Address      |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
|                      Target Hardware Address                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  Target Protocol address                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</code></pre>

<p>これに0x000eから始まるEtherペイロードを合わせてみて見ると、HW addr lenの部分、すなわちARPリクエストのハードウェアアドレス長指定が間違っているのです。
この問い合わせはProtocol typeの部分からIP問い合わせであることがわかり、IPアドレス問い合わせのためにはMACアドレスに対するARP要求が行われます。
MACアドレスが物理層となり、EthernetのMACアドレスは6バイトなので、HW addr lenの部分は08ではなく、06である必要があります。</p>

<p>0x0012番地目の部分が間違っているので、19バイト目が答えとなります。</p>

<h1>問題9</h1>

<p>なぜか問題8と同じ</p>

<h1>問題10</h1>

<pre><code>このパケットデータの??の部分に表示される文字列をお答えください。

0000  00 00 00 00 00 00 00 00  00 00 00 00 08 00 45 00   ........ ......E.
0010  00 54 00 00 40 00 40 01  3c a7 7f 00 00 01 7f 00   .T..@.@. &lt;.......
0020  00 01 08 00 ba 0c 02 18  00 01 d7 c2 05 54 00 00   ........ .....T..
0030  00 00 91 f0 0e 00 00 00  00 00 10 11 12 13 14 15   ........ ........
0040  16 17 18 19 1a 1b 1c 1d  1e 1f 20 21 22 23 24 25   ........ .. ?????
0050  26 27 28 29 2a 2b 2c 2d  2e 2f 30 31 32 33 34 35   ?????????????????
0060  36 37                                              ??
</code></pre>

<p>パケットの問題ではないね。
ASCIIコードテーブル片手に0x21から0x37までのASCII文字を記入しておしまい。</p>

<h3>感想</h3>

<p>CTF予選問題としては出題ファイル形式含めてもちょっと優しすぎるかなぁといった印象を持ちました。
さくさくと解けるものが多く、難しいものは無かったように感じます。
ただ、text2pcapの存在を知らない人に取っては結構な時間を取られてしまう骨の折れるような問題群だったと思います。</p>

<blockquote class="twitter-tweet" lang="ja"><p>わいわい <a href="http://t.co/YaEfzCCFq8">pic.twitter.com/YaEfzCCFq8</a></p>&mdash; 誕生日前日amzn.to/1vvKISb (@mzyy94) <a href="https://twitter.com/mzyy94/status/507067029547806720">2014, 9月 3</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自宅サーバーを増やした]]></title>
    <link href="http://mzyy94.com/blog/2014/04/06/new-server/"/>
    <updated>2014-04-06T23:10:36+09:00</updated>
    <id>http://mzyy94.com/blog/2014/04/06/new-server</id>
    <content type="html"><![CDATA[<p>増税前のPCパーツ買いだめイベントに便乗して、３月中に自宅サーバーを増設しました。
どんな構成で組み立てたのかの紹介になります。</p>

<!-- more -->


<p>サーバー増設にあたって、次に挙げる構成目標を先に決めていました。</p>

<ul>
<li>４コア以上、かつ８スレッド以上</li>
<li>16GB以上のDRAM</li>
<li>速い記憶装置</li>
<li>8万円以下</li>
</ul>


<p>あまり欲がありませんが、だいたいこれを満たせるようにと組みました。</p>

<p>SandyBridge世代のCPUを載せた、自宅サーバーっぽいものは前からありました。
構成は、以下の表の通りです。</p>

<table>
<thead>
<tr>
<th>パーツ</th>
<th>種類</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU</td>
<td>Intel Core i5</td>
</tr>
<tr>
<td>DRAM</td>
<td> DDR3-1333 8GB (4GB x 2)</td>
</tr>
<tr>
<td>HDD</td>
<td> WD2TB</td>
</tr>
<tr>
<td>MB</td>
<td>ECS H67I</td>
</tr>
</tbody>
</table>


<p>どこがサーバーじゃいと思うかもしれませんが、そう思うのもあたりまえ、元デスクトップマシンの構成のままなのです。
大概のことはこなせていたので、新しく組む必要はなかったといわれればその通りなのですが、気軽に仮想マシンをたてて、実験して、つぶして、のような遊びをするには非力であったため、最新のパーツで新たに組むことにしました。</p>

<h1>パーツ選定</h1>

<h2>CPU</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08114.JPG" alt="" />
「サーバー向けならXeonっしょ。」と各所で言われているので、Xeonにしました。
用途としては、CIサーバーが主で、適当な仮想マシンインスタンスを作っては遊び、追加していくという将来を見据えて、<a href="http://ark.intel.com/ja/products/75462/Intel-Xeon-Processor-E3-1245-v3-8M-Cache-3_40-GHz">Intel Xeon E3-1245 v3</a>にしました。</p>

<table>
<thead>
<tr>
<th>プロセッサー</th>
<th>Intel Xeon E3-1245 v3</th>
</tr>
</thead>
<tbody>
<tr>
<td>動作周波数</td>
<td>3.4 GHz</td>
</tr>
<tr>
<td>TB時周波数</td>
<td>3.8 GHz</td>
</tr>
<tr>
<td>キャッシュ</td>
<td>8 MB</td>
</tr>
<tr>
<td>最大 TDP</td>
<td>84 W</td>
</tr>
</tbody>
</table>


<p>動作周波数3.4GHzあれば１０個ほど仮想マシン立ち上げても大丈夫でしょう。</p>

<h2>MB</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08093.JPG" alt="" />
自宅に転がっているPCケースがどれもMini-ITX向けのものなので、Mini-ITXにします。Xeon対応を謳っているマザーボードは少なく、Mini-ITXに限定してしまうと片手で数えきれるほどしか候補がありません。
サーバー向けチップセットを載せたASUSの<a href="http://www.asus.com/Commercial_Servers_Workstations/P9DI/">P9D-I</a>が購入時時点のXeon向けMini-ITXマザーボードとしては最上位であるものの、予算オーバーしてしまうので、今回は見送りました。
残る選択肢はGIGABYTEかASRockのほぼ二択となり、両者の違いはeSATAの有無やGbEの数などで、仮想マシンをいくつもたてることを考えると、二つGbEがあるほうが好ましいということで、GIGABYTEの<a href="http://www.gigabyte.jp/products/product-page.aspx?pid=4600">GA-Z87N-WIFI</a>を購入しました。</p>

<h2>DRAM</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08105.JPG" alt="" />
Xeon向けチップセットを載せたマザーボードを選んでいれば、ECC付きのメモリで長期運用時の信頼性を高めることができるのですが、上記の通り、Z87チップセットを載せたマザーボードを選択したため、特にECCに関してはこだわる必要がありません。
Z87チップセットはDDR3-1333/1600対応のため、たくさんの仮想マシンを支えられるよう、DDR3-1600のもので、16GB（8GB x ２枚）のものを探しました。
相性問題などは特に気にせず、財布と相談しながら予算に合うものを選んだ結果、Kingstonの<a href="http://www.amazon.co.jp/gp/product/B008KRZYH4/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B008KRZYH4&amp;linkCode=as2&amp;tag=mzyy-22">KHX16C10B1K2/16X</a>の価格が暴落していたのですぐさま購入しました。</p>

<h2>Storage</h2>

<p>なんでもよかったです。とにかく速いものであれば。
これも、お財布と相談しながらということで、適当に探してSanDiskの<a href="http://www.amazon.co.jp/gp/product/B00BWR2QZC/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00BWR2QZC&amp;linkCode=as2&amp;tag=mzyy-22">SanDisk SSD UltraPlus 128GB</a>にしました。</p>

<h2>その他パーツ</h2>

<p>増設ということで、旧マシンから流用できるパーツがありません。あまっているパーツは7mm厚120mmファンくらいで、必要なものがいくつもありました。</p>

<p>CPUはバルクで購入したのでファンがついておらず、CPUファンを購入する必要がありました。ケースの高さ制限より、これもまた選択肢が少なく、某所のレビューでよく冷えるとあったので、Scytheの<a href="http://www.amazon.co.jp/gp/product/B004W5KS0G/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B004W5KS0G&amp;linkCode=as2&amp;tag=mzyy-22">KOZUTI</a>にしました。</p>

<p>CPUファンとの熱伝導のためのグリスは、ファン付属のものでもよかったのですが、どうしても別で買いたかったのでAINEXの<a href="http://www.amazon.co.jp/gp/product/B000BLBHTQ/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000BLBHTQ&amp;linkCode=as2&amp;tag=mzyy-22">シルバーグリス</a>を購入しました。よく冷えそうなので。</p>

<p>あとは、2.5インチSSDを3.5インチに変える、<a href="http://www.amazon.co.jp/gp/product/B0088QXTK6/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B0088QXTK6&amp;linkCode=as2&amp;tag=mzyy-22">センチュリー 裸族のインナー</a>や、ケースの狂った配線とつなぐための<a href="http://www.amazon.co.jp/gp/product/B000FHQACA/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000FHQACA&amp;linkCode=as2&amp;tag=mzyy-22">アイネックス ピン配列交換ケーブル</a>や<a href="http://www.amazon.co.jp/gp/product/B000Y1YUKG/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B000Y1YUKG&amp;linkCode=as2&amp;tag=mzyy-22">アイネックス コネクタ簡単脱着ケーブル</a>を購入しました。</p>

<h1>組み立て</h1>

<h2>ケースの整備</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08139.JPG" alt="" />
普通のPCケースならば、パーツをケースに組み込むだけですが、自宅に転がっているというケースがくせ者で、数年前のAcer Aspire H340のものなのです。
このケース、Mini-ITXサイズのマザーボードが組み込まれていたので、一見どのマザーボードでも使えるかと思ったら大間違い。フロントパネルのボタンは効かないわSATAは認識しないわで問題ばかり。このケースを市販されているMini-ITXマザーボードで活用しようと思う方はたくさん居るようで、ウェブに情報はたくさんあります。
今回は、<a href="http://z.apps.atjp.jp/memo/h340.html">http://z.apps.atjp.jp/memo/h340.html</a>を参考にさせていただき、ケースを利用できる状態にしました。</p>

<h2>パーツ組み込み</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/DSC08158.JPG" alt="" /></p>

<p>やっと普通のPCケースとして使える状態になったので、組み込みます。
ここからの手順は、ご存知の方多いと思いますので割愛します。</p>

<h2>設置</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/4/6/Servers.jpg" alt="" />
ちゃんとケースに組み込んで所定の位置に設置しました。
ほかのサーバーとおなじ見た目なのでわかりづらいですが、右上のが今回新設したサーバーとなります。
それらに関してはおいおい紹介していきますのでしばしおまちを。</p>

<h1>費用</h1>

<p>気になるサーバー構築費用です（すべて税込み）。</p>

<table>
<thead>
<tr>
<th>パーツ</th>
<th style="text-align:right;">購入価格(円)</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU    </td>
<td style="text-align:right;">26800</td>
</tr>
<tr>
<td>MB     </td>
<td style="text-align:right;"> 8800</td>
</tr>
<tr>
<td>DRAM   </td>
<td style="text-align:right;">11151</td>
</tr>
<tr>
<td>SSD    </td>
<td style="text-align:right;"> 9790</td>
</tr>
<tr>
<td>Fan    </td>
<td style="text-align:right;"> 2880</td>
</tr>
<tr>
<td>Grease </td>
<td style="text-align:right;"> 1140</td>
</tr>
<tr>
<td>Mounter</td>
<td style="text-align:right;">  891</td>
</tr>
<tr>
<td>Cable  </td>
<td style="text-align:right;">  827</td>
</tr>
</tbody>
</table>


<p>計62,279円で、このサーバーを構築できました。目標としていた8万円を大きく下回り、金銭的にストレージ増設の余地があります。
このサーバーを生かして、今後いろいろと実験していくような記事を書く予定ですので、こう御期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsでダウンロードしながらGunzipしてmd5の計算しながら保存する奴]]></title>
    <link href="http://mzyy94.com/blog/2014/02/25/dl-gunzip-with-nodejs/"/>
    <updated>2014-02-25T22:18:21+09:00</updated>
    <id>http://mzyy94.com/blog/2014/02/25/dl-gunzip-with-nodejs</id>
    <content type="html"><![CDATA[<p><a href="http://nodejs.org/">Node.js</a>です。
Lempel-Ziv符号化で圧縮されたファイル(.gz)のダウンロードをしようとしたときの話です。
ブラウザからダウンロードすると、拡張子gzで保存され、それを解凍することで必要なデータを得ることができるのですが、圧縮されたファイルは解凍したあとでは不要です。
このような不要ファイルを保存することなく、目的のファイルが欲しいような状況になったので、いろいろと調べて解決しました。</p>

<!-- more -->


<p>Lempel-Ziv符号化で圧縮されたファイルは、かの有名な<a href="http://www.zlib.net/">zlib</a>によって扱うことができます。
Node.jsの標準モジュールには、zlibがあり、require()で取り込むことでzlibを利用することができます。
標準モジュールであるため、APIに関する説明が<a href="http://nodejs.org/api/zlib.html">Node.js公式ドキュメント</a>にあるのですが、よく使い方がわからなかったので、いろいろと試行錯誤してみました。</p>

<p>結果、zlibモジュールを利用してストリームを扱うオブジェクトを作成し、パイプでつなげることで、前途の目的である、圧縮されたアーカイブファイルを保存することなく、目的のファイルを保存することができました。</p>

<p>以下、ソースコードになります。
引数に拡張子gzのファイルのURLを渡し実行することで、解凍されたファイルを保存できます。</p>

<script src="https://gist.github.com/mzyy94/9209459.js"></script>


<p>20行目の<code>res.pipe(gunzip).pipe(output);</code>にてhttp.getで得られたストリームを<code>zlib.createGunzip()</code>で作成したgunzipオブジェクトにパイプで渡し、処理されたものを、<code>fs.createWriteStream()</code>で作成されたoutputオブジェクトにさらにパイプすることで不要なファイルを保存することなく、ダウンロードしながら解凍し、保存しています。</p>

<p>保存時に、gunzipオブジェクトの&#8217;data&#8217;イベントを拾って、crypto標準モジュールでmd5の値を計算させています。
ダウンロードのときはmd5チェックしたいですし。</p>

<p>Node.jsのzlibモジュールに関して、あまり実例がなく、せっかくなので記事にしました。
ご参考になれば幸いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unicode形式に変換するPopClipのExtensionを作りたかっただけだったのに]]></title>
    <link href="http://mzyy94.com/blog/2014/02/21/unicode-popclip-extension/"/>
    <updated>2014-02-21T17:46:27+09:00</updated>
    <id>http://mzyy94.com/blog/2014/02/21/unicode-popclip-extension</id>
    <content type="html"><![CDATA[<p>いろいろな趣味がよく合う<a href="http://hitoriblog.com/">ひとりぶろぐ</a>さんの記事を読んでいたときのこと。どうやら<a href="https://itunes.apple.com/jp/app/popclip/id445189367?mt=12&amp;uo=4&amp;at=1l3v4mQ">PopClip</a>が便利らしいことを<a href="http://hitoriblog.com/?p=22987">発見</a>したので、だいぶ昔に買ったっきりで使っていなかったPopClipを活用してみることにしました。</p>

<h1>PopClipとは</h1>

<p>PopClipに関しては、<a href="http://hitoriblog.com/?p=22987">ひとりぶろぐさんの記事</a>にて紹介されているので省略します。知っているという前提で以下、話を進めます。</p>

<h1>Unicodeエンコード</h1>

<p>最近なにかとマイブームなUnicode。CSSのcontentプロパティで記号を表示したり、JavaScriptで難読化したりなど、よく使う割には毎回ブラウザ上でコンソールを拡げていました。この手間を解決する手段として、せっかくなのでPopClipの拡張機能を利用しようと思います。</p>

<!-- more -->


<h1>PopClip拡張機能</h1>

<p>PopClipが人気なのは、iOSライクなコピー＆ペーストができるからではなく、PopClip拡張機能で選択テキストなどに対する便利な機能が実現できるかららしい[<em>要出典</em>]。
PopClip拡張機能を作るための手順に関しては、さっきからよく登場する<a href="http://hitoriblog.com/?p=22987">ひとりぶろぐさんの記事</a>にて説明があるので、読んで作っていきます。</p>

<h2>UnicodeEncode.popclipext</h2>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/21/UnicodeEncode_popclipext.gif" alt="UnicodeEncode_popclipext" /></p>

<p>そこまで難しく考えることなく、サンプルのURLエンコードの拡張機能をちょちょっと編集して、\uXXXXの形のUnicode形式を出力するプログラムをかきました。UTF-8→Unicodeの変換は、<a href="http://gihyo.jp/admin/serial/01/charcode/0004">第4回 UTF-8の冗長なエンコード：本当は怖い文字コードの話｜gihyo.jp … 技術評論社</a>を参考にしました（はせがわさんの警告無視）。</p>

<p>こちらになります。<a href="https://github.com/mzyy94/UnicodeEncode.popclipext">mzyy94/UnicodeEncode.popclipext</a></p>

<p><strong>作るの意外と大変だった</strong></p>

<p>さらっとサンプルのソースコードを読んだ限り、簡単にできるものだとおもったのですが、いろいろと問題がありました。</p>

<h3>LANG環境変数問題</h3>

<p>一つ目の問題は、LANG環境変数。
おなじみシステムのローケルを設定する環境変数ですが、日本語を扱うときのこのロケールがいろいろと厄介なものでした。
OS X Mavericksで日本語環境でターミナルを起動する際は、標準でLANG=ja_JP.UTF-8に設定されています。この状態で、日本語を扱うときには特に問題ないのですが、LANG=Cのときだと厄介なことになることがあるのです。
その例が以下の画像。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/21/problem1.gif" alt="Problem1" /></p>

<p>&#8220;あ&#8221;をUnicode表記にすると\u0342になるはずですが、この例では出力がUTF-8バイトコードの&#8221;あ&#8221;であるe3 81 82がそれぞれ個々の文字としてUnicodeにエンコードされています。
PopClip拡張機能は、起動時にLANG環境変数を引き継ぐことなく、未指定の状態でスクリプトが実行されているようで、デフォルトであるLANG=Cでの処理となってしまっているためです。bashで実装したのが大きな原因であるようですが、どうも文字列を文字ごとに分割するときにLANG=Cではマルチバイト文字をASCII文字として扱ってしまっているのが原因らしいです。</p>

<p>解決策として、<code>export LANG=en_US.UTF-8</code>と、UTF-8ロケールに設定しました。</p>

<h3>濁点文字分離問題</h3>

<p>まず、以下の例をみてください。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/21/problem2.gif" alt="Problem2" /></p>

<p>三人ともおなじ５文字の名前なのに、鹿目さんだけがUnicode化した際に６文字になってしまっています。
これは、鹿目さんが悪いのではなく、OS Xの挙動が悪いのです。</p>

<p>この問題は、OS X特有のもので、OS X上でのUTF-8の文字コードの取り扱いに起因しています。
OS XではUTF-8を扱う文字コードが２種存在します。<code>iconv -l | grep UTF-8</code>とすれば確認できますが、一つは純粋なUTF-8で、もう一つはUTF-8-MACなるものです。このUTF-8-MACは、OS XのファイルシステムによってUTF-8を扱うためのものであるらしく<a href="http://macwiki.sourceforge.jp/wiki/index.php/UTF-8-MAC">1</a>、濁点のある仮名文字などで正規分解が行われ、今回の例では「鹿」「目」「ま」「と」「 ゙」「か」といった具合にUTF-8の文字列がPopClip拡張機能にわたされてしまったようです。この問題は、PopClip拡張機能にせずにシェルスクリプトをそのままのかたちで実行し、テストしたときには再現されなかったので、発見が遅れ、解決に時間がかかってしまいました。</p>

<p>この問題は<code>iconv -f UTF-8-MAC -t UTF-8</code>とすることで解決しました。</p>

<h1>PopClip拡張機能を作りたかっただけだったのに</h1>

<p>PopClipがロケール環境変数を引き継いでいなかったおかげでLANG=CでのUTF-8の文字の扱いがわかり、PopClipがUTF-8-MACとしてテキストを渡してくれていたおかげでOS XでのUTF-8の取り扱いに関して知識を得ることができて、結果的にいい経験になりました。ありがとう、PopClip。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Honda 3DのサイトがFlashだったときの症例]]></title>
    <link href="http://mzyy94.com/blog/2014/02/13/honda-3d-webgl/"/>
    <updated>2014-02-13T19:03:54+09:00</updated>
    <id>http://mzyy94.com/blog/2014/02/13/honda-3d-webgl</id>
    <content type="html"><![CDATA[<p>RSSを消化してたときのこと。
<a href="http://japanese.engadget.com/2014/01/28/3d-nsx-concept-5/">ホンダが歴代コンセプトカーの3DデータをCCライセンスで公開、NSX Concept など全5種 (動画) - Engadget Japanese</a>
なる記事を見つけて、「クリエイティブコモンズで3Dモデル公開とはなかなかやるな。流行に乗っててよろしい。」と感心していました。</p>

<p>しかし、そんな関心も次のクリックで吹っ飛びました。</p>

<!-- more -->


<pre>
＿人人人人人人人＿
＞　衝撃のFlash　＜
￣Y^Y^Y^Y^Y^Y￣
</pre>


<p>流行に乗ってると微塵でも思ってしまったことを後悔。
3Dプリンタという流行を意識した3Dモデルの公開に使われたものが流行遅れのFlashであるという、なんとも言い難い悲しい状況を目の当たりにしてしまったのです。</p>

<p>この惨状を目にした60分後、手元にはこんなものが出来上がっていました。</p>

<h3><a href="http://mzyy94.com/HONDA-3D-WebGL-demo/">Honda 3D - WebGL Demo (Beta)</a></h3>

<p><span>※Chrome 33向けです。</span><br>
<span>※※RAMとCPU使用率と通信量を膨大に使うので開く際はご注意ください</span></p>

<p><a href="https://github.com/mzyy94/HONDA-3D-WebGL-demo">GitHub Repository</a></p>

<p>悲しみからか、手が勝手に動き<strong>Flashなし</strong>で模倣していました。</p>

<p>このれらのサイトを構成している技術に関して比較してみました。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/13/comparison.png" alt="comparison" /></p>

<p>せっかくつくったので解説させてください。</p>

<h1>トップページ</h1>

<p>上：拙作デモサイト　下：本家サイト</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/13/demo-top.png" alt="demo" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/original-top.png" alt="original" /></p>

<p>メインページの全体像はほとんど違和感を感じさせない作りとなっています。
左右のパネルを選択すると本家と変わらないスライドアニメーションで次のパネルへ移り変わります。</p>

<p>このカルーセルはjQueryによるclass操作とCSS3のkey frame アニメーションを使っています。クリック時に左端のパネルのmarginを以下のように動かすことで滑らかなスライドアニメーションを疑似的に見せています。</p>

<p>CSS3の技術が詰まったパネルをもう少し詳しく見てみましょう。
テキストの上でもカーソル形状は本家のものと同じくデフォルトになるようにしてあります。
背景透過はbackground-colorをCSS3からのrgba値を用いており、サムネイルを円形にしてあるのもCSS3のborder-radiusを指定して実現しています。さらに、パネル上の美しいfontもCSS3によるWeb fontを利用しています。</p>

<p>背景動画はYouTubeのHTML5 videoでの埋め込みにしてあるというAnti-Flashの徹底ぶり。オプションを以下の通り指定してNo Flashにしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;iframe id="bgmovie" width="1920" height="1080" src="http://www.youtube.com/embed/MJWzLm91Hmg?html5=1&playlist=kdOVr4Tqdoc&autoplay=1&disablekb=1&controls=0&showinfo=0&vq=hd1080&modestbranding=1&rel=0&loop=1" style="top: -374px;"&gt;&lt;/iframe&gt;</span></code></pre></td></tr></table></div></figure>


<h1>3D ビュー</h1>

<p>ここのシーンを見せるためにHondaはFlashを試用したというのは安易に想定できますが、せっかくなのでHTML5の技術を使って欲しかったです。
ということで、HTML5の新技術であるWebGLを利用してモデルを表示するようにしました。</p>

<p>WebGLの複雑なコードを書かずとも、数十行のコードで手軽にWebGLをつかえるライブラリはいくつか存在します。
今回は<a href="http://threejs.org/">three.js</a>とよばれるWebGLラッパーを利用しました。</p>

<p>WebGLで3Dモデルを表示するには、表示するための3Dデータが必要です。
現在、Honda-3d.comからダウンロードできるファイルは3Dプリンタ向けのSTL形式で、WebGL、加えてthree.jsでもそのままでは利用できるものではありません。
そこで、three.jsで扱える形式に変換する必要があります。
今回は3Dモデリング界では名高い<a href="http://www.blender.org/">Blender</a>を利用しました。</p>

<h2>3Dモデルデータを変換する</h2>

<p>BlenderでSTL形式をthree.jsで扱える形式に変換する方法はそこまで難しいことではありません。
Blenderは標準でSTL形式を扱えるので、three.jsで使えるよう、
three.jsに含まれるBlender用のAdd-onを導入すれば、three.jsで表示できる形式に変換する環境は整います。
このAdd-onはthree.jsをgitリポジトリからCloneした際に、一緒にダウンロードされています。</p>

<p>Add-onを導入するのは簡単で、必要なファイル群をBlenderのアプリケーションフォルダに入れてあげるだけです。
OS X上で、Blender@2.69とthree.js@r65を利用する場合は、</p>

<pre><code>[three.jsのClone先ディレクトリ]/utils/exporters/blender/2.65/scripts/addons
</code></pre>

<p>にある<code>io_mesh_threejs</code>ディレクトリを</p>

<pre><code>[アプリケーションフォルダ]/Blender.app/Contents/MacOS/2.69/scripts/addons
</code></pre>

<p>の中にコピーします。</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-1.png" alt="blender" /></p>

<p>コピーし終わったらBlenderを起動し、File->User Preferences&#8230;で設定画面を開き、
Addonsタブにある検索ボックスでthreejsとして検索して出てくる項目をチェックし有効化します。
チェックし終わったら次回以降も反映されるよう、Save User Settingsをしておきます。
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-2.png" alt="blender" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-3.png" alt="blender" /></p>

<p>設定画面を閉じたらFile->Import->Stlでダウンロードしたファイルを開き、
起動時に作られていた不要なオブジェクトを削除し、File->Export->Three.jsでthree.js用の形式にして出力します。
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-4.png" alt="blender" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-5.png" alt="blender" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/blender-6.png" alt="blender" /></p>

<h2>3Dモデルデータを表示する</h2>

<p>上：拙作デモサイト　下：本家サイト</p>

<p><img src="http://mzyy94.com/blog/resources/images/2014/2/13/demo-3dview.png" alt="demo" />
<img src="http://mzyy94.com/blog/resources/images/2014/2/13/original-3dview.png" alt="original" /></p>

<p>表示はthree.jsの基本的な機能を使うだけで行っています。
基本的な方法は、
<a href="http://www.atmarkit.co.jp/ait/articles/1210/04/news142.html">Webグラフィックをハックする（5）：多彩な表現力のWebGLを扱いやすくする「Three.js」 (1/5) - ＠IT</a>
にて説明されています。
この説明を参考に、three.jsのファイルを読み込ませて表示させています。
ちゃんとマウスでぐりぐりできるようになっています。</p>

<p>各コードに関して説明したかったのですが、すでに結構な分量になっているので、気になる人は以下のGistにてご参照ください。</p>

<p><a href="https://gist.github.com/mzyy94/8974444">https://gist.github.com/mzyy94/8974444</a></p>

<p>以上、Anti-Flashをこじらせた人の症例でした。</p>
]]></content>
  </entry>
  
</feed>
